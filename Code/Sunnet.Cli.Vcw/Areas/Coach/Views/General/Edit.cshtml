@model Sunnet.Cli.Business.Vcw.Models.CoachFileModel
@using Sunnet.Cli.UIBase.Models;
@using Sunnet.Cli.Core.Vcw.Enums;
@using System.Web.Optimization;
@using Sunnet.Cli.Business.Vcw.Models;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase;
@using Sunnet.Framework


@if (!string.IsNullOrEmpty(ViewBag.Redirect))
{
    @section BreadPath
{
        @(Html.ActionLink("Summary", "Index", "Summary"))&nbsp;  
        <i class="icon-angle-right"></i>&nbsp;  
        @(Html.ActionLink("Coach Files", "Index", "Summary"))&nbsp; 
        <i class="icon-angle-right"></i>&nbsp;   
        View
    }
}
else
{
    @section BreadPath
{
        @(Html.ActionLink("My General Files", "Index", "General"))&nbsp;
    <i class="icon-angle-right"></i>&nbsp;       
    View
    }
}

@section LeftMenu
{
    @if (!string.IsNullOrEmpty(ViewBag.Redirect))
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Coach_Summary)
    }
    else
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Coach_General)
    }

}

@{
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    List<SelectItemModel> Strategies = ViewBag.Strategies as List<SelectItemModel>;
    List<CoachListModel> SelectedCoaches = ViewBag.SelectedCoaches as List<CoachListModel>;
    List<SelectItemModel> PMs = ViewBag.PM as List<SelectItemModel>;
    List<int> SelectedPMs = ViewBag.SelectedPMs as List<int>;
}

@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload")
    <script type="text/javascript">
        var arrSelectCoachList = new Array();
        $(function () {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    var backurl = "@(ViewBag.Redirect)";
                    if (backurl != "") {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))");
                    }
                    else {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "Index")");
                    }
                }
            });
            $("#divCoachSelect a input[name=coach]").each(function () {
                var tmpId = $(this).val();
                var tmpFistname = $(this).attr("firstname");
                var tmpLastname = $(this).attr("lastname");
                arrSelectCoachList.push({ id: tmpId, fistName: tmpFistname, lastName: tmpLastname });
            })

        })

        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }

        function receiveCoachList(v) {
            if (v) {
                arrSelectCoachList = v;
                var tmpSelectCoachHtml = TemplateEngine(window["template_coach_select"].innerHTML, v);
                $("#divCoachSelect").html(tmpSelectCoachHtml);
            }
        }

        function moveCoachList(id) {
            for (var i = 0; i < arrSelectCoachList.length; i++) {
                if (arrSelectCoachList[i].id == id) {
                    arrSelectCoachList.splice(i, 1);
                    break;
                }
            }
        }

    </script>
}
@using (Ajax.BeginForm("Edit", "General", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        role = "form",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    <div class="right-content-top">
        @if (!string.IsNullOrEmpty(ViewBag.Redirect))
        {
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))" >Back to Summary</a>
        }
        else
        {
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))" >Back to General List</a>
        }
    </div>
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                                </div>
                                <div class="inputtext-con">
                                    @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IdentifyFileName)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    <label class="control-label" for="DateRecorded">Date Video Recorded</label>
                                </div>
                                <div class="inputtext-con">
                                    @Html.TextBoxFor(m => m.DateRecorded, new
                           {
                               @class = "form-control date",
                               @Value = Model.DateRecorded.Value.FormatDateString(),
                           })
                                    @Html.ValidationMessageFor(m => m.DateRecorded)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">Coaching Strategies</div>
                                </div>
                                @if (Strategies != null)
                                {
                                    foreach (SelectItemModel item in Strategies)
                                    {
                                        bool isChecked = Model.StrategyIds.Contains(item.ID);
                                        if (item.Name.Trim().ToLower() == SFConfig.StrategyOther)
                                        {
                                    <div class="checkbox-con checkbox-con-double">
                                        <label class="checkbox-inline checkbox-other">
                                            <input type="checkbox" name="Strategy" onclick="StrategyClick(this)" 
                                                    value="@item.ID" @(isChecked ? "checked" : "")>@item.Name
                                        </label>
                                        <label class="textbox-other">
                                            @if (isChecked)
                                            {
                                                @Html.TextBoxFor(model => model.StrategyOther, new { @class = "form-control form-control-double" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.StrategyOther, new
                                           {
                                               @class = "form-control form-control-double",
                                               @disabled = "disabled"
                                           }) 
                                            }
                                        </label>
                                        @Html.ValidationMessageFor(model => model.StrategyOther)
                                    </div>
                                        }
                                        else
                                        {
                                    <div class="checkbox-con checkbox-con-double">
                                        <label class="checkbox-inline">
                                            <input type="checkbox" name="Strategy"  
                                                    value="@item.ID" @(isChecked ? "checked" : "") >
                                            @item.Name
                                        </label>
                                    </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">
                                        Coaching Objectives
                                <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                                    </div>
                                    <label for="Objectives" class="hide">&nbsp;</label>
                                </div>
                                <div class="textarea-con">
                                    @Html.TextAreaFor(m => m.Objectives, new { @class = "form-control", row = "2" })
                                    @Html.ValidationMessageFor(m => m.Objectives)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">
                                        Coaching Effectiveness
                                <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                                    </div>
                                    <label class="hide" for="Effectiveness">&nbsp;</label>
                                </div>
                                <div class="textarea-con">
                                    @Html.TextAreaFor(m => m.Effectiveness, new { @class = "form-control", row = "2" })
                                    @Html.ValidationMessageFor(m => m.Objectives)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-6">
                    <video controls="controls" class="videoplay">
                        <source src="@(FileHelper.GetPreviewPathofUploadFile(Model.FilePath).Replace("\\", "/"))" />
                    </video>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">Send Upload to PM</div>
                                </div>
                                <div class="checkbox-con-multi">
                                    @foreach (SelectItemModel item in PMs)
                                    {
                                        <label class="checkbox-inline">
                                            <input type="checkbox" name="pm" value="@(item.ID)" 
                                                @(SelectedPMs.Contains(item.ID) ? "checked" : "")>@(item.Name)
                                        </label>
                                    }
                                </div>
                                <div class="content-title3">
                                    <div class="control-label">Send Upload to Coach</div>
                                    <a title="Coaches" href="/SearchUser/CoachList" data-target="#modalNormal"
                                        data-toggle="modal" class="t-teacher-btn">Coach List</a>
                                </div>
                                <script type="text/html" id="template_coach_select">
                                    <%for ( var i = 0; i < this.length ; i++) {%> 
                                      <a class="del-btn t-del-btn">
                                          <button type="button" class="close" data-dismiss="alert" onclick="moveCoachList(<% this[i].id %>)">
                                              <span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                                          <input type="hidden" name="coach" value="<% this[i].id %>" /><% this[i].fistName %> <% this[i].lastName %>
                                      </a>
                                    <%}%>
                                </script>
                                <div style="max-height: 119px; overflow-y: scroll" id="divCoachSelect">
                                    @if (SelectedCoaches != null)
                                    {
                                        foreach (CoachListModel item in SelectedCoaches)
                                        {
                                        <a class="del-btn t-del-btn">
                                            <button type="button" class="close" data-dismiss="alert" onclick="moveCoachList('@(item.UserId)')">
                                                <span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                                            <input type="hidden" name="coach" value="@(item.UserId)" 
                                                firstname="@(item.FirstName)" lastname="@(item.LastName)" />@(item.FirstName) @(item.LastName)
                                        </a>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @Html.Partial("/Areas/Coach/Views/Partials/UploadedFile.cshtml")
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">PM Feedback</div>
                        </div>
                        <div class="uploader-list">
                            @if (!string.IsNullOrEmpty(Model.FeedbackFilePath))
                            {
                                <div class="item">
                                    <i class="icon-paper-clip"></i>
                                    <a href="@(DownLoadFile.GetDownFilePath(Model.FeedbackFilePath, Model.FeedbackFileName))"  
                                                class="form-link4">@(Model.FeedbackFileName)</a>
                                </div>
                            }
                            <p>
                                @Model.FeedbackText
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" name="uploadfiles" id="uploadfiles" />
    <div class="modal-footer">
        <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" id="btnSubmit" onclick="return beforeSubmit_edit(this);">
        @if (!string.IsNullOrEmpty(ViewBag.Redirect))
        {
            <button class="mainbutton modal-btn cancel-btn" type="button" data-dismiss="modal" 
            onclick='redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "Index")")'>
                Cancel</button>
        }
        else
        {
            <button class="mainbutton modal-btn cancel-btn" type="button" data-dismiss="modal" 
            onclick='redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))")'>
                Cancel</button>   
        }

    </div>
}