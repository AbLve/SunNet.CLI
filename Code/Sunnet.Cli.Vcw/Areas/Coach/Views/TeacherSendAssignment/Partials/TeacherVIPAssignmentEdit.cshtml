@model Sunnet.Cli.Business.Vcw.Models.AssignmentModel
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase.Models;
@using Sunnet.Framework
@{
    List<SelectItemModel> Contents = ViewBag.Contents as List<SelectItemModel>;
    List<SelectItemModel> Contexts = ViewBag.Contexts as List<SelectItemModel>;
}

<div class="form-group">
    <label class="col-sm-3 control-label" for="Type">Assignment Type</label>
    <div class="col-sm-3">
        @Html.DropDownListFor(model => model.Type, ViewBag.AssignmentType as IEnumerable<SelectListItem>, new { @class = "form-control", @disabled = "disabled" })
    </div>
</div>
<div class="form-group">
    @Html.LabelFor(model => model.DueDate, new { @class = "col-sm-3 control-label required" })
    <div class="col-sm-3">
        @Html.TextBoxFor(model => model.DueDate, new { @class = "form-control date", @Value = Model.DueDate == null ? "" : DateTime.Parse(Model.DueDate.ToString()).FormatDateString() })
        @Html.ValidationMessageFor(model => model.DueDate)
    </div>
    @Html.LabelFor(model => model.WaveId, new { @class = "col-sm-3 control-label" })
    <div class="col-sm-3">
        @Html.DropDownListFor(model => model.WaveId, ViewBag.Waves as IEnumerable<SelectListItem>, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.WaveId)
    </div>
</div>
<div class="form-group">
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Video Context</div>
            </div>

            @if (Contexts != null)
            {
                foreach (SelectItemModel item in Contexts)
                {
                    bool isChecked = Model.ContextIds.Contains(item.ID);
                    if (item.Name.Trim().ToLower() == SFConfig.ContextOther)
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline checkbox-other">
                        <input type="checkbox" name="Context_Assignment"  onclick="ContextClick(this)"
                            value="@(item.ID)" @(isChecked ? "checked" : "")>@item.Name
                    </label>
                    <label class="textbox-other">
                        @if (isChecked)
                        {
                            @Html.TextBoxFor(model => model.ContextOther, new { @class = "form-control form-control-double" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.ContextOther, new { @class = "form-control form-control-double", @disabled = "disabled" })    
                        }
                    </label>
                </div>
                    }
                    else
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Context_Assignment" value="@(item.ID)" @(isChecked ? "checked" : "")>@item.Name
                    </label>
                </div>
                    }
                }

            }
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Content</div>
            </div>
            @foreach (SelectItemModel item in Contents)
            {
                bool isChecked = Model.ContentIds.Contains(item.ID);
                if (item.Name.Trim().ToLower() == SFConfig.AssignmentContentOther)
                {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline checkbox-other">
                        <input type="checkbox"  name="Content" id="content-other" onclick="ContentClick(this)"
                            value="@item.ID" @(isChecked ? "checked" : "")>@item.Name
                    </label>
                    <label class="textbox-other">
                        @if (isChecked)
                        {
                            @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control form-control-double" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control form-control-double", @disabled = "disabled" })
                        }
                    </label>
                </div>
                }
                else
                {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox"  name="Content" value="@item.ID" @(isChecked ? "checked" : "")>@item.Name
                    </label>
                </div>
                }
            }
        </div>

    </div>
</div>
<div class="form-group">
    <div class="col-sm-12">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">
                    @Html.LabelFor(model => model.Description)
                    <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                </div>
            </div>
            <div class="textarea-con">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "5" })
                @Html.ValidationMessageFor(model => model.Description)
            </div>
        </div>
    </div>
</div>


