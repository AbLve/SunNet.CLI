@model Sunnet.Cli.Business.Vcw.Models.AssignmentListModel
@using Sunnet.Cli.UIBase.Models;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.Business.Vcw.Models
@{
    ViewBag.Title = "AssignmentIndex";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@section LeftMenu
{
    @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Coach_Teachers)
}

@section BreadPath
{
    @(Html.ActionLink("My Teachers", "Index", "TeacherVIP"))&nbsp;
    <i class="icon-angle-right"></i>&nbsp;
    Assignments Sent
}

<form class="form-horizontal" role="form">
    @Html.AntiForgeryToken()
    @Html.Partial("~/Areas/Coach/Views/Partials/Tab.cshtml", new PageSelected { PageId = 4 })
    <div class="nav-container-main">
        <div class="form-group"></div>

        <div class="nav-tab">
            <ul id="myTab" class="nav-container nav-container-little" role="tablist">
                <li><a href="@(Url.Action("TeacherIndex", "TeacherSendAssignment", new { returnurl = Request.QueryString["returnurl"] }))">Teacher List</a></li>
                <li class="active"><a href="@(Url.Action("AssignmentIndex", "TeacherSendAssignment", new { returnurl = Request.QueryString["returnurl"] }))">Assignment Sent</a></li>
            </ul>
        </div>

        <div class="form-group">
        </div>
        <div class="nav-container-main">
            <div class="form-group"></div>

            <div class="form-group">
                <label class="control-label col-sm-2" for="CommunityName">Community Name</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.CommunityName, ViewBag.Communities as IEnumerable<SelectListItem>, new { @class = "form-control", data_bind = "value: searchCriteria.community" })
                </div>
                <label class="control-label col-sm-2" for="SchoolName">School Name</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.SchoolName, ViewBag.Schools as IEnumerable<SelectListItem>, new { @class = "form-control", data_bind = "value: searchCriteria.school" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="TeacherName">Teacher Name</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.TeacherName, ViewBag.Teachers as IEnumerable<SelectListItem>, new { @class = "form-control", data_bind = "value: searchCriteria.teacher" })
                </div>
                <label class="control-label col-sm-2" for="Status">Status</label>
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.Status, ViewTextHelper.DefaultAllText, "-1", new { @class = "form-control", data_bind = "value: searchCriteria.status" })
                </div>
                <div class="col-sm-2"></div>
                <div class="col-sm-2">
                    <button class="mainbutton mainright-btn sreach-btn" type="button" data-bind="event: { click: search }">Search</button>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-12">
                    <input type="button" class="mainbutton mainright-btn pencil-btn" value="Delete Selected Assignment(s)" onclick="return deletedata()">
                </div>
            </div>

            <div class="main-content">
                <div class="content-title">Assignment</div>
                <div class="content-body-tab">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr data-bind="foreach: { data: headers, as: 'header' }">
                                <!-- ko if: (header.order === true)-->
                                <th data-bind="style: { width: width }">
                                    <a href="javascript:;" data-bind="text: text, click: $root.changeOrder"></a>
                                    <span class="glyphicon"
                                        data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                                    <span class="glyphicon"
                                        data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                                </th>
                                <!-- /ko-->
                                <!-- ko if: (header.order === false) -->
                                <th data-bind="text: text, style: { width: width }"></th>
                                <!-- /ko-->
                            </tr>
                        </thead>
                        <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                            <tr>
                                <td>
                                    <label>
                                        <input name="assignment_select" type="checkbox" data-bind="value: item.ID" />
                                    </label>
                                </td>
                                <td data-bind="text: item.CommunityName"></td>
                                <td data-bind="text: item.SchoolName"></td>
                                <td data-bind="text: item.TeacherName"></td>
                                <td data-bind="text: item.DueDate == minDate ? '' : item.DueDate"></td>
                                <td data-bind="text: item.SessionText"></td>
                                <td data-bind="text: item.Content"></td>
                                <td data-bind="text: item.UploadType"></td>
                                <td data-bind="text: item.Status.text"></td>
                                <td>
                                    <a class="table-btn icon-folder-open view-btn" data-bind="event: { click: $root.viewData }" href="#" title="View"></a>
                                </td>
                            </tr>
                        </tbody>@Html.Display("e", "NoData", new { Colspan = 100 })
                    </table>
                    @Html.Partial("_Partial_Pager")
                </div>
            </div>
        </div>
    </div>
</form>



@section Scripts
{
    <script type="text/javascript">
        var list_Assignment = {};

        $(function () {

            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    list_Assignment.search();
                }
            })

            list_Assignment = new ViewModel(
                {
                    instanceName: "list_Assignment",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("SearchAssignment")))',
                    viewDataUrl: '@Html.Raw(Url.Action("Edit"))',
                    viewType: "Redirect",
                    orderBy: "ID",
                    orderDirection: "DESC",
                    pageSize: 10,
                    headers: [
                        {
                            text: "@Html.DisplayName("Select")",
                            width: "2%"
                        },
                        {
                            text: "@Html.DisplayName("Community")",
                            width: "13%"
                        },
                        {
                            text: "@Html.DisplayName("School")",
                            width: "12%"
                        },
                        {
                            text: '@Html.DisplayName("Teacher")',
                            field: "@Html.NameFor(model => model.TeacherId)",
                            order: true,
                            width: "12%"
                        },
                        {
                            text: '@Html.DisplayName("Due Date")',
                            field: "@Html.NameFor(model => model.DueDate)",
                            order: true,
                            width: "10%"
                        },
                        {
                            text: '@Html.DisplayName("Session")',
                            field: "@Html.NameFor(model => model.SessionId)",
                            order: true,
                            width: "9%"
                        },
                        {
                            text: '@Html.DisplayName("Content")',
                            field: "@Html.NameFor(model => model.Content)",
                            width: "*"
                        },
                        {
                            text: '@Html.DisplayName("Upload Type")',
                            field: "@Html.NameFor(model => model.UploadType)",
                            width: "14%"
                        },
                        {
                            text: '@Html.DisplayName("Status")',
                            field: "@Html.NameFor(model => model.Status)",
                            order: true,
                            width: "8%"
                        },
                        {
                            text: "Action",
                            width: "2%"
                        }
                    ],
                    searchCriteria: {
                        community: ko.observable(window.queryString("community", -1)),
                        school: ko.observable(window.queryString("school", -1)),
                        teacher: ko.observable(window.queryString("teacher", -1)),
                        status: ko.observable(window.queryString("status", -1))
                    }
                }
            );

            list_Assignment.search();
            ko.applyBindings(list_Assignment);
        });

            function deletedata() {
                var assignment_select = [];
                $("input[name=assignment_select]:checked").each(function () {
                    assignment_select.push(this.value);
                });
                if (assignment_select.length == 0) {
                    showMessage("hint", "Vcw_Assignments_Noselect")
                    return false;
                }
                else {
                    var message = window.getErrorMessage("confirmToDelete");
                    message = message.replace("[{0}]", "the selected assignments");
                    $.when(waitingConfirm(message, "Delete", "Cancel")).done(function () {
                        $.post("Delete", { "assignment_select": assignment_select }, function () { list_Assignment.search(); });
                    })
                }
                return false;
            }

    </script>
}