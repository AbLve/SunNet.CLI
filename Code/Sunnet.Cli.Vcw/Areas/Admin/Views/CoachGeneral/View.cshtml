@model Sunnet.Cli.Business.Vcw.Models.CoachFileModel
@using Sunnet.Cli.UIBase.Models
@using System.Web.Optimization;
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase;
@using Sunnet.Cli.Business.Vcw.Models;
@using Sunnet.Cli.Vcw.Models;
@using Sunnet.Framework
@{
    ViewBag.Title = "View Admin Coach General File";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    bool isSummary = !string.IsNullOrEmpty(ViewBag.Redirect);

    List<SelectItemModel> Strategies = ViewBag.Strategies as List<SelectItemModel>;
    List<CoachListModel> SelectedCoaches = ViewBag.SelectedCoaches as List<CoachListModel>;
    List<SelectItemModel> PMs = ViewBag.PM as List<SelectItemModel>;
    List<int> SelectedPMs = ViewBag.SelectedPMs as List<int>;
}

@if (isSummary)
{
    @section LeftMenu
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Admin_Summary)
    }
}
else
{
    @section LeftMenu
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Admin_Coaches)
    }
}

@if (isSummary)
{
    @section BreadPath
    {
        @(Html.ActionLink("Summary", "Index", "Summary"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        @(Html.ActionLink("Coach Files", "Index", "Summary"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        File
    }
}
else
{

    @section BreadPath
    {
        @(Html.ActionLink("Coaches", "Index", "CoachGeneral"))&nbsp;<i class="icon-angle-right"></i>
        @(Html.ActionLink("Coach General", "Index", "CoachGeneral"))&nbsp;<i class="icon-angle-right"></i>
    View
    }
}
<div class="right-content-top">
    @if (isSummary)
    {
        <a class="mainbutton nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
        Url.Action("TeacherFiles", "Summary"))" >Back to Files</a>
    }
    else
    {
        <a class="mainbutton nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
        Url.Action("Index", "CoachGeneral"))" >Back to Coach General</a>
    }
</div>
@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload")
    @Scripts.Render("~/scripts/vcw_upload_feedback")
    <script type="text/javascript">
        var arrSelectCoachList = new Array();
        $(function () {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    var backurl = "@(ViewBag.Redirect)";
                    if (backurl != "") {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("TeacherFiles", "Summary"))");
                    }
                    else {
                        redirectBack("@Url.Action("Index")");
                    }
                }
            });

            $("#divCoachSelect a input[name=coach]").each(function () {
                var tmpId = $(this).val();
                var tmpFistname = $(this).attr("firstname");
                var tmpLastname = $(this).attr("lastname");
                arrSelectCoachList.push({ id: tmpId, fistName: tmpFistname, lastName: tmpLastname });
            })
        });

        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }


        function beforeSubmit(sender) {
            if (uploader.getFiles('queued').length > 0) {
                showMessage("hint", "Vcw_File_Inqueue")
                return false;
            }
            if (uploader_feedback.getFiles('queued').length > 0) {
                showMessage("hint", "Vcw_Feedback_Inqueue")
                return false;
            }
            GetFiles();
            return true;
        };

        function GetFiles() {
            var uploadFile_feedback = "";
            var completeFiles_feedback = uploader_feedback.getFiles("complete");
            if (completeFiles_feedback.length > 0) {
                uploadFile_feedback += completeFiles_feedback[0].name + "(" + WebUploader.formatSize(completeFiles_feedback[0].size) + ")" + "|" + completeFiles_feedback[0].dbName;
            }
            $("#uploadfile_feedback").val(uploadFile_feedback);


            var uploadFile = "";
            var completeFiles = uploader.getFiles("complete");
            if (completeFiles.length > 0) {
                uploadFile += completeFiles[0].name + "(" + WebUploader.formatSize(completeFiles[0].size) + ")" + "|" + completeFiles[0].dbName;
            }
            $("#uploadfile").val(uploadFile);

        }

        function receiveCoachList(v) {
            if (v) {
                arrSelectCoachList = v;
                var tmpSelectCoachHtml = TemplateEngine(window["template_coach_select"].innerHTML, v);
                $("#divCoachSelect").html(tmpSelectCoachHtml);
            }
        }

        function moveCoachList(id) {
            for (var i = 0; i < arrSelectCoachList.length; i++) {
                if (arrSelectCoachList[i].id == id) {
                    arrSelectCoachList.splice(i, 1);
                    break;
                }
            }
        }

    </script>
}

@using (Ajax.BeginForm("View", "CoachGeneral", null, PostFormHelper.DefaultAjaxOptions, new
{
    @class = "form-horizontal",
    id = formId
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(a => a.ID)
    @Html.Partial("/Views/TeacherInfo/CoachInfo.cshtml")
    <div class="main-content">
        <div class="content-title">Selected File Information</div>
        <div class="content-body">
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                                </div>
                                <div class="inputtext-con">
                                    @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IdentifyFileName)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    <label class="control-label" for="DateRecorded">Date Video Recorded</label>
                                </div>
                                <div class="inputtext-con">
                                    @Html.TextBoxFor(m => m.DateRecorded, new
                   {
                       @class = "form-control date",
                       @Value = Model.DateRecorded.Value.FormatDateString()
                   })
                                    @Html.ValidationMessageFor(m => m.DateRecorded)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">Coaching Strategies</div>
                                </div>
                                @if (Strategies != null)
                                {
                                    foreach (SelectItemModel item in Strategies)
                                    {
                                        bool isChecked = Model.StrategyIds.Contains(item.ID);
                                        if (item.Name.Trim().ToLower() == SFConfig.StrategyOther)
                                        {
                                    <div class="checkbox-con checkbox-con-double">
                                        <label class="checkbox-inline  checkbox-other">
                                            <input type="checkbox" name="Strategy" onclick="StrategyClick(this)" 
                                                    value="@item.ID" @(isChecked ? "checked" : "")>@item.Name
                                        </label>
                                        <label class="textbox-other">
                                            @if (isChecked)
                                            {
                                                @Html.TextBoxFor(model => model.StrategyOther, new { @class = "form-control form-control-double" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.StrategyOther, new
                                   {
                                       @class = "form-control form-control-double",
                                       @disabled = "disabled"
                                   }) 
                                            }
                                        </label>
                                        @Html.ValidationMessageFor(model => model.StrategyOther)
                                    </div>
                                        }
                                        else
                                        {
                                    <div class="checkbox-con checkbox-con-double">
                                        <label class="checkbox-inline">
                                            <input type="checkbox" name="Strategy"  
                                                    value="@item.ID" @(isChecked ? "checked" : "") >
                                            @item.Name
                                        </label>
                                    </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">
                                        Coaching Objectives
                            <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                                    </div>
                                    <label class="hide" for="Objectives">&nbsp;</label>
                                </div>
                                <div class="textarea-con">
                                    @Html.TextAreaFor(m => m.Objectives, new { @class = "form-control", row = "2" })
                                    @Html.ValidationMessageFor(m => m.Objectives)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-6">
                    <video controls="controls" class="videoplay">
                        <source src="@(FileHelper.GetPreviewPathofUploadFile(Model.FilePath).Replace("\\", "/"))" />
                    </video>
                </div>
            </div>
            @Html.Partial("/Areas/Coach/Views/Partials/UploadedFile.cshtml")
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                Coaching Effectiveness
                    <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                            </div>
                            <label class="hide" for="Effectiveness">&nbsp;</label>
                        </div>
                        <div class="textarea-con">
                            @Html.TextAreaFor(m => m.Effectiveness, new { @class = "form-control", row = "2" })
                            @Html.ValidationMessageFor(m => m.Effectiveness)
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                FeedbackText
                    <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                            </div>
                            <label class="hide" for="FeedbackText">&nbsp;</label>
                        </div>
                        <div class="textarea-con">
                            @Html.TextAreaFor(model => model.FeedbackText, new { @class = "form-control", @rows = "2" })
                            @Html.ValidationMessageFor(model => model.FeedbackText)
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="form-goup">
                        <div class="content-con" style="min-height: 138px">
                            <div class="content-title3">
                                <div class="control-label">Uploaded Feedback File</div>
                            </div>
                            <div class="uploader-list" id="uploader-list_feedback">
                                @if (!string.IsNullOrEmpty(Model.FeedbackFileName))
                                {
                                    <div class="item">
                                        <i class="icon-paper-clip"></i>
                                        <a class="form-link4"
                                            href="@DownLoadFile.GetDownFilePath(Model.FeedbackFilePath, Model.FeedbackFileName)">@(Model.FeedbackFileName)</a>
                                        <span class="delete" title="Remove this file">
                                            <a href="javascript:;" onclick="RemoveFile_feedback(this)">×</a>
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="form-goup">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label">Send Upload to PM</div>
                            </div>
                            <div class="checkbox-con-multi">
                                @foreach (SelectItemModel item in PMs)
                                {
                                    <label class="checkbox-inline">
                                        <input type="checkbox" name="pm" value="@(item.ID)" 
                                                @(SelectedPMs.Contains(item.ID) ? "checked" : "")>@(item.Name)
                                    </label>
                                }
                            </div>
                            <div class="content-title3">
                                <div class="control-label">Send Upload to Coach</div>
                                <a title="Coaches" href="/SearchUser/CoachList" data-target="#modalNormal"
                                    data-toggle="modal" class="t-teacher-btn">Coach List</a>
                            </div>
                            <script type="text/html" id="template_coach_select">
                                <%for ( var i = 0; i < this.length ; i++) {%> 
                                      <a class="del-btn t-del-btn">
                                          <button type="button" class="close" data-dismiss="alert" onclick="moveCoachList(<% this[i].id %>)">
                                              <span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                                          <input type="hidden" name="coach" value="<% this[i].id %>" /><% this[i].fistName %> <% this[i].lastName %>
                                      </a>
                                <%}%>
                            </script>
                            <div style="max-height: 162px; overflow-y: scroll" id="divCoachSelect">
                                @if (SelectedCoaches != null)
                                {
                                    foreach (CoachListModel item in SelectedCoaches)
                                    {
                                    <a class="del-btn t-del-btn">
                                        <button type="button" class="close" data-dismiss="alert" onclick="moveCoachList('@(item.UserId)')">
                                            <span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                                        <input type="hidden" name="coach" value="@(item.UserId)" 
                                                firstname="@(item.FirstName)" lastname="@(item.LastName)" />@(item.FirstName) @(item.LastName)
                                    </a>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                PM Feedback
                                    (<span class="redtext">@ViewTextHelper.Vcw_UploadTitle</span>)
                                    <span class="control-label-text-r">@ViewTextHelper.Vcw_UploadLimit</span>
                            </div>
                        </div>
                        <div class="upload-btn">
                            <div id="picker_feedback">1) Select File</div>
                        </div>
                        <div id="filelists_feedback" class="uploader-list"></div>
                        <div class="upload-btn">
                            <a id="ctlBtn_feedback">2) Start Upload</a>
                        </div>
                        <input type="hidden" id="filetarget_feedback" name="filetarget_feedback" />
                    </div>
                </div>
            </div>
            <input type="hidden" name="uploadfile_feedback" id="uploadfile_feedback" />
            <input type="hidden" name="uploadfile" id="uploadfile" />
            <div class="button-content">
                <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" id="btnSubmit" onclick="return beforeSubmit(this)">
                @if (isSummary)
                {
                    <a class="mainbutton modal-btn cancel-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
                Url.Action("TeacherFiles", "Summary"))" >Cancel</a>
                }
                else
                {
                    <a class="mainbutton modal-btn cancel-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
                Url.Action("Index"))" >Cancel</a>
                }
            </div>
        </div>
    </div>
}