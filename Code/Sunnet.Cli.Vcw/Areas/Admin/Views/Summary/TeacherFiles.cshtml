@model Sunnet.Cli.Business.Vcw.Models.FileListModel
@using Sunnet.Cli.Core.Vcw.Enums
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Cli.Vcw.Models
@{
    ViewBag.Title = "Admin Summary";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}
@section LeftMenu
{
    @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Admin_Summary)
}
@section BreadPath
{
    @(Html.ActionLink("Summary", "Index", "Summary"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
    Teacher Files
}
<form class="form-horizontal">
    <div class="form-group"></div>
    <ul class="nav-container" role="tablist">
        <li><a href="@(Url.Action("Index", "Summary"))">Coach Files</a></li>
        <li class="active"><a href="@(Url.Action("TeacherFiles", "Summary"))">Teacher Files</a></li>
    </ul>
    <div class="form-group"></div>
    <div class="form-group">
        @Html.Label("txtCommunity", "Community Name", new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.TextBox("txtCommunity", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_for = "#CommunityId",
           data_remote = Url.Action("GetCommunity", "STGSend", new { Area = "STGReport" }),
           data_text = "Name",
           data_value = "ID",
           id = "txtCommunity",
           placeholder = "Enter key text to search",
           @for = "CommunityId",
           data_bind = "value: searchCriteria.communityName"
       })
            @Html.Hidden("CommunityId", "", new
       {
           data_bind = "value: searchCriteria.community",
       })
        </div>

        @Html.Label("SchoolName", "School", new { @class = "control-label col-sm-2" })

        <div class="col-sm-3">
            @Html.TextBox("SchoolName", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_remote = Url.Action("GetSchool", "STGSend", new { Area = "STGReport" }),
           data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",
           data_text = "Name",
           data_value = "ID",
           placeholder = "Enter key text to search",
           id = "SchoolName",
           data_bind = "value: searchCriteria.schoolName",
           data_extraParams = "{\"communityId\":\"#CommunityId\"}",
           data_for = "#SchoolId",
           @for = "SchoolId"
       })
            @Html.Hidden("SchoolId", "", new
       {
           data_bind = "value: searchCriteria.school",
       })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("TeacherName", "Teacher", new { @class = "control-label col-sm-2" })

        <div class="col-sm-3">
            @Html.TextBox("TeacherName", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_remote = Url.Action("GetTeacher", "STGSend", new { Area = "STGReport" }),
           data_text = "Name",
           data_value = "ID",
           placeholder = "Enter key text to search",
           id = "TeacherName",
           data_bind = "value: searchCriteria.teacherName",
           data_extraParams = "{\"communityId\":\"#CommunityId\",\"schoolId\":\"#SchoolId\"}",
           data_for = "#TeacherId",
           @for = "TeacherId"
       })
            @Html.HiddenFor(model => model.TeacherId, new
       {
           data_bind = "value: searchCriteria.teacher",
       })
        </div>
        <label class="control-label col-sm-2" for="UploadedBy">Uploaded By</label>
        <div class="col-sm-3">
            @Html.DropDownList("UploadedBy", ViewBag.UploadedBy as IEnumerable<SelectListItem>, new { @class = "form-control", data_bind = "value: searchCriteria.uploadby" })
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-sm-2" for="VideoType">Video Type</label>
        <div class="col-sm-3">
            @Html.DropDownList("VideoType", ViewBag.VideoTypeOptions as IEnumerable<SelectListItem>, new { @class = "form-control", data_bind = "value: searchCriteria.videotype" })
        </div>
        <label class="control-label col-sm-2" for="Number">ID</label>
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.Number, new { @class = "form-control", data_bind = "value: searchCriteria.number" })
        </div>
        <div class="col-sm-2">
            <button class="mainbutton mainright-btn sreach-btn" type="button" id="btn_search" data-bind="event: { click: search }">Search</button>
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-10">
            <input type="button" class="mainbutton mainright-btn pencil-btn" value="Delete Selected" onclick="return deletedata()">
        </div>
        <div class="col-sm-2">
            <label for="selectExportTo" class="hide">Export To</label>
            <select class="form-control" id="selectExportTo" onchange="exportTo(this);">
                <option selected="selected" value="-1">Export to</option>
                <option value="1">Excel</option>
                <option value="2">PDF</option>
            </select>
        </div>
    </div>
</form>
<div class="main-content">
    <div class="content-title">File</div>
    <div class="content-body-tab">
        <table class="table table-striped table-hover">
            <thead>
                <tr data-bind="foreach: { data: headers, as: 'header' }">
                    <!-- ko if: (header.order === true)-->
                    <th data-bind="style: { width: width }">
                        <a href="javascript:;" data-bind="text: text, click: $root.changeOrder"></a>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                    </th>
                    <!-- /ko-->
                    <!-- ko if: (header.order === false) -->
                    <th data-bind="text: text, style: { width: width }"></th>
                    <!-- /ko-->
                </tr>
            </thead>
            <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                <tr>
                    <td>
                        <label>
                            <span class="hide" data-bind="text: item.ID "></span>
                            <input name="video_select" type="checkbox" data-bind="value: item.ID" />
                        </label>
                    </td>
                    <td data-bind="text: item.CommunityName"></td>
                    <td data-bind="text: item.SchoolName"></td>
                    <td data-bind="text: item.TeacherName"></td>
                    <td data-bind="text: item.IdentifyFileName"></td>
                    <td data-bind="text: item.Number"></td>
                    <td data-bind="text: item.Context"></td>
                    <td data-bind="text: item.Content"></td>
                    <td data-bind="text: item.Status.text"></td>
                    <td data-bind="text: item.DateRecorded == minDate ? '' : item.DateRecorded"></td>
                    <td data-bind="text: item.AssignmentDueDate == minDate ? '' : item.AssignmentDueDate"></td>
                    <td data-bind="text: item.FileExtension"></td>
                    <td>
                        <!-- ko if: (item.VideoType.value == 1) -->
                        <a class="table-btn icon-folder-open view-btn" data-bind="event: { click: $root.viewDataVIP }" href="#" title="View"></a>
                        <!-- /ko-->
                        <!-- ko if: (item.VideoType.value == 2) -->
                        <a class="table-btn icon-folder-open view-btn" data-bind="event: { click: $root.viewDataGeneral }" href="#" title="View"></a>
                        <!-- /ko-->
                        <!-- ko if: (item.VideoType.value == 3) -->
                        <a class="table-btn icon-folder-open view-btn" data-bind="event: { click: $root.viewDataAssignment }" href="#" title="View"></a>
                        <!-- /ko-->
                    </td>
                </tr>
            </tbody>@Html.Display("e", "NoData", new { Colspan = 100 })
        </table>
        @Html.Partial("_Partial_Pager")
    </div>
</div>
@section Scripts
{
    <script type="text/javascript">
        var list_Video = {};

        $(function () {

            $("#btn_search").click(function () {
                $("#CommunityId").data("LastValue", $("#CommunityId").val());
                $("#SchoolId").data("LastValue", $("#SchoolId").val());
                $("#TeacherId").data("LastValue", $("#TeacherId").val());
                $("#UploadedBy").data("LastValue", $("#UploadedBy").val());
                $("#VideoType").data("LastValue", $("#VideoType").val());
                $("#Number").data("LastValue", $("#Number").val());
            })


            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    list_Video.search();
                }
            })

            list_Video = new ViewModel(
                {
                    instanceName: "list_Video",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("SearchTeacherFile")))',
                    orderBy: "ID",
                    orderDirection: "DESC",
                    pageSize: 10,
                    headers: [
                        {
                            text: "@Html.DisplayName("Select")",
                            field: "@Html.NameFor(model => model.ID)",
                            width: '2%'
                        },
                        {
                            text: "@Html.DisplayName("Community")",
                            width: "12%"
                        },
                        {
                            text: "@Html.DisplayName("School")",
                            width: "11%"
                        },
                        {
                            text: '@Html.DisplayName("Teacher")',
                            field: "@Html.NameFor(model => model.TeacherId)",
                            order: true,
                            width: "11%"
                        }, {
                            text: "@Html.DisplayName("File Name")",
                            field: "@Html.NameFor(model => model.IdentifyFileName)",
                            order: true,
                            width: '14%'
                        },
                        {
                            text: "@Html.DisplayName("ID")",
                            field: "@Html.NameFor(model => model.ID)",
                            order: true,
                            width: '6%'
                        },
                        {
                            text: '@Html.DisplayName("Context")',
                            field: "@Html.NameFor(model => model.Context)",
                            width: '*'
                        },
                        {
                            text: '@Html.DisplayName("Content")',
                            field: "@Html.NameFor(model => model.Content)",
                            width: '10%'
                        },
                        {
                            text: '@Html.DisplayName("Status")',
                            field: "@Html.NameFor(model => model.Status)",
                            order: true,
                            width: '8%'
                        },
                        {
                            text: '@Html.DisplayName("Recorded")',
                            field: "@Html.NameFor(model => model.DateRecorded)",
                            order: true,
                            width: '12%'
                        },
                        {
                            text: '@Html.DisplayName("Due")',
                            field: "@Html.NameFor(model => model.AssignmentDueDate)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: '@Html.DisplayName("Type")',
                            field: "@Html.NameFor(model => model.FileExtension)",
                            width: '5%'
                        },
                        { text: "Action", width: '2%' }
                    ],
                    searchCriteria: {
                        community: ko.observable(window.queryString("community", -1)),
                        communityName: ko.observable(window.queryString("communityName", "")),
                        school: ko.observable(window.queryString("school", -1)),
                        schoolName: ko.observable(window.queryString("schoolName", "")),
                        teacher: ko.observable(window.queryString("teacher", -1)),
                        teacherName: ko.observable(window.queryString("teacherName", "")),
                        uploadby: ko.observable(window.queryString("uploadby", -1)),
                        videotype: ko.observable(window.queryString("videotype", -1)),
                        number: ko.observable(window.queryString("number"))
                    }
                }
                ,
                {
                    viewDataVIP: function (data) {
                        location.href = "@Html.Raw(Url.Action("ViewFile", "TeacherVIP"))" + "?id=" + data.ID + "&redirect=Summary&returnurl=" + list_Video.getLocation();
                    },
                    viewDataGeneral: function (data) {
                        location.href = "@Html.Raw(Url.Action("View", "TeacherGeneral"))" + "?id=" + data.ID + "&redirect=Summary&returnurl=" + list_Video.getLocation();
                    },
                    viewDataAssignment: function (data) {
                        location.href = "@Html.Raw(Url.Action("ViewFile", "TeacherAssignment"))" + "?id=" + data.ID + "&redirect=Summary&returnurl=" + list_Video.getLocation();
                    }
                }
            );

            list_Video.search();
            ko.applyBindings(list_Video);
        });

                function exportTo(o) {
                    o = $(o);
                    if (o.val() > 0) {
                        var message_excel = window.getErrorMessage("VCW_ExportToExcelConfirm");
                        var message_pdf = window.getErrorMessage("VCW_ExportToPdfConfirm");
                        if (o.val() == "1") {
                            jQuery.when(waitingConfirm("<p style='text-align:center'> " + message_excel + " </p>", " Yes ", " No ")).done(function () {
                                Export("/Admin/Summary/ExportExcel_TeacherFiles");
                            }).fail(function () {

                            });
                        }
                        if (o.val() == "2") {
                            jQuery.when(waitingConfirm("<p style='text-align:center'> " + message_pdf + " </p>", " Yes ", " No ")).done(function () {
                                Export("/Admin/Summary/ExportPdf_TeacherFiles");
                            }).fail(function () {

                            });
                        }
                    }
                }


                function Export(method) {
                    var form = $("<form>");
                    form.attr("style", "display:none");
                    form.attr("target", "");
                    form.attr("method", "post");
                    form.attr("action", method);

                    var input_community = $("<input>");
                    input_community.attr("type", "hidden");
                    input_community.attr("name", "community");
                    if ($("#CommunityId").data("LastValue") == undefined) {
                        input_community.attr("value", "-1");
                    }
                    else {
                        input_community.attr("value", $("#CommunityId").data("LastValue"));
                    }
                    form.append(input_community);

                    var input_school = $("<input>");
                    input_school.attr("type", "hidden");
                    input_school.attr("name", "school");
                    if ($("#SchoolId").data("LastValue") == undefined) {
                        input_school.attr("value", "-1");
                    }
                    else {
                        input_school.attr("value", $("#SchoolId").data("LastValue"));
                    }
                    form.append(input_school);

                    var input_teacher = $("<input>");
                    input_teacher.attr("type", "hidden");
                    input_teacher.attr("name", "teacher");
                    if ($("#TeacherId").data("LastValue") == undefined) {
                        input_teacher.attr("value", "-1");
                    }
                    else {
                        input_teacher.attr("value", $("#TeacherId").data("LastValue"));
                    }
                    form.append(input_teacher);

                    var input_uploadby = $("<input>");
                    input_uploadby.attr("type", "hidden");
                    input_uploadby.attr("name", "uploadby");
                    if ($("#UploadedBy").data("LastValue") == undefined) {
                        input_uploadby.attr("value", $("#UploadedBy").children("option:first").val());
                    }
                    else {
                        input_uploadby.attr("value", $("#UploadedBy").data("LastValue"));
                    }
                    form.append(input_uploadby);

                    var input_videotype = $("<input>");
                    input_videotype.attr("type", "hidden");
                    input_videotype.attr("name", "videotype");
                    if ($("#VideoType").data("LastValue") == undefined) {
                        input_videotype.attr("value", $("#VideoType").children("option:first").val());
                    }
                    else {
                        input_videotype.attr("value", $("#VideoType").data("LastValue"));
                    }
                    form.append(input_videotype);

                    var input_number = $("<input>");
                    input_number.attr("type", "hidden");
                    input_number.attr("name", "number");
                    if ($("#Number").data("LastValue") == undefined) {
                        input_number.attr("value", "");
                    }
                    else {
                        input_number.attr("value", $("#Number").data("LastValue"));
                    }
                    form.append(input_number);

                    $("body").append(form);
                    form.submit().remove();
                    setTimeout(function () { window.loading(false) }, 2000);
                }

                function deletedata() {
                    var video_select = [];
                    $("input[name=video_select]:checked").each(function () {
                        video_select.push(this.value);
                    });
                    if (video_select.length == 0) {
                        showMessage("hint", "Vcw_Videos_Noselect")
                        return false;
                    }
                    else {
                        var message = window.getErrorMessage("confirmToDelete");
                        message = message.replace("[{0}]", "the selected files");
                        $.when(waitingConfirm(message, "Delete", "Cancel")).done(function () {
                            $.post("/Admin/Summary/Delete", { "video_select": video_select }, function () { list_Video.search(); });
                        })
                    }
                    return false;
                }
    </script>
}

