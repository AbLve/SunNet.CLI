@model Sunnet.Cli.Business.Vcw.Models.CoachFileModel
@using Sunnet.Cli.Core.Vcw.Enums
@using Sunnet.Framework.Extensions
@using Sunnet.Framework
@using Sunnet.Cli.UIBase
@{
    List<SelectItemModel> Languages = ViewBag.Languages as List<SelectItemModel>;
    List<SelectItemModel> Contents = ViewBag.Contents as List<SelectItemModel>;
    List<SelectItemModel> Contexts = ViewBag.Contexts as List<SelectItemModel>;
    List<SelectItemModel> Strategies = ViewBag.Strategies as List<SelectItemModel>;
}

<div class="form-group">
    <div class="col-sm-6">
        <div class="form-group">
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                    </div>
                    <div class="inputtext-con">
                        @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IdentifyFileName)
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        <label class="control-label" for="DateRecorded">Date Video Recorded</label>
                    </div>
                    <div class="textarea-con">
                        @Html.TextBoxFor(m => m.DateRecorded, new { @class = "form-control date", @Value = Model.DateRecorded.Value.FormatDateString() })
                        @Html.ValidationMessageFor(m => m.DateRecorded)
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        <div class="control-label">Video language</div>
                    </div>
                    @if (Languages != null)
                    {
                        foreach (SelectItemModel item in Languages)
                        {
                        <div class="checkbox-con">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="language" value="@item.ID"
                                                @(Model.LanguageId == item.ID ? "checked" : "")>@item.Name
                            </label>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        <div class="control-label">Video Context</div>
                    </div>
                    @if (Contexts != null)
                    {
                        foreach (SelectItemModel item in Contexts)
                        {
                            bool isChecked = Model.ContextId == item.ID;
                            if (item.Name.Trim().ToLower() == SFConfig.ContextOther)
                            {
                        <div class="checkbox-con">
                            <label class="checkbox-inline checkbox-other">
                                <input type="checkbox" name="Context" value="@(item.ID)"  @(isChecked ? "checked" : "") isOther="true"/>@item.Name
                            </label>
                            <label class="textbox-other">
                                @if (isChecked)
                                {
                                    @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control", disabled = "disabled" })  
                                }
                            </label>
                            @Html.ValidationMessageFor(model => model.ContextOther)
                        </div>
                            }
                            else
                            {
                        <div class="checkbox-con">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="Context" value="@(item.ID)" @(isChecked ? "checked" : "")/>@item.Name
                            </label>
                        </div>
                            }

                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <video controls="controls" class="videoplay">
            <source src="@(FileHelper.GetPreviewPathofUploadFile(Model.FilePath).Replace("\\", "/"))" />
        </video>
    </div>
</div>

<div class="form-group">
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Video Content</div>
            </div>
            @if (Contents != null)
            {
                foreach (SelectItemModel item in Contents)
                {
                    bool isChecked = Model.ContentIds.Contains(item.ID);
                    if (item.Name.Trim().ToLower() == SFConfig.VideoContentOther)
                    {
                <div class="checkbox-con  checkbox-con-double">
                    <label class="checkbox-inline checkbox-other">
                        <input type="checkbox" name="Content" onclick="ContentClick(this)" 
                                                    value="@item.ID" @(isChecked ? "checked" : "")>@item.Name
                    </label>
                    <label class="textbox-other">
                        @if (isChecked)
                        {
                            @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control", @disabled = "disabled" })   
                        }
                    </label>
                    @Html.ValidationMessageFor(model => model.ContentOther)
                </div>
                    }
                    else
                    {
                <div class="checkbox-con  checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Content"  
                                                    value="@item.ID" @(isChecked ? "checked" : "") >
                        @item.Name
                    </label>
                </div>
                    }
                }
            }
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Coaching Strategies</div>
            </div>
            @if (Strategies != null)
            {
                foreach (SelectItemModel item in Strategies)
                {
                    bool isChecked = Model.StrategyIds.Contains(item.ID);
                    if (item.Name.Trim().ToLower() == SFConfig.StrategyOther)
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline checkbox-other">
                        <input type="checkbox" name="Strategy" onclick="StrategyClick(this)" 
                                                    value="@item.ID" @(isChecked ? "checked" : "")>@item.Name
                    </label>
                    <label class="textbox-other">
                        @if (isChecked)
                        {
                            @Html.TextBoxFor(model => model.StrategyOther, new { @class = "form-control form-control-double" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.StrategyOther, new
                                   {
                                       @class = "form-control form-control-double",
                                       @disabled = "disabled"
                                   }) 
                        }
                    </label>
                    @Html.ValidationMessageFor(model => model.StrategyOther)
                </div>
                    }
                    else
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Strategy"  
                                                    value="@item.ID" @(isChecked ? "checked" : "") >
                        @item.Name
                    </label>
                </div>
                    }
                }
            }
        </div>
    </div>

</div>

<div class="form-group">
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">
                    Coaching Objectives
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                </div>
                <label class="hide" for="Objectives">&nbsp;</label>
            </div>
            <div class="textarea-con">
                @Html.TextAreaFor(m => m.Objectives, new { @class = "form-control", row = "2" })
                @Html.ValidationMessageFor(m => m.Objectives)
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">
                    Coaching Effectiveness
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                </div>
                <label class="hide" for="Effectiveness">&nbsp;</label>
            </div>
            <div class="textarea-con">
                @Html.TextAreaFor(m => m.Effectiveness, new { @class = "form-control", row = "2" })
                @Html.ValidationMessageFor(m => m.Effectiveness)
            </div>
        </div>
    </div>
</div>
@Html.Partial("/Areas/Coach/Views/Partials/UploadedFile.cshtml")