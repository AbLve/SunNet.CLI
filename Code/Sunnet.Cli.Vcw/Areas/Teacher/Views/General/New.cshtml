@model Sunnet.Cli.Business.Vcw.Models.TeacherGeneralFileModel
@using Sunnet.Cli.UIBase.Models
@using System.Web.Optimization;
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Framework
@{
    ViewBag.Title = "Upload General File";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    List<SelectItemModel> Contents = ViewBag.Contents as List<SelectItemModel>;
    List<SelectItemModel> Contexts = ViewBag.Contexts as List<SelectItemModel>;
}

@section LeftMenu
{
    @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Teacher_General)
}

@section BreadPath
    {
    @(Html.ActionLink("My General Files", "Index", "General"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        Upload File
    }

@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload")
    <script type="text/javascript">
        $(function () {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    redirectBack("/Teacher/General/");
                }
            });
        });

        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }
    </script>
}

@using (Ajax.BeginForm("New", "General", null, PostFormHelper.DefaultAjaxOptions, new
{
    @class = "form-horizontal",
    id = formId
}))
{
    @Html.AntiForgeryToken()
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
        Url.Action("Index", "General"))" >Back to General</a>
    </div>
    <div class="main-content">
        <div class="content-title">Upload General File</div>
        <div class="content-body">
            <form class="form-horizontal">
                <div class="form-group">
                    <div class="col-sm-4">
                        <div class="content-con">
                            <div class="content-title3">
                                @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                            </div>
                            <div class="inputtext-con">
                                @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.IdentifyFileName)
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="content-con">
                            <div class="content-title3">
                                <label class="control-label" for="DateVieoRecorded">Date Video Recorded</label>
                            </div>
                            <div class="inputtext-con">
                                @Html.TextBoxFor(model => model.DateVieoRecorded, new { @class = "form-control date" })
                                @Html.ValidationMessageFor(model => model.DateVieoRecorded)
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label required">
                                    Upload File 
                                    (<span class="redtext">@ViewTextHelper.Vcw_UploadTitle</span>)
                                    <span class="control-label-text-r">@ViewTextHelper.Vcw_UploadLimit</span>
                                </div>
                            </div>
                            <div class="upload-btn">
                                <div id="picker">1) Select File</div>
                            </div>
                            <div id="filelists" class="uploader-list"></div>
                            <div class="upload-btn">
                                <a id="ctlBtn">2) Start Upload</a>
                            </div>
                            <input type="hidden" id="filetarget" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-4">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label">Video Context</div>
                            </div>
                            @if (Contexts != null)
                            {
                                foreach (SelectItemModel item in Contexts)
                                {
                                    if (item.Name.Trim().ToLower() == SFConfig.ContextOther)
                                    {
                                <div class="checkbox-con">
                                    <label class="checkbox-inline checkbox-other">
                                        <input type="checkbox" name="Context"  value="@(item.ID)" isOther="true"/>@item.Name
                                    </label>
                                    <label class="textbox-other">
                                        @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control", disabled = "disabled" })
                                    </label>
                                    @Html.ValidationMessageFor(model => model.ContextOther)
                                </div>
                                    }
                                    else
                                    {
                                <div class="checkbox-con">
                                    <label class="checkbox-inline">
                                        <input type="checkbox" name="Context" value="@(item.ID)" />@item.Name
                                    </label>
                                </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label">Video Content</div>
                            </div>
                            @if (Contents != null)
                            {
                                foreach (SelectItemModel item in Contents)
                                {
                                    if (item.Name.Trim().ToLower() == SFConfig.VideoContentOther)
                                    {
                                <div class="checkbox-con">
                                    <label class="checkbox-inline checkbox-other">
                                        <input type="checkbox" name="Content" 
                                                    onclick="ContentClick(this)" value="@item.ID">@item.Name
                                    </label>
                                    <label class="textbox-other">
                                        @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control", @disabled = "disabled" })
                                    </label>
                                    @Html.ValidationMessageFor(model => model.ContentOther)
                                </div>
                                    }
                                    else
                                    {
                                <div class="checkbox-con">
                                    <label class="checkbox-inline">
                                        <input type="checkbox" name="Content" value="@item.ID">@item.Name
                                    </label>
                                </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label">
                                    Description
                                    <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                                </div>
                            </div>
                            <div class="textarea-con">
                                <label for="Description" class="hide">&nbsp;</label>
                                @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = "3" })
                                @Html.ValidationMessageFor(m => m.Description)
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <input type="hidden" name="uploadfiles" id="uploadfiles" />
        <div class="button-content">
            <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" id="btnSubmit" onclick="return beforeSubmit_new(this);">
            <button class="mainbutton modal-btn cancel-btn" type="button" onclick='redirectBack("index")'>Cancel</button>
        </div>
    </div>  
}


