GO
/****** Object:  StoredProcedure [dbo].[InitMeasures]    Script Date: 2016.4.15 18:02:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Jack
-- Create date: 2014-10-29
-- Description:	Init StudentAssessment, StudentMeasures, StudentItems 
-- =============================================
ALTER PROCEDURE [dbo].[InitMeasures]
	-- Add the parameters for the stored procedure here
	@UserId int,
	@AssessmentId int,
	@SchoolYear varchar(10),
	@StudentId int,
	@StudentBirthday datetime,
	@Wave tinyint,
	@MeasureIds varchar(max),
	@StudentAssessmentId int out
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SET @StudentAssessmentId = 0;


	BEGIN TRY
	  BEGIN TRANSACTION;

		IF(NOT EXISTS(SELECT 1 FROM [dbo].[StudentAssessments] WHERE AssessmentId = @AssessmentId AND StudentId = @StudentId AND Wave = @Wave AND SchoolYear = @SchoolYear))
		BEGIN 
			INSERT INTO [dbo].[StudentAssessments]([StudentId],[AssessmentId],[Status],[SchoolYear],[Wave],[CreatedBy],[UpdatedBy],[CreatedOn],[UpdatedOn],[TotalGoal])
			VALUES(@StudentId,@AssessmentId,1,@SchoolYear ,@Wave,@UserId,@UserId,GETDATE(),GETDATE(),0);
		END
		 
		SET @StudentAssessmentId = (SELECT TOP 1 ID FROM  [dbo].[StudentAssessments] 
		WHERE AssessmentId = @AssessmentId AND StudentId = @StudentId AND Wave = @Wave AND SchoolYear = @SchoolYear);
		 
		CREATE  table #Measures(ID int);
		declare @sql varchar (2000)
		set @sql='insert #Measures select '+replace(@MeasureIds,',',' union all select ')
		exec (@sql)
		
		INSERT INTO #Measures 
		SELECT ParentId FROM Measures WHERE ID IN (SELECT ID FROM #Measures)

		------SELECT * FROM #Measures;
		DELETE FROM #Measures WHERE EXISTS (SELECT 1 FROM StudentMeasures SM WHERE SM.SAId = @StudentAssessmentId AND SM.MeasureId = #Measures.ID )
		------SELECT * FROM #Measures;
		
		SELECT * INTO #HasCutoffScore FROM (
		SELECT StudentId = @StudentId,AssessmentId = @AssessmentId,[Status] = 1,[SchoolYear]=@SchoolYear,Wave=@Wave, 
		MeasureId = M.ID, M.TotalScored,M.TotalScore,
		COS.FromYear,COS.FromMonth,COS.ToYear,COS.ToMonth,
		[EndDate] = DATEADD(m, 0-COS.FromMonth, DATEADD(YY,0-COS.FromYear,CAST('20'+ SUBSTRING(@SchoolYear,1,2)+'-9-1' AS DATETIME))),
		[StartDate] = DATEADD(m, 0-COS.ToMonth, DATEADD(YY,0-COS.ToYear,CAST('20'+ SUBSTRING(@SchoolYear,1,2)+'-9-1' AS DATETIME))), [COS].CutOffScore 
		FROM Measures M  INNER JOIN #Measures ON M.ID = #Measures.ID AND M.ID > 1
		LEFT JOIN CutOffScores [COS] ON M.ID = [COS].HostId AND [COS].HostType='Sunnet.Cli.Core.Ade.Entities.MeasureEntity' AND [COS].Wave = @Wave
		) HasCutoffScore
		
		--SELECT * FROM #HasCutoffScore;

		SELECT DISTINCT MeasureId INTO #FoundBenchmark FROM #HasCutoffScore
		WHERE  [EndDate] >= @StudentBirthday AND @StudentBirthday > [StartDate]

		--SELECT * FROM #FoundBenchmark

		INSERT INTO StudentMeasures 
		SELECT DISTINCT SAId = @StudentAssessmentId,MeasureId,[Status] = 1, PauseTime = 0,CreatedOn=GETDATE(),UpdatedOn = GETDATE(),TotalScore = ISNULL(TotalScore,0),
		Benchmark = CutOffScore,Goal = -1,TotalScored,Comment = '',BenchmarkChanged = 0  
		FROM #HasCutoffScore HCS
		WHERE  HCS.MeasureId IN (SELECT MeasureId  FROM #FoundBenchmark) 
		AND [EndDate] >= @StudentBirthday AND @StudentBirthday > [StartDate]
		AND NOT EXISTS (SELECT 1 FROM StudentMeasures ALLRECORDS WHERE 
						ALLRECORDS.SAId = @StudentAssessmentId AND ALLRECORDS.MeasureId = HCS.MeasureId)
		SELECT  MeasureId INTO #Added 
		FROM #FoundBenchmark

		INSERT INTO StudentMeasures 
		SELECT DISTINCT SAId = @StudentAssessmentId,MeasureId,[Status] = 1, PauseTime = 0,CreatedOn=GETDATE(),UpdatedOn = GETDATE(),TotalScore = ISNULL(TotalScore,0),
		Benchmark = -1,Goal = -1,TotalScored,Comment = '',BenchmarkChanged = 0
		FROM #HasCutoffScore HCS
		WHERE   HCS.MeasureId NOT IN (SELECT MeasureId FROM #Added) 
		AND NOT EXISTS (SELECT 1 FROM StudentMeasures ALLRECORDS WHERE 
						ALLRECORDS.SAId = @StudentAssessmentId AND ALLRECORDS.MeasureId = HCS.MeasureId)
	
		INSERT INTO #Added
		SELECT DISTINCT  MeasureId FROM #HasCutoffScore
		WHERE  MeasureId NOT IN (SELECT MeasureId FROM #Added)
		 
		-----select * from #Added
		INSERT INTO StudentItems
		SELECT DISTINCT SMId = SM.ID,ItemId = IB.ID,[Status] = 1, [IsCorrect]= 0,SelectedAnswers='',PauseTime=0,CreatedOn = GETDATE(),UpdatedOn=GETDATE(),
		Goal = 0,[Scored]  = IB.Scored,IB.Score,Details = ''
		FROM ItemBases IB INNER JOIN #Added M ON IB.MeasureId = M.MeasureId 
		INNER JOIN 
		--LEFT JOIN
		StudentMeasures SM ON M.MeasureId = SM.MeasureId AND SM.SAId = @StudentAssessmentId 
		WHERE IB.[Status] = 1 AND IB.[IsDeleted] = 0 
		AND NOT EXISTS (SELECT 1 FROM StudentItems ALLRECORDS WHERE 
						ALLRECORDS.SMId = SM.ID AND ALLRECORDS.ItemId = IB.ID)
		DROP TABLE #Measures;
		DROP TABLE #Added;
		DROP TABLE #HasCutoffScore;
		DROP TABLE #FoundBenchmark;

	  COMMIT TRANSACTION ;
	END TRY

	BEGIN CATCH
		print N'error occured.'
		IF (XACT_STATE()) = -1
		BEGIN
			
			ROLLBACK TRANSACTION;
		END;

		IF (XACT_STATE()) = 1
		BEGIN
			COMMIT TRANSACTION;   
		END;
	END CATCH 

	IF(@StudentAssessmentId <1 )
	BEGIN
	SET @StudentAssessmentId = (SELECT TOP 1 ID FROM  [dbo].[StudentAssessments] 
		WHERE AssessmentId = @AssessmentId AND StudentId = @StudentId AND Wave = @Wave AND SchoolYear = @SchoolYear);
	END
END




