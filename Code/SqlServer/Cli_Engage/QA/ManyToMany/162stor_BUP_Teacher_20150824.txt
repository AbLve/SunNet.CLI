ALTER PROCEDURE [dbo].[BUP_Teacher]
	@BUPTeacherID int,
	@CreatedBy int
AS
BEGIN
	  SET XACT_ABORT ON;

	  DECLARE @Action tinyint
      DECLARE @CommunityName varchar(200)
      DECLARE @CommunityEngageID varchar(50)
      DECLARE @SchoolName varchar(200)
      DECLARE @SchoolEngageID varchar(50)
      DECLARE @FirstName varchar(140)
      DECLARE @MiddleName varchar(140)
      DECLARE @LastName varchar(140)
      DECLARE @TeacherEngageID varchar(50)
      DECLARE @TeacherInternalId varchar(50)
      DECLARE @PrimaryPhoneNumber varchar(50)
      DECLARE @PrimaryNumberType tinyint
      DECLARE @PrimaryEmailAddress varchar(50)
      DECLARE @SecondaryEmailAddress varchar(50)
      DECLARE @ClassName varchar(150)
      DECLARE @ClassEngageID varchar(32)
      DECLARE @ClassroomName varchar(50)
      DECLARE @ClassroomEngageID varchar(32)
	
	  DECLARE @SchoolId INT
	  DECLARE @CommunityId INT
	  DECLARE @TeacherId INT --teachers 表Id
	  DECLARE @UserId INT --users 表Id
	  DECLARE @ClassId INT -- classes 表id

	BEGIN TRY
	  BEGIN TRANSACTION;
		 SELECT   @Action=[Action],@CommunityName=[CommunityName],@CommunityEngageID=[CommunityEngageID],@SchoolName=[SchoolName],@SchoolEngageID=[SchoolEngageID]
		  ,@FirstName=[FirstName],@MiddleName=[MiddleName],@LastName=[LastName],@TeacherEngageID=[TeacherEngageID],@TeacherInternalId=[TeacherInternalId]
		  ,@PrimaryPhoneNumber=[PrimaryPhoneNumber],@PrimaryNumberType=[PrimaryNumberType],@PrimaryEmailAddress=[PrimaryEmailAddress]
		  ,@SecondaryEmailAddress=[SecondaryEmailAddress],@ClassName=[ClassName],@ClassEngageID=[ClassEngageID],@ClassroomName=[ClassroomName]
		  ,@ClassroomEngageID=[ClassroomEngageID]
		 FROM [dbo].[BUP_Teachers] WHERE ID = @BUPTeacherID

		 IF(@TeacherEngageID != '')
			SELECT @TeacherId=ID, @UserId = UserId FROM Teachers WHERE TeacherId=@TeacherEngageID

		--INSERT
		IF(@Action = 1) BEGIN
			SELECT @SchoolId = ID FROM Schools WHERE SchoolId =@SchoolEngageID
			IF(@SchoolId IS NULL)
				UPDATE [BUP_Teachers] SET Status=5 , Remark ='School Engage ID is not in Schools' WHERE ID = @BUPTeacherID
			ELSE BEGIN
				SELECT @CommunityId =c.ID FROM Communities c
				INNER JOIN CommunitySchoolRelations r ON c.ID =r.CommunityId
				INNER JOIN Schools s ON s.ID = r.SchoolId
				WHERE s.ID=@SchoolId AND c.CommunityId=@CommunityEngageID
				IF(@CommunityId IS NULL) 
					UPDATE [BUP_Teachers] SET Status=5 , Remark ='Community Engage ID is not in Communities' WHERE ID = @BUPTeacherID
				ELSE BEGIN		
					IF(EXISTS (SELECT * FROM Users WHERE FirstName=@FirstName AND LastName=@LastName 
					AND PrimaryEmailAddress= @PrimaryEmailAddress AND Status=1 AND Role!=145))
						UPDATE 	BUP_Teachers SET Status=5 ,Remark ='One user has been existed with different role ' WHERE ID = @BUPTeacherID	
					ELSE
					BEGIN
						SELECT @UserId = ID FROM Users WHERE FirstName=@FirstName AND LastName=@LastName 
						AND PrimaryEmailAddress= @PrimaryEmailAddress AND Status=1 AND Role=145
						IF(@UserId IS NULL)		
						BEGIN
							INSERT INTO [dbo].[Users]
							([Role]
							,[GoogleId]
							,[FirstName]
							,[MiddleName]
							,[LastName]
							,[PreviousLastName]
							,[Status]
							,[StatusDate]
							,[PrimaryEmailAddress]
							,[SecondaryEmailAddress]
							,[PrimaryPhoneNumber]
							,[PrimaryNumberType]
							,[SecondaryPhoneNumber]
							,[SecondaryNumberType]
							,[FaxNumber]
							,[CreatedOn]
							,[UpdatedOn]
							,[IsDeleted]
							,[Sponsor]
							,[InvitationEmail]
							,[EmailExpireTime]
							,[Notes]
							,[gmail]
							,[IsSyncLms]
							,[InternalID])
							VALUES
							( 145--<Role, tinyint,>
							,''-- <GoogleId, varchar(50),>
							,@FirstName --, varchar(140),>
							,@MiddleName --, varchar(140),>
							,@LastName --, varchar(140),>
							,''--<PreviousLastName, varchar(140),>
							,1--<Status, tinyint,>
							,GETDATE() --<StatusDate, datetime,>
							,@PrimaryEmailAddress --, varchar(50),>
							,@SecondaryEmailAddress --, varchar(50),>
							,@PrimaryPhoneNumber --, varchar(50),>
							,@PrimaryNumberType --, tinyint,>
							,'' --, varchar(50),>
							,0--<SecondaryNumberType, tinyint,>
							,''--<FaxNumber, varchar(50),>
							,GETDATE()--<CreatedOn, datetime,>
							,GETDATE()--<UpdatedOn, datetime,>
							,0--<IsDeleted, bit,>
							,1--<Sponsor, int,>
							,1--<InvitationEmail, tinyint,>
							,'1753/1/1' --<EmailExpireTime, datetime,>
							,'' --<Notes, varchar(100),>
							,'' --<gmail, varchar(200),>
							,0 --<IsSyncLms, bit,>
							,@TeacherInternalId
							)

							SELECT @UserId = SCOPE_IDENTITY()

							INSERT INTO [dbo].[Teachers]
							([UserId]
							,[TeacherId]
							,[SchoolYear]
							,[BirthDate]
							,[Gender]
							,[HomeMailingAddress]
							,[HomeMailingAddress2]
							,[City]
							,[CountyId]
							,[StateId]
							,[Zip]
							,[Ethnicity]
							,[EthnicityOther]
							,[PrimaryLanguageId]
							,[PrimaryLanguageOther]
							,[SecondaryLanguageId]
							,[SecondaryLanguageOther]
							,[TotalTeachingYears]
							,[AgeGroupOther]
							,[CurrentAgeGroupTeachingYears]
							,[TeacherType]
							,[TeacherTypeOther]
							,[PDOther]
							,[EducationLevel]
							,[CoachId]
							,[CoachAssignmentWay]
							,[CoachAssignmentWayOther]
							,[ECIRCLEAssignmentWay]
							,[ECIRCLEAssignmentWayOther]
							,[YearsInProjectId]
							,[CoreAndSupplemental]
							,[CoreAndSupplemental2]
							,[CoreAndSupplemental3]
							,[CoreAndSupplemental4]
							,[VendorCode]
							,[CoachingHours]
							,[EmployedBy]
							,[CLIFundingId]
							,[MediaRelease]
							,[IsAssessmentEquipment]
							,[TeacherNotes]
							,[ReqCycles])
							VALUES
							(@UserId --<UserId, int,>
							,'' -- <TeacherId, varchar(50),>
							,dbo.GetSchoolYear() --<SchoolYear, varchar(10),>
							,'1753/1/1' --<BirthDate, datetime,>
							, 1 --<Gender, tinyint,>
							,''--<HomeMailingAddress, varchar(200),>
							,''--<HomeMailingAddress2, varchar(200),>
							,''--<City, varchar(200),>
							,0--<CountyId, int,>
							,0--<StateId, int,>
							,''--<Zip, varchar(5),>
							,0--<Ethnicity, tinyint,>
							,''--<EthnicityOther, varchar(100),>
							,0--<PrimaryLanguageId, int,>
							,''--<PrimaryLanguageOther, varchar(100),>
							,0--<SecondaryLanguageId, int,>
							,''--<SecondaryLanguageOther, varchar(100),>
							,0--<TotalTeachingYears, int,>
							,''--<AgeGroupOther, varchar(100),>
							,0--<CurrentAgeGroupTeachingYears, int,>
							,0--<TeacherType, tinyint,>
							,''--<TeacherTypeOther, varchar(100),>
							,''--<PDOther, varchar(100),>
							,0--<EducationLevel, tinyint,>
							,0--<CoachId, int,>
							,0--<CoachAssignmentWay, tinyint,>
							,''--<CoachAssignmentWayOther, varchar(100),>
							,0--<ECIRCLEAssignmentWay, tinyint,>
							,''--<ECIRCLEAssignmentWayOther, varchar(100),>
							,0--<YearsInProjectId, int,>
							,''--<CoreAndSupplemental, varchar(140),>
							,''--<CoreAndSupplemental2, varchar(140),>
							,''--<CoreAndSupplemental3, varchar(140),>
							,''--<CoreAndSupplemental4, varchar(140),>
							,0--<VendorCode, int,>
							,0--<CoachingHours, decimal(18,2),>
							,0--<EmployedBy, tinyint,>
							,0--<CLIFundingId, int,>
							,0--<MediaRelease, tinyint,>
							,0--<IsAssessmentEquipment, bit,>
							,''--<TeacherNotes, varchar(600),>
							,0--<ReqCycles, decimal(18,2),>
							)
							SELECT @TeacherId = SCOPE_IDENTITY()
						END

						IF(NOT EXISTS (SELECT * FROM UserComSchRelations 
						WHERE UserId=@UserId AND CommunityId=@CommunityId AND SchoolId=@SchoolId))
						BEGIN
							INSERT INTO UserComSchRelations(UserId,CommunityId,SchoolId,Status,CreatedBy,CreatedOn,UpdatedBy,UpdatedOn)
							VALUES(@UserId,@CommunityId,@SchoolId,1,@CreatedBy,GETDATE(),@CreatedBy,GETDATE())
						END

						IF(@ClassEngageID!='')
						BEGIN
							SELECT @ClassId=c.Id FROM Classes c 
							INNER JOIN CommunitySchoolRelations r ON c.SchoolId=r.SchoolId 
							INNER JOIN Communities cc on cc.ID = r.CommunityId
							WHERE c.SchoolId = @SchoolId AND cc.ID = @CommunityId AND c.ClassId=@ClassEngageID
							IF(@ClassId IS NULL)
							BEGIN
								UPDATE [BUP_Teachers] SET Status=5 , Remark ='Class Engage ID is not in Classes' WHERE ID = @BUPTeacherID
							END
							ELSE BEGIN
								IF(NOT EXISTS (SELECT * FROM TeacherClassRelations WHERE TeacherId=@TeacherId AND ClassId=@ClassId))
								BEGIN
									INSERT INTO TeacherClassRelations SELECT @TeacherId,@ClassId 
								END
							END	--END INSERT 
						END
					END	
			    END
			END
		END  --END ACTION=1

		--UPDATE
		IF(@Action = 2) BEGIN			
			IF(@TeacherId IS NULL)BEGIN
				UPDATE [BUP_Teachers] SET Status=5 , Remark ='Teacher Engage ID is not in Teachers' WHERE ID = @BUPTeacherID
			END
			ELSE BEGIN
				UPDATE [dbo].[Users] SET 
				 [FirstName] =  CASE WHEN @FirstName != '' THEN @FirstName ELSE FirstName END
				,[MiddleName] =  CASE WHEN @MiddleName='*CLEAR*' THEN '' WHEN @MiddleName != '' THEN @MiddleName ELSE MiddleName END
				,[LastName] =  CASE WHEN @LastName != '' THEN @LastName ELSE LastName END
				,[PrimaryEmailAddress] =  CASE WHEN @PrimaryEmailAddress != '' THEN @PrimaryEmailAddress ELSE PrimaryEmailAddress END
				,[SecondaryEmailAddress] = CASE WHEN @SecondaryEmailAddress='*CLEAR*' THEN '' WHEN @SecondaryEmailAddress != '' THEN @SecondaryEmailAddress ELSE SecondaryEmailAddress END
				,[PrimaryPhoneNumber] =  CASE WHEN @PrimaryPhoneNumber != '' THEN @PrimaryPhoneNumber ELSE PrimaryPhoneNumber END
				,[PrimaryNumberType] = CASE WHEN @PrimaryNumberType = 127 THEN 0 WHEN @PrimaryNumberType>0 THEN @PrimaryNumberType ELSE PrimaryNumberType END 
				,[InternalID]= CASE @TeacherInternalId WHEN '*CLEAR*' THEN '' WHEN '' THEN InternalID ELSE @TeacherInternalId END
				,[UpdatedOn] = getdate()
				WHERE ID =@UserId
				
				IF(@ClassEngageID!='')
				BEGIN
				    SELECT @SchoolId = ID FROM Schools WHERE SchoolId =@SchoolEngageID AND Status=1
					IF(@SchoolId IS NULL)
					    UPDATE [BUP_Teachers] SET Status=5 , Remark ='School Engage ID is not in Schools' WHERE ID = @BUPTeacherID
					ELSE
					BEGIN 
					    SELECT @CommunityId =c.ID FROM Communities c
						INNER JOIN CommunitySchoolRelations r ON c.ID =r.CommunityId
						INNER JOIN Schools s ON s.ID = r.SchoolId
						WHERE s.ID=@SchoolId AND c.Status=1 AND c.CommunityId=@CommunityEngageID
						IF(@CommunityId IS NULL)
							UPDATE [BUP_Teachers] SET Status=5 , Remark ='Community Engage ID is not in Communities' WHERE ID = @BUPTeacherID
						ELSE BEGIN
							SELECT @ClassId=c.Id FROM Classes c 
							INNER JOIN CommunitySchoolRelations r ON c.SchoolId=r.SchoolId 
							INNER JOIN Communities cc on cc.ID = r.CommunityId
							WHERE c.SchoolId = @SchoolId AND cc.ID = @CommunityId AND c.ClassId=@ClassEngageID
							IF(@ClassId IS NULL)
							BEGIN
								UPDATE [BUP_Teachers] SET Status=5 , Remark ='Class Engage ID is not in Classes' WHERE ID = @BUPTeacherID
							END
							ELSE BEGIN
							 IF(NOT EXISTS (SELECT * FROM TeacherClassRelations WHERE TeacherId=@TeacherId AND ClassId=@ClassId))
								BEGIN
									INSERT INTO TeacherClassRelations SELECT @TeacherId,@ClassId 
								END
							END	
						END
					END
				END	
			END
		END

		--DELETE
		IF(@Action = 3)BEGIN
			IF (@UserId IS NULL) 
			  UPDATE [BUP_Teachers] SET Status=5 , Remark ='Teacher Engage ID is not in Teachers' WHERE ID = @BUPTeacherID
			ELSE BEGIN
				SELECT @CommunityId=ID FROM Communities WHERE CommunityId=@CommunityEngageID
				SELECT @SchoolId=ID FROM Schools WHERE SchoolId=@SchoolEngageID
				SELECT @ClassID=ID FROM Classes WHERE ClassId=@ClassEngageID
				IF((@CommunityId IS NOT NULL) AND (@SchoolId IS NOT NULL))
				 BEGIN
					  DELETE UserComSchRelations WHERE (UserId=@UserId AND CommunityId=@CommunityId AND SchoolId=@SchoolId) 					  
					  IF(@ClassId IS NOT NULL)
					     DELETE TeacherClassRelations WHERE TeacherId=@TeacherId AND ClassId=@ClassId
					  IF(NOT EXISTS (SELECT * FROM UserComSchRelations WHERE UserId=@UserId) AND 
					   NOT EXISTS (SELECT * FROM TeacherClassRelations WHERE TeacherId=@TeacherId))
					   UPDATE Users SET Status=2,StatusDate=GETDATE(),UpdatedOn=GETDATE() WHERE ID=@UserId
			     END
				ELSE
				  UPDATE [BUP_Teachers] SET Status=5 , 
					  Remark ='Can not find Community or School ' WHERE ID = @BUPTeacherID
		    END 
		END

		UPDATE BUP_Teachers SET Status = 3 WHERE ID = @BUPTeacherID AND Status = 1;
	  COMMIT TRANSACTION ;
	END TRY

	BEGIN CATCH
		IF (XACT_STATE()) = -1
		BEGIN			
			ROLLBACK TRANSACTION;
			UPDATE BUP_Teachers SET Remark = ERROR_MESSAGE() ,Status = 4 WHERE ID = @BUPTeacherID
		END;

		IF (XACT_STATE()) = 1
		BEGIN
			COMMIT TRANSACTION;   
		END;
	END CATCH 
END