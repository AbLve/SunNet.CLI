 IF EXISTS  (SELECT  * FROM dbo.SysObjects WHERE ID = object_id(N'[ClassroomStatusHistories]') AND OBJECTPROPERTY(ID, 'IsTable') = 1) 
	drop table ClassroomStatusHistories
Go

CREATE TABLE [dbo].[ClassroomStatusHistories](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ClassroomId] int not null,
	[Status] [tinyint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_ClassroomStatusHistories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

 IF EXISTS  (SELECT  * FROM dbo.SysObjects WHERE ID = object_id(N'[StudentStatusHistories]') AND OBJECTPROPERTY(ID, 'IsTable') = 1) 
	drop table StudentStatusHistories
Go

CREATE TABLE [dbo].[StudentStatusHistories](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StudentId] int not null,
	[Status] [tinyint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_StudentStatusHistories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

 IF EXISTS  (SELECT  * FROM dbo.SysObjects WHERE ID = object_id(N'[SchoolStatusHistories]') AND OBJECTPROPERTY(ID, 'IsTable') = 1) 
	drop table SchoolStatusHistories
Go


CREATE TABLE [dbo].[SchoolStatusHistories](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SchoolId] int not null,
	[Status] [tinyint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_SchoolStatusHistories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

 IF EXISTS  (SELECT  * FROM dbo.SysObjects WHERE ID = object_id(N'[TeacherStatusHistories]') AND OBJECTPROPERTY(ID, 'IsTable') = 1) 
	drop table TeacherStatusHistories
Go

CREATE TABLE [dbo].[TeacherStatusHistories](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TeacherId] int not null,
	[Status] [tinyint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_TeacherStatusHistories] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


insert ClassroomStatusHistories 
select cr.ID as ClassroomId , cr.Status,cr.StatusDate from classrooms cr
left join ClassroomStatusHistories h on cr.ID = h.classroomId 
where h.ID is null

go

insert SchoolStatusHistories 
select s.ID as SchoolId , s.Status,s.StatusDate from Schools s
left join SchoolStatusHistories h on s.ID = h.SchoolId 
where h.ID is null

go

insert StudentStatusHistories 
select s.ID as StudentId , s.Status,s.StatusDate from Students s
left join StudentStatusHistories h on s.ID = h.StudentId 
where h.ID is null

go 


insert TeacherStatusHistories 
select s.ID as TeacherId , u.Status,u.StatusDate from Teachers s
inner join Users u on s.UserId = u.ID
left join TeacherStatusHistories h on s.ID = h.TeacherId 
where h.ID is null

go


IF EXISTS(select name from sysobjects where name='InsertClassroomStatusHistory' and type='tr')
	DROP TRIGGER InsertClassroomStatusHistory
GO

CREATE TRIGGER [InsertClassroomStatusHistory] ON [dbo].Classrooms 
FOR INSERT
AS
  declare @ID int
  select @ID = ID from Inserted
  if(@ID is not null) begin
  insert  ClassroomStatusHistories  select  ID, Status, StatusDate from Classrooms
  where id = @ID
  end

GO

IF EXISTS(select name from sysobjects where name='InsertSchoolsStatusHistory' and type='tr')
	DROP TRIGGER InsertSchoolsStatusHistory
GO

CREATE TRIGGER InsertSchoolsStatusHistory ON [dbo].Schools 
FOR INSERT
AS
  declare @ID int
  select @ID = ID from Inserted
  if(@ID is not null) begin
  insert  SchoolStatusHistories  select  ID , Status, StatusDate from Schools
  where id = @ID
  end

GO


IF EXISTS(select name from sysobjects where name='InsertStudentStatusHistory' and type='tr')
	DROP TRIGGER InsertStudentStatusHistory
GO

CREATE TRIGGER InsertStudentStatusHistory ON [dbo].Students 
FOR INSERT
AS
  declare @ID int
  select @ID = ID from Inserted
  if(@ID is not null) begin
  insert  StudentStatusHistories  select  ID , Status, StatusDate from Students
  where id = @ID
  end

GO


IF EXISTS(select name from sysobjects where name='InsertTeacherStatusHistory' and type='tr')
	DROP TRIGGER InsertTeacherStatusHistory
GO

CREATE TRIGGER InsertTeacherStatusHistory ON [dbo].Teachers 
FOR INSERT
AS
  declare @ID int
  select @ID = ID from Inserted
  if(@ID is not null) begin
  insert  TeacherStatusHistories  select  t.ID  , u.Status, u.StatusDate from Teachers t
  inner join Users u on  t.UserId = u.ID
  where t.id = @ID
  end

GO



/****** Object:  Trigger [dbo].[tgr_ClassRoom_update]    Script Date: 2015/4/27 14:45:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

Alter TRIGGER [dbo].[tgr_ClassRoom_update]
on [dbo].[Classrooms]
    for update
as
	DECLARE @ID int
	SELECT @ID = ID FROM inserted;

    DECLARE @OldStatus tinyint,@NewStatus tinyint;
	SELECT @OldStatus = Status FROM deleted;
	SELECT @NewStatus = Status FROM inserted;

	IF(@OldStatus != @NewStatus)
	BEGIN
	UPDATE Classrooms SET StatusDate = GETDATE() WHERE ID = @ID;
	INSERT ClassroomStatusHistories SELECT @ID, @NewStatus,GETDATE()
	END

	DECLARE @OldKitId int,@NewKitId int; 
    SELECT @OldKitId = KitId FROM deleted;
	SELECT @NewKitId = KitId FROM inserted;

	IF(@OldKitId != @NewKitId)
	UPDATE Classrooms SET KitUpdatedOn = GETDATE() WHERE ID = @ID;

    DECLARE @OldPart1KitId int,@NewPart1KitId int; 
    SELECT @OldPart1KitId = Part1KitId FROM deleted;
	SELECT @NewPart1KitId = Part1KitId FROM inserted;

	IF(@OldPart1KitId != @NewPart1KitId)
	UPDATE Classrooms SET Part1KitUpdatedOn = GETDATE() WHERE ID = @ID;

	DECLARE @OldPart2KitId int,@NewPart2KitId int; 
    SELECT @OldPart2KitId = Part2KitId FROM deleted;
	SELECT @NewPart2KitId = Part2KitId FROM inserted;

	IF(@OldPart2KitId != @NewPart2KitId)
	UPDATE Classrooms SET Part2KitUpdatedOn = GETDATE() WHERE ID = @ID;

	DECLARE @OldStartupKitId int,@NewStartupKitId int; 
    SELECT @OldStartupKitId = StartupKitId FROM deleted;
	SELECT @NewStartupKitId = StartupKitId FROM inserted;

	IF(@OldStartupKitId != @NewStartupKitId)
	UPDATE Classrooms SET StartupKitUpdatedOn = GETDATE() WHERE ID = @ID;


	DECLARE @OldCurriculumId int,@NewCurriculumId int; 
    SELECT @OldCurriculumId = CurriculumId FROM deleted;
	SELECT @NewCurriculumId = CurriculumId FROM inserted;

	IF(@OldCurriculumId != @NewCurriculumId)
	UPDATE Classrooms SET CurriculumUpdatedOn = GETDATE() WHERE ID = @ID;

	DECLARE @OldNeedCurriculumId int,@NewNeedCurriculumId int; 
    SELECT @OldNeedCurriculumId = NeedCurriculumId FROM deleted;
	SELECT @NewNeedCurriculumId = NeedCurriculumId FROM inserted;

	IF(@OldNeedCurriculumId != @NewNeedCurriculumId)
	UPDATE Classrooms SET NeedCurriculumUpdatedOn = GETDATE() WHERE ID = @ID;

	
	DECLARE @OldDevelopingTalkersKitId int,@NewDevelopingTalkersKitId int; 
    SELECT @OldDevelopingTalkersKitId = DevelopingTalkersKitId FROM deleted;
	SELECT @NewDevelopingTalkersKitId = DevelopingTalkersKitId FROM inserted;

	IF(@OldDevelopingTalkersKitId != @NewDevelopingTalkersKitId)
	UPDATE Classrooms SET DevelopingTalkersKitUpdatedOn = GETDATE() WHERE ID = @ID;

	DECLARE @OldFccKitId int,@NewFccKitId int; 
    SELECT @OldFccKitId = FccKitId FROM deleted;
	SELECT @NewFccKitId = FccKitId FROM inserted;

	IF(@OldFccKitId != @NewFccKitId)
	UPDATE Classrooms SET FccKitUpdatedOn = GETDATE() WHERE ID = @ID;

GO


/****** Object:  Trigger [dbo].[tgr_Schools_update]    Script Date: 2015/4/27 14:55:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



Alter TRIGGER [dbo].[tgr_Schools_update]
on [dbo].[Schools]
    for update
as
	DECLARE @ID int,@TrsProviderId int
	SELECT @ID = ID FROM inserted;


    DECLARE @OldStatus tinyint,@NewStatus tinyint;
	SELECT @OldStatus = Status FROM deleted;
	SELECT @NewStatus = Status FROM inserted;

	IF(@OldStatus != @NewStatus)
	BEGIN
	UPDATE Schools SET StatusDate = GETDATE() WHERE ID = @ID;
	insert  SchoolStatusHistories  select  ID , Status, GETDATE() from Schools
  where id = @ID
	END

	 

GO


ALTER TRIGGER [dbo].[tgr_Users_update]
on [dbo].[Users]
    for update
as
	DECLARE @ID int, @OldStatus tinyint,@NewStatus tinyint;
	SELECT @OldStatus = Status FROM deleted;
	SELECT @NewStatus = Status,@ID=ID FROM inserted;

	IF(@OldStatus != @NewStatus) BEGIN
	UPDATE Users SET StatusDate = GETDATE() WHERE ID = @ID;
	IF EXISTS(SELECT * FROM Users WHERE  ID = @ID AND Role = 145) --Teacher
	 insert  TeacherStatusHistories  select  t.ID  , u.Status,GETDATE() from Teachers t
  inner join Users u on  t.UserId = u.ID
  where u.id = @ID
	END

	GO

/****** Object:  Trigger [dbo].[tgr_Student_update]    Script Date: 2015/4/27 16:09:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER TRIGGER [dbo].[tgr_Student_update]
on [dbo].[Students]
    for update
as
	DECLARE @ID int;
	SELECT @ID = ID FROM inserted;
	
	DECLARE @OldStatus tinyint,@NewStatus tinyint;
	SELECT @OldStatus = Status FROM deleted;
	SELECT @NewStatus = Status FROM inserted;

	IF(@OldStatus != @NewStatus)
	BEGIN
	UPDATE Schools SET StatusDate = GETDATE() WHERE ID = @ID;
	  insert  StudentStatusHistories  select  ID , Status,  GETDATE() from Students
  where id = @ID
	END

	
