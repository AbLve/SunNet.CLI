@using Sunnet.Cli.Core.Ade.Entities
@{
    ViewBag.Title = "Class View";
    string formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var baseClassObj = new { @class = "form-control" };
    CpallsSchoolModel schoolModel = ViewBag.SchoolModel;
    var districtId = 0;
    int.TryParse(Request.QueryString["communityId"], out districtId);
    string backUrl = Url.Action("Index", "School", new
    {
        assessmentId = Request.QueryString["assessmentId"],
        wave = ViewBag.Wave,
        communityId = districtId,
        communityName = Request.QueryString["communityName"]
    });
    int leftWidth = 210;
    ViewBag.LeftWidth = leftWidth;// Partial
    ViewBag.Target = "Class";
    var childrenMeasures = ViewBag.MeasureList as List<MeasureHeaderModel>;
    var topHeight = childrenMeasures != null && childrenMeasures.Any(x => x.ParentId > 1) ? 160 : 130;
    List<AssessmentReportEntity> assessmentReports = ViewBag.AssessmentReports;
}
@section LeftMenu
{
    @Html.Partial("_Partial_Left_Cpalls")
}
@section BreadPath
{
    <a href="/">@(ViewBag.AssessmentName)</a>
    @if (ViewBag.ShowSchoolback)
    {
        <em class="icon-angle-right"></em>
        <a href="@backUrl">School View</a>
    }
    <em class="icon-angle-right"></em>Class View
}
@section Styles{
    <style type="text/css">
        .fixed-header {
            margin-left: 224px;
        }
        .fixed-column-title div {
            top: @(topHeight - 25)px;
        }
        .main-content, .right-content-top {
            margin-top: 5px;
        }
        .modal-l-b {
            margin: 5px 0;
        }
        .form-horizontal .control-label {
            padding-right: 5px;
        }
        .form-group > div{
            padding-left: 5px;
        }
    </style>
}
<div class="main-content top-form">
    <div class="form-horizontal">
        <span class="control-label" style="font-weight:bold;">Community/District</span>
        @Html.DisplayFor(x => schoolModel.CommunitiesText)
        @ViewTextHelper.HtmlEmptySeparator
        <span class="control-label" style="font-weight:bold;">School</span>
        @Html.DisplayFor(x => schoolModel.Name)
</div>
</div>

<div class="right-content-top">

    <div class="btn-group">
        @if (ViewBag.ShowSchoolback)
        {
            <a type="button" class="mainbutton mainright-btn nav-btn" href="@backUrl">
                <em class=" icon-double-angle-left"></em>
                School View
            </a>
        }
    </div>
    <div class="btn-group">
        <button type="button" class="mainbutton mainright-btn nav-btn" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <em class="icon-bar-chart"></em>
            Reports <span class="caret"></span>
        </button>
        @if (ViewBag.SchoolId > 0)
        {
            <ul class="dropdown-menu">
                @if (assessmentReports.Any(e => e.Report == ReportEnum.Completion))
                {
                    <li><a href="javascript:void(0);" data-bind="click:completion_report">School Completion Report</a></li>
                }
                @if (assessmentReports.Any(e => e.Report == ReportEnum.Summary))
                {
                    <li>
                        @Html.ActionLink("School Summary Report", "Summary", "Class",
                        new
                        {
                            Area = "Report",
                            assessmentId = ViewBag.AssessmentId,
                            year = ViewBag.Year,
                            schoolId = ViewBag.SchoolId,
                            school = schoolModel.Name
                        },
                        new
                        {
                            data_toggle = "modal",
                            data_target = "#modalNormal",
                            data_confirm = "false"
                        })
                    </li>
                }
                @if (assessmentReports.Any(e => e.Report == ReportEnum.SchoolCustomScoreReport))
                {
                    <li>
                        @Html.ActionLink("School Custom Score Report", "CustomScoreReportView", "Class", new
                   {
                       Area = "Report",
                       assessmentId = ViewBag.AssessmentId,
                       year = ViewBag.Year,
                       schoolId = ViewBag.SchoolId,
                       districtId = districtId,
                       school = schoolModel.Name
                   }, new
                   {
                       data_toggle = "modal",
                       data_target = "#modalNormal",
                       data_confirm = "false"
                   })
                    </li>
                }
                @if (assessmentReports.Any(e => e.Report == ReportEnum.PercentileRank))
                {
                    <li>
                        @Html.ActionLink("School Summary (Percentile Rank)", "ClassPercentileRankAverage", "Class",
                        new
                        {
                            Area = "Report",
                            assessmentId = ViewBag.AssessmentId,
                            year = ViewBag.Year,
                            schoolId = ViewBag.SchoolId,
                            school = schoolModel.Name
                        },
                        new
                        {
                            data_toggle = "modal",
                            data_target = "#modalNormal",
                            data_confirm = "false"
                        })
                    </li>
                }
                @if (assessmentReports.Any(e => e.Report == ReportEnum.Growth))
                {
                    <li>
                        @Html.ActionLink("School Growth Report", "Growth", "Class", new
                   {
                       Area = "Report",
                       assessmentId = ViewBag.AssessmentId,
                       year = ViewBag.Year,
                       schoolId = ViewBag.SchoolId,
                       districtId = districtId,
                       school = schoolModel.Name
                   }, new
                   {
                       data_toggle = "modal",
                       data_target = "#modalNormal",
                       data_confirm = "false"
                   })
                    </li>
                }
                @if (assessmentReports.Any(e => e.Report == ReportEnum.ComparisionofGrowth))
                {
                    if (ViewBag.Debug)
                    {
                    <li><a href="javascript:void(0);" data-bind="click:comparison_report">School Comparison of Growth</a></li>
                    }
                    else
                    {
                    <li><a href="javascript:void(0);" onclick=" alert('Coming soon.'); ">School Comparison of Growth</a></li>
                    }
                }
            </ul>
        }
    </div>
    <div class="btn-group">
        @if (ViewBag.HasAnotherVersion)
        {
            <a class="mainbutton mainright-btn nav-btn "
               href='@(Html.Raw(Url.Action("Index", "Class", new
                 {
                     assessmentId = ViewBag.OtherAssessmentId,
                     schoolId = Request.QueryString["schoolId"],
                     year = Request.QueryString["year"]
                 })))'>
                <em class="icon-exchange"></em>
                @(ViewData["OtherVersion"].ToString())
            </a>
        }



    </div>
</div>

<div class="modal-l-b"></div>
<div class="form-horizontal" id="formSearch">
    <div class="form-group">
        @Html.Label("txtSchool", "School", new { @class = "control-label col-sm-1" })
        <div class="col-sm-2">
            @Html.TextBox("txtSchool", @schoolModel.Name, new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_for = "#SchoolId",
           data_remote = Url.Action("GetSchoolSelectList", "School"),
           data_template = "<strong><% this[i].Name %></strong><br /><em style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></em>",
           data_text = "Name",
           data_value = "ID",
           id = "txtSchool",
           placeholder = "Enter key text to search",
           @for = "SchoolId",
           data_extraParams = "{\"communityId\":\"#CommunityId\",\"isActive\":\"#isActive\"}",
           data_bind = "value:searchCriteria.schoolName"
       })
            <input class="form-control" data-bind="value: searchCriteria.schoolId" data-val="true" data-val-number="The field SchoolId must be a number." data-val-required="The SchoolId field is required." id="SchoolId" name="SchoolId" type="hidden" value="-1">
            <input id="isActive" name="isActive" type="hidden" value="False">
        </div>
        <label class="control-label col-sm-1" for="classname">Class</label>
        <div class="col-sm-2">
            <input type="text" class="form-control" name="classname" id="classname" placeholder="Enter Class Name" data-bind="value: searchCriteria.classname" />
        </div>
        <label class="control-label col-sm-1" for="year">Year</label>
        <div class="col-sm-1">
            @Html.DropDownList("year", (IEnumerable<SelectListItem>)ViewBag.YearOptions, new { @class = "form-control", data_bind = "value: searchCriteria.year" })
        </div>
        @*<label class="control-label col-sm-1" for="wave">Wave</label>
        <div class="col-sm-1">
            @Html.DropDownList("wave", (IEnumerable<SelectListItem>)ViewBag.WaveOptions, new { @class = "form-control", data_bind = "value: searchCriteria.wave,event:{change:WaveChanged}" })
        </div>*@
        <div class="col-sm-1">
            <button class="mainbutton mainright-btn sreach-btn" type="button" data-bind="event: { click: customSearch }">Search</button>
        </div>
    </div>
</div>
<div class="modal-l-b"></div>

<div class="main-content">
    <div class="main-content">
        <ul class="assessment-menu-Cpalls-class">
            <div class="assessment-d-btns" data-bind="foreach: { data: showRecords, as: 'item' }">
                <li>
                    <a class="cpalls-btn" href="#" data-bind="attr:{href:$root.getCreateUrl(item),title:item.Name},text:item.Name"></a>
                </li>
            </div>
        </ul>
    </div>
    @Html.Partial("_Partial_Pager")

</div>


@section Scripts
{
    @Scripts.Render("~/scripts/ade")
    @if (ViewBag.Mobile)
    {
        @Scripts.Render("~/scripts/hammer")
    }
    <script type="text/javascript">
        var list_Assessment = {};

        jQuery(function() {  

            list_Assessment = new ViewModel(
                {
                    instanceName: "list_Assessment",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("Search")))',
                    orderBy: "Name",
                    orderDirection: "ASC",
                    pageSize: 50,
                    searchCriteria: {
                        assessmentId: ko.observable(window.queryString("assessmentId", @ViewBag.AssessmentId)),
                        year: ko.observable(window.queryString("year", @ViewBag.Year)),
                        wave: ko.observable(window.queryString("wave", @ViewBag.Wave)),
                        classname: ko.observable(window.queryString("classname")),
                        schoolName: ko.observable(window.queryString("schoolName", "@(Html.Raw(ViewBag.SchoolName))")),
                        schoolId: ko.observable(window.queryString("schoolId", @ViewBag.SchoolId))
                    }
                },
                {
                    getCreateUrl: function(item) {
                        return '@(Html.Raw(Url.Action("Index", "Student", new
                            {
                                schoolId = ViewBag.SchoolId,
                                communityId = Request.QueryString["communityId"],
                                communityName = Request.QueryString["communityName"]
                            })))&classId=' + item.ID + "&assessmentId=@(ViewBag.AssessmentId)&year=" + list_Assessment.searchCriteria.year()
                            + "&wave=" + list_Assessment.searchCriteria.wave();
                    },

                    customSearch: function() {
                        if ('@(ViewBag.Year)' == list_Assessment.searchCriteria.year()
                            && '@(ViewBag.Wave)' == list_Assessment.searchCriteria.wave())
                            list_Assessment.search();
                        else
                            location.href = "?schoolId=@(ViewBag.SchoolId)&assessmentId=@(ViewBag.AssessmentId)&year=" + list_Assessment.searchCriteria.year()
                                + "&wave=" + list_Assessment.searchCriteria.wave()+"&classname="+ list_Assessment.searchCriteria.classname();
                    },
                   
                    completion_report: function() {
                        if (list_Assessment.searchCriteria.schoolId() > 0) {
                            $("#modalNormal").modal({
                                remote: '@Url.Action("Completion", "Class", new { Area = "Report", assessmentId = ViewBag.AssessmentId })'
                                    + '&year=' + list_Assessment.searchCriteria.year()
                                    + "&schoolId=" + list_Assessment.searchCriteria.schoolId(),
                                confirm: false
                            });
                        } else {
                            var school = $("#txtSchool");
                            showMessage("hint", "Cpalls_Report_need_SchoolId");
                            school.focus();
                        }
                    }, 
                  
                    comparison_report: function() {
                        if (list_Assessment.searchCriteria.schoolId() > 0) {
                            $("#modalNormal").modal({
                                remote: '@Url.Action("Comparison", "Class", new { Area = "Report", assessmentId = ViewBag.AssessmentId })'
                                    + "&schoolId=" + list_Assessment.searchCriteria.schoolId(),
                                confirm: false
                            });
                        } else {
                            var school = $("#txtSchool");
                            showMessage("hint", "Cpalls_Report_need_SchoolId");
                            school.focus();
                        }
                    }
                }
            ); 
            list_Assessment.search();
            ko.applyBindings(list_Assessment); 

            $("#txtSchool").on("selected.sunnet.datalist", function(event) {
                if (event.selected.value != "") {
                    location.href = "?schoolId=" + event.selected.value + "&assessmentId=@(ViewBag.AssessmentId)&year=" + list_Assessment.searchCriteria.year()
                        + "&wave=" + list_Assessment.searchCriteria.wave();
                } else {
                    var schoolId = @(Request.QueryString["schoolId"]);
                    list_Assessment.searchCriteria.schoolName("@(Html.Raw(ViewBag.SchoolName))");  //schoolModel.Name
                    list_Assessment.searchCriteria.schoolId(schoolId);
                }
            });
        });

        function ReLoadFunction() {
            location.href = "?schoolId=@(ViewBag.SchoolId)&assessmentId=@(ViewBag.AssessmentId)&year=" + list_Assessment.searchCriteria.year()
                               + "&wave=" + list_Assessment.searchCriteria.wave()+"&classname="+ list_Assessment.searchCriteria.classname();
        }
    </script>
}