@using System.Web.UI.WebControls
@using Sunnet.Cli.Business.Cpalls.Models;
@using Sunnet.Cli.Core.Users.Enums;
@model Sunnet.Cli.Business.Students.Models.StudentModel
@{
    ViewBag.Title = "Access results";
}
@section LeftMenu
{
    @Html.Partial("_Partial_Left_Observable")
}
@section BreadPath
{
    <a href="/Observable/Observable/index">Assessment</a><i class="icon-angle-right"></i>@ViewBag.AssessmentName
}
@if (ViewBag.UserRole != Role.Parent)
{
    <form class="form-horizontal" role="form" id="formSearch" style="padding-top: 10px;">
        <div class="form-group">
            @Html.Label("", "Community/District", new { @class = "control-label col-sm-2", @for = "txtCommunity" })
            <div class="col-sm-3">
                @Html.TextBox("txtCommunity", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_for = "#CommunityId",
           data_remote = Url.Action("GetCommunitySelectListForSearch"),
           data_text = "Name",
           data_value = "ID",
           data_required = false,
           id = "txtCommunity",
           name = "txtCommunity",
           placeholder = "Enter key text to search",
           data_bind = "value: searchCriteria.communityName",
           @for = "CommunityId",

           data_extraParams = "{\"isActiveCommunity\":\"#isActiveCommunity\"}"
       })
                @Html.HiddenFor(model => model.CommunityId, new
       {
           @class = "form-control ",
           placeholder = "Selected Community",
           data_bind = "value: searchCriteria.communityId"
       })
                @Html.Hidden("isActiveCommunity", false)
            </div>
            @Html.Label("", "School Name", new { @class = "control-label col-sm-2", @for = "txtSchool" })
            <div class="col-sm-3">
                @Html.TextBox("txtSchool", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_for = "#SchoolId",
           data_remote = Url.Action("GetSchoolSelectList"),
           data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",

           data_text = "Name",
           data_value = "ID",
           data_required = false,
           id = "txtSchool",
           name = "txtSchool",
           placeholder = "Enter key text to search",
           data_bind = "value: searchCriteria.schoolName",
           @for = "SchoolId",
           data_extraParams = "{\"communityId\":\"#CommunityId\",\"isActive\":\"#isActive\"}"

       })
                @Html.HiddenFor(model => model.SchoolId, new
       {
           @class = "form-control",
           placeholder = "Selected School",
           data_bind = "value: searchCriteria.schoolId"
       })
                @Html.Hidden("isActive", false)
            </div>
        </div>
        <div class="form-group">
            @Html.Label("TeacherName", "Teacher Name", new { @class = "control-label col-sm-2", @for = "txtTeacherName" })
            <div class="col-sm-3">
                @Html.TextBox("txtTeacherName", "", new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.teacherName"
       })
            </div>
            @Html.Label("", "Class Name", new { @class = "control-label col-sm-2", @for = "dplClass" })
            <div class="col-sm-3">
                <select id="dplClass" class="form-control"
                    data-bind="options: classOptions, optionsText: 'Text', optionsValue: 'Value', value: searchCriteria.classId">
                </select>
            </div>



        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.StudentName, new { @class = "control-label col-sm-2", @for = "txtStudentName" })
            <div class="col-sm-3">
                @Html.TextBox("txtStudentName", "", new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.studentName",
                placeholder = "Enter first, middle or last name"
            })

            </div>
            @Html.Label("ReportsSelect", "Reports", new { @class = "control-label col-sm-2", @for = "ddlReports" })
            <div class="col-sm-3">
                @Html.DropDownListFor(m => m.Status, (IEnumerable<SelectListItem>)ViewBag.StatusOptions,
                new { @class = "form-control", data_bind = "value: searchCriteria.status", id = "ddlReports" })
            </div>

        </div>
        <div class="form-group">
            @Html.Label("", "Reports From", new { @class = "control-label col-sm-2", @for = "reportBegin" })
            <div class="col-sm-3">
                <div class="col-lg-6 m-l-n">
                    @Html.TextBox("reportBegin", "", new { @class = "form-control date", maxDate = DateTime.Now.ToString("MM/dd/yyyy"), data_bind = "value: searchCriteria.reportBegin" })
                </div>
                <label class="col-lg-1 m-l-n" for="reportEnd">
                    to
                </label>
                <div class="col-lg-6 m-l-n">
                    @Html.TextBox("reportEnd", "", new { @class = "form-control date", maxDate = DateTime.Now.ToString("MM/dd/yyyy"), data_bind = "value: searchCriteria.reportEnd" })
                </div>
            </div>
            <div class="col-sm-2">
            </div>
             <div class="col-sm-3">
                <button class="mainbutton mainright-btn sreach-btn" type="button" data-bind="event: { click: search }">Search</button>
            </div>
        </div>
       
    </form>
}
<div class="main-content main-content">
    <div class="content-title">
        Students
    </div>

    <div class="content-body-tab">
        <table class="table table-striped table-hover">
            <thead>
                <tr data-bind="foreach: { data: headers, as: 'header' }">
                    <!-- ko if: (header.order === true)-->
                    <th data-bind="style: { width: width }">
                        <a href="javascript:;" data-bind="text: text, click: $root.changeOrder"></a>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                    </th>
                    <!-- /ko-->
                    <!-- ko if: (header.order === false) -->
                    <th data-bind="text: text, style: { width: width }"></th>
                    <!-- /ko-->
                </tr>
            </thead>
            <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                <tr>
                    <td data-bind="text: item.FirstName"></td>
                    <td data-bind="text: item.LastName"></td>
                    <td data-bind="text: item.BirthDate"></td>
                    <td>
                        <ul data-bind="foreach: { data: Reports, as: 'item1' }">
                            <li>
                                <a class="   btn-link" data-bind="attr:{href:'AssessmentResults?id='+item1.ID},html:item1.Name"></a>
                                <a class="table-btn icon-trash trash-btn" data-bind="event: { click: $root.DeleteReport }" href="#" title="Delete"></a>
                            </li>
                        </ul>
                    </td>
                    <td>
                        <a class="tab-btn" data-bind="attr: { href: $root.PlayUrl(item) }" ><span style="display: none">Play</span> <i class="icon-play"></i></a>
                    </td>
                </tr>
            </tbody>@Html.Display("e", "NoData", new { Colspan = 5 })
        </table>
        @Html.Partial("_Partial_Pager")
    </div>
</div>
@section Scripts
{
    <script type="text/javascript">
        var list_Students = {};

        function SchoolChanged() {
            var schoolId = $("#SchoolId").val();
            var communityId = $("#CommunityId").val();
            $.getJSON(
                '@Url.Action("GetClassSelectList")',
                { schoolId: schoolId, communityId: communityId,assessmentId:@ViewBag.AssessmentId },
                function(data) {
                    list_Students.classOptions(data);
                    list_Students.searchCriteria.classId(window.queryString("classid"));
                });
        }

        $(function() {
            list_Students = new ViewModel(
                {
                    instanceName: "list_Students",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("Search")))',
                    addDataUrl: '@Html.Raw(Url.Action("New"))',
                    addType: 'Redirect',
                    viewDataUrl: '@Html.Raw(Url.Action("View"))',
                    viewType: 'Redirect',
                    editDataUrl: '@Html.Raw(Url.Action("Edit"))',
                    editType: 'Redirect',
                    deleteDataUrl: '',
                    orderBy: "FirstName",
                    orderDirection: "ASC",
                    pageSize: 20,
                    headers: [
                        {
                            text: "@Html.DisplayNameFor(model => model.FirstName)",
                            field: "@Html.NameFor(model => model.FirstName)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.LastName)",
                            field: "@Html.NameFor(model => model.LastName)",
                            order: true,
                            width: '20%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.BirthDate)",
                            field: "@Html.NameFor(model => model.BirthDate)",
                            order: true,
                            width: '15%'
                        },
                        { text: "Reports", width: '15%' },
                        { text: "Action", width: '15%' }
                    ],
                    searchCriteria: {
                        assessmentId: ko.observable(@ViewBag.AssessmentId),
                        communityId: ko.observable(window.queryString("communityId")),
                        communityName: ko.observable(window.queryString("communityName")),
                        schoolId: ko.observable(window.queryString("schoolId")),
                        schoolName: ko.observable(window.queryString("schoolName")),
                        teacherName: ko.observable(window.queryString("teacherName")),
                        classId: ko.observable(window.queryString("classid", -1)),
                        studentId: ko.observable(window.queryString("studentId")),
                        studentName: ko.observable(window.queryString("studentName")),
                        status: ko.observable(window.queryString("status", -1)),
                        reportBegin: ko.observable(window.queryString("reportBegin")),
                        reportEnd: ko.observable(window.queryString("reportEnd"))
                    }
                },
                {
                    classOptions: ko.observableArray([]),
                    DeleteReport: function(item) {
                        var msg = "Do you want to delete the " + "<b>" + item.Name + "</b> " + "report?<br /> Once deleted it cannot be recovered.";
                        var itemId = item.ID;
                        $.when(waitingConfirm(msg, "Delete", "Cancel")).done(function() {
                            $.post('@Html.Raw(Url.Action("DeleteReport"))',{id:itemId}, function(response) {
                                if (response.success) {
                                    showMessage("success");
                                    list_Students.search();
                                } else {
                                    showMessage("fail", response.msg);
                                }
                            }, 'json');
                        });
                    },
                    PlayUrl: function (item)
                    {
                       
                        return 'Detail?studentId='+item.ID+'&assessmentId=@ViewBag.AssessmentId' + "&returnurl=" + list_Students.getLocation();
                    }
                }
            );
            list_Students.search();
            ko.applyBindings(list_Students);
            $("#txtCommunity").on("selected.sunnet.datalist", function() {
                $("#txtSchool").datalist("clear");
                $("#SchoolId").val("");
                SchoolChanged();
            });
            $("#txtSchool").on("selected.sunnet.datalist", function() {
                SchoolChanged();
            });
            SchoolChanged();
        });
    </script>
}