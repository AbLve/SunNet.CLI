@model DirectionItemModel
@{
    if (Model.ID < 1)
    {
        ViewBag.Title = "New " + ItemType.Direction.ToDescription();
    }
    else
    {
        ViewBag.Title = Model.Label;
    }
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var baseClassObj = new { @class = "form-control" };
    var backUrl = Server.UrlDecode(Request.QueryString["returnurl"]) ??
                  Url.Action("Detail", "Measure", new { id = Model.MeasureId });

}

@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_Partial_Left_Ade.cshtml")
}

@section BreadPath
{
    @Html.Partial("NEV_Item_BreadPath", Model)
}
<div class="right-content-top">
    <a class="mainbutton mainright-btn nav-btn" href="@(Html.Raw(backUrl))">Back</a>
    @if (Model.ID > 0)
    {
        <a class="mainbutton mainright-btn nav-btn" target="_blank" href='@(Url.Action("Preview", "Execute", new { Area = "Cpalls", itemId = Model.ID, measureId = Model.MeasureId }))'>Preview</a>
    }
</div>
@using (Ajax.BeginForm("SaveDirection", "Item", null, PostFormHelper.DefaultAjaxOptions,
        new
        {
            @class = "form-horizontal",
            id = formId
        }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="ID" value="@Model.ID" />
    @Html.HiddenFor(m => m.Type)
    @Html.HiddenFor(m => m.MeasureId)
    @Html.Hidden("Answers", "")
    @Html.HiddenFor(x => x.AnswerType)
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                @Html.LabelFor(model => model.Label, new { @class = "control-label col-sm-2 required" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Label, baseClassObj)
                    @Html.ValidationMessageFor(model => model.Label)
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.Status, new { @class = "hide" })
                    @Html.EnumDropDownListFor(x => x.Status, ViewTextHelper.DefaultPleaseSelectText, "", baseClassObj)
                    @Html.ValidationMessageFor(model => model.Status)
                </div>
                <div class="col-sm-2">
                    <div class="checkbox">
                        <label for="IsPractice">
                            @Html.CheckBoxFor(x => x.IsPractice, new { data_bind = "checked:IsPractice" })
                            @Html.DisplayNameFor(x => x.IsPractice)
                        </label>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="checkbox">
                        <label for="ShowAtTestResume">
                            @Html.CheckBoxFor(x => x.ShowAtTestResume, new { data_bind = "checked:ShowAtTestResume,enable:IsPractice()" })
                            @Html.DisplayNameFor(x => x.ShowAtTestResume)
                        </label>
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(model => model.Description, baseClassObj)
                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DirectionText, new { @class = "control-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.TextAreaFor(model => model.DirectionText, new { @class = "form-control", rows = 8 })

                    @Html.ValidationMessageFor(model => model.DirectionText)
                </div>
            </div>
        </div>
    </div>
    <div class="button-content">
        <button class="mainbutton mainright-btn submit-btn" id="btnSubmit" type="submit">Submit</button>
        <a class="mainbutton mainright-btn cancel-btn" href="@(Html.Raw(backUrl))">Cancel</a>
    </div>
}
@section Scripts{
    @Scripts.Render("~/scripts/ade")
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/ckeditor")
    <script type="text/javascript">
    CKEDITOR.replace('DirectionText',
    {
        toolbar: 'Cli'
    });
    var itemModel;

    $(function() {
        registerFormCallbacks("@(formId)", {
            onPosted: function(response) {
                redirectBack("@Html.Raw(backUrl)");
            }
        });

        var jsonModel = @Html.Raw(ViewBag.ModelJson);
        var formEle = document.getElementById("@formId");
        itemModel = getItemModel(jsonModel, { Answer: "#Answers" });
        ko.applyBindings(itemModel, formEle);
    });
    </script>

}
