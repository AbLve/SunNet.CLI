@model ObservableEntryModel
@{
    if (Model.ID < 1)
    {
        ViewBag.Title = "New " + Model.Type.ToDescription();
    }
    else
    {
        ViewBag.Title = Model.Label;
    }
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var baseClassObj = new { @class = "form-control" };
    var backUrl = Server.UrlDecode(Request.QueryString["returnurl"]) ??
                  Url.Action("Detail", "Measure", new { id = Model.MeasureId });
}

@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_Partial_Left_Ade.cshtml")
}
@section BreadPath
{
    @Html.Partial("NEV_Item_BreadPath", Model)
}
@section Scripts
{
    @Scripts.Render("~/scripts/ade")
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/ckeditor")
    <script type="text/javascript">
        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }

        function getToFolder() {
            return "assessment";
        }

      
        var itemModel;
        jQuery(function() {
            registerFormCallbacks("@(formId)", {
                onPosted: function(response) {
                    redirectBack("@Html.Raw(backUrl)");
                }
            });

            var jsonModel = @Html.Raw(ViewBag.ModelJson);
            var formEle = document.getElementById("@formId");
            itemModel = getTypedResponseItemModel(jsonModel, { Answer: "#Answers", Responses: "#Responses" });

            var $responseEditor = $("#responseEditor");
            itemModel.responseDeleted = function(response, index) {
                if ($responseEditor.find("li").length - 1 == index) {
                    index--;
                }
                $responseEditor.find("li:visible").eq(index).find("a").tab("show");
            };
            itemModel.responseCreated = function(response, index) {
                $responseEditor.find("li:visible:last").prev().find("a").tab("show");
            };
            ko.applyBindings(itemModel, formEle);

            setTimeout(function() {
                $("div.tab-content>.tab-pane:not(:first)").removeClass("active").removeClass("in");
            }, 200);
        });
    </script>
}
<div class="right-content-top">
    <a class="mainbutton mainright-btn nav-btn" href="@(Html.Raw(backUrl))">Back</a>
    
</div>
@using (Ajax.BeginForm("SaveObservableEntry", "Item", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="ID" value="@Model.ID" />
    @Html.HiddenFor(m => m.Type)
    @Html.HiddenFor(m => m.MeasureId)
    @Html.Hidden("Answers", "")
    @Html.HiddenFor(x => x.AnswerType)
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                @Html.LabelFor(model => model.Label, new { @class = "control-label col-sm-2 required" })
                <div class="col-sm-4">
                    @Html.DisplayFor(model => model.Label, baseClassObj)
               
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.Status, new { @class = "hide" })
                    @Html.DisplayFor(x => x.Status, ViewTextHelper.DefaultPleaseSelectText, "", baseClassObj)
 
                </div>
              
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.DisplayFor(model => model.Description, baseClassObj)
 
                </div>
            </div>
       
            <div class="form-group">
                @Html.LabelFor(model => model.TargetText, new { @class = "control-label col-sm-2" })
                <div class="col-sm-10">
                    <label class="control-label-text">
                        @Html.Raw(Model.TargetText)
                    </label>
                </div>
            </div>
             <div class="form-group">
                @Html.Label(" "," ", new { @class = "  col-sm-2" })
                <div class="col-sm-10">
                       @Html.CheckBoxFor(c=>c.IsShown)
                    <label for="IsShown">Running Record</label>
                </div>
            </div>
            <br />
            
        </div>
    </div>
    <div class="button-content">
         
        <a class="mainbutton mainright-btn cancel-btn" href="@(Html.Raw(backUrl))">Close</a>
    </div>
}