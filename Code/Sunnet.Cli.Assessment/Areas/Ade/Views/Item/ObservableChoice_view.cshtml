@model ObservableChoiceModel
@{
    if (Model.ID < 1)
    {
        ViewBag.Title = "New " + ItemType.ObservableChoice.ToDescription();
    }
    else
    {
        ViewBag.Title = Model.Label;
    }
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var baseClassObj = new { @class = "form-control" };
    var backUrl = Server.UrlDecode(Request.QueryString["returnurl"]) ??
                  Url.Action("Detail", "Measure", new { id = Model.MeasureId });
}

@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_Partial_Left_Ade.cshtml")
}
@section BreadPath
{
    @Html.Partial("NEV_Item_BreadPath", Model)
}
@section Scripts
{
    @Scripts.Render("~/scripts/ade") 
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/ckeditor")
    <script type="text/javascript">
        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }

        function getToFolder() {
            return "assessment";
        }

       

        var itemModel;
        jQuery(function() {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    redirectBack("@Html.Raw(backUrl)");
                }
            });

            var jsonModel = @Html.Raw(ViewBag.ModelJson);
            var formEle = document.getElementById("@formId");
            itemModel = getObserableChooiceItemModel(jsonModel, {Answer:"#Answers"});
            ko.applyBindings(itemModel, formEle);
        });
    </script>
}
<div class="right-content-top">
    <a class="mainbutton mainright-btn nav-btn" href="@(Html.Raw(backUrl))">Back</a>
    
</div>
@using (Ajax.BeginForm("SaveObservableChoice", "Item", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="ID" value="@Model.ID" />
    @Html.HiddenFor(m => m.Type)
    @Html.HiddenFor(m => m.MeasureId)
    @Html.Hidden("Answers", "") 
    @Html.HiddenFor(x => x.AnswerType)
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                @Html.LabelFor(model => model.Label, new { @class = "control-label col-sm-2 required" })
                <div class="col-sm-4">
                    @Html.DisplayFor(model => model.Label, baseClassObj)
        
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.Status, new { @class = "hide" })
                    @Html.DisplayFor(x => x.Status)
               
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-sm-2" })
                <div class="col-sm-10">
                    @Html.DisplayFor(model => model.Description, baseClassObj) 
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TargetText, new { @class = "control-label col-sm-2" })
                <div class="col-sm-10">
                    <label class="control-label-text">
                        @Html.Raw(Model.TargetText)
                    </label>
                </div>
            </div>
            <div class="form-group ">
                <div class="col-sm-2  ">
                </div>
                <div class="col-sm-9">
                       @Html.CheckBoxFor(c=>c.IsShown)<label for="IsShown">Running Record</label>
                       <span style=" padding-left: 12px;">&nbsp;</span>
                         @Html.EditorForModel("IsMultiChoice")
                </div>
               
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsRequired, new { @class = "control-label col-sm-2  ", @style = "vertical-align:bottom" })
                <div class="col-sm-10">
                    @Html.DisplayFor(x => x.IsRequired)
                </div>
            </div>
            <table class="table table-hover table-striped">
                <thead>
                    <tr>
                        <th width="3%"></th>
                        <th width="*">Item</th>
                  
                    </tr>
                </thead>
                <tbody data-bind="foreach:{data:Answers,as:'answer'}">
                    <tr data-bind="css:{'has-error':answer.hasError}">
                        <td data-bind="text:$index()+1"></td>
                        <td>
                            <label class="hide" data-bind="attr:{for:'Text'+$index()}">Text</label>
                            <input type="text" class="form-control  input-lg" maxlength="100" data-bind=" value:Text,attr:{name:'Text'+$index(),id:'Text'+$index()},required:true" />
                            <div class="field-validation-valid" data-valmsg-replace="true"
                                 data-bind="attr:{'data-valmsg-for':'Text'+$index()}">
                            </div>
                        </td>
                      
                    </tr>
                </tbody>
            </table>
            <br />
        </div>
    </div>
    <div class="button-content">
      
        <a class="mainbutton mainright-btn cancel-btn" href="@(Html.Raw(backUrl))">Close</a>
    </div>
}