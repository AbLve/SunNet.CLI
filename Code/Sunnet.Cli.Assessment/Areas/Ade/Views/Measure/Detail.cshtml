@model Sunnet.Cli.Business.Ade.Models.MeasureModel
@{
    ViewBag.Title = "Detail";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var isCpalls = Model.AssessmentType == AssessmentType.Cpalls;
    var isCec = Model.AssessmentType == AssessmentType.Cec;
    var isCot = Model.AssessmentType == AssessmentType.Cot;
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_Partial_Left_Ade.cshtml")
}
@section BreadPath
{
    @(Html.ActionLink("Assessment", "Index", "Assessment"))
    <i class="icon-angle-right"></i>
    @Html.ActionLink(Model.AssessmentLabel, "Detail", "Assessment", new { id = Model.AssessmentId }, null)
    @if (Model.Parent != null && Model.Parent.ID != 1)
    {
        <i class="icon-angle-right"></i>
        @Model.Parent.Label
    }
    <i class="icon-angle-right"></i>@Model.Label
}
@section Scripts
{
    @Scripts.Render("~/scripts/ade")
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/ckeditor")
    <script type="text/javascript">
        var list_Items = {};
        jQuery(function () {
            list_Items = new ViewModel(
            {
                instanceName: "list_Items",
                modalId: "modalSmall",
                getDataUrl: '@Html.Raw(Url.Action("Search", "Item", new {assessmentId = Model.AssessmentId, measureId = Model.ID}))',
                addDataUrl: '@Html.Raw(Url.Action("Select", "Item", new {assessmentId = Model.ID, measureId = Model.ID}))',
                editDataUrl: '@Html.Raw(Url.Action("Edit", "Item"))',
                editType: "Redirect",
                deleteDataUrl: '@Html.Raw(Url.Action("Delete", "Item"))',
                showField: "Label",
                orderBy: "Sort",
                orderDirection: "ASC",
                pageSize: 1000,
                displayPerPageOptions: [{ text: 1000, value: 1000 }],
                searchCriteria: {
                    label: ko.observable(window.queryString("label")),
                    description: ko.observable(window.queryString("description")),
                    createdBy: ko.observable(window.queryString("createdBy")),
                    status: ko.observable(window.queryString("status", -1))
                }
            }, {
                getLinkHref: function (item) {
                    var baseUrl = "@Url.Action("Links", "Item")";
                    return baseUrl + "?id=" + item.ID;
                },
                copyItem: function (item) {
                    var copyUrl = '@Url.Action("Copy", "Item")' + "/" + item.ID + '?measureId=@(Model.ID)&returnurl=' + list_Items.getLocation();;
                    location.href = copyUrl;
                },
                getPreviewUrl: function (item) {
                    var url = '@Url.Action("Preview", "Execute",new {Area="Cpalls"})' + "?itemid=" + item.ID + '&measureId=@(Model.ID)';
                    return url;
                },   
                changeStatus: function (item) {
                    $.post('@Url.Action("ChangeItemStatus")', { id: item.ID }, function (response) {
                        if (response.success) {
                            showMessage("success");
                            list_Items.search();
                        } else {
                            showMessage("fail", response.msg);
                        }
                    }, "json");
                },
            });
            list_Items.search();
            ko.applyBindings(list_Items);
        });
    </script>
}
<div class="main-content top-form">
    <form class="form-horizontal" role="form">
        @Html.LabelFor(model => model.Label, new { @class = "control-label" })
        @Html.DisplayFor(x => x.Label)
        @ViewTextHelper.HtmlEmptySeparator
        @Html.LabelFor(model => model.Name, new { @class = "control-label" })
        @Html.DisplayFor(x => x.Name)
        @if (isCpalls)
        {
            @ViewTextHelper.HtmlEmptySeparator
            @Html.LabelFor(model => model.OrderType, new { @class = "control-label" })
            @Html.DisplayFor(x => x.OrderType)

            @ViewTextHelper.HtmlEmptySeparator
            @Html.LabelFor(model => model.ItemType, new { @class = "control-label" })
            @Html.DisplayFor(x => x.ItemType)

            @ViewTextHelper.HtmlEmptySeparator
            @Html.LabelFor(model => model.ParentId, new { @class = "control-label" })
            @Html.DisplayFor(x => x.Parent.Label)
        }
        @if (isCpalls || isCec)
        {
            @ViewTextHelper.HtmlEmptySeparator
            @Html.LabelFor(model => model.TotalScored, new { @class = "control-label" })
            @Html.DisplayFor(x => x.TotalScored)
        }

        @ViewTextHelper.HtmlEmptySeparator
        @Html.LabelFor(model => model.Status, new { @class = "control-label" })
        @Html.DisplayFor(x => x.Status)

        @if (isCpalls || isCec)
        {
            @ViewTextHelper.HtmlEmptySeparator
            @Html.LabelFor(model => model.Timeout, new { @class = "control-label" })
            @Html.DisplayFor(m => m.Timeout, new { format = "{0} seconds" })
        }
    </form>
</div>
<div class="right-content-top">
    <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"] ?? Url.Action("Detail", "Assessment", new { id = Model.AssessmentId })))">Back to Measures List</a>
    <button class="mainbutton mainright-btn create-btn" type="button" data-bind="event: { click: addData }">
        Create Item
    </button>
    <a class="mainbutton mainright-btn nav-btn" href="@Url.Action("AdjustOrder", "Item", new
                                                      {
                                                          assessmentId = Model.AssessmentId,
                                                          measureId = Model.ID,
                                                          returnurl = Server.UrlEncode(Request.RawUrl)
                                                      })" data-bind="visible: showRecords().length>0" style="display: none;">Adjust Order</a>
</div>
<div class="modal-l-b"></div>
@Html.Partial("_Partial_ItemList", new ItemListModel() { MeasureId = Model.ID })