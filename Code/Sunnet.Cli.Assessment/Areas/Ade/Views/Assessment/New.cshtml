@using Sunnet.Cli.Core.Ade
@using Sunnet.Cli.Core.Cpalls
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@model Sunnet.Cli.Business.Ade.Models.AssessmentModel

@{
    ViewBag.Title = "New Assessment";
    Layout = "~/Views/Shared/_Modal_Layout.cshtml";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var baseClassObj = new { @class = "form-control" };
}
@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    <script type="text/javascript">
        function getToFolder() {
            return "ReportCover";
        }
        +(function(){
            console.log(1);
            registerFormCallbacks("@(formId)", {
                onPosted: function(response) {
                    response.data.Status = ko.observable(response.data.Status);
                    var parentListObj = @Request.QueryString["listObj"];
                    parentListObj.onDataAdded(response);
                    closeModal($("#@(formId)"));
                }
            });
            @*var scoreModel = getAdeScoreModel([], '@formId', 'scores', 'deleted');
            scoreModel.wave1(true);
            scoreModel.wave2(true);
            scoreModel.wave3(true);
            ko.applyBindings(scoreModel, document.getElementById("@(formId)"));*@
            var benchmarkModel=getBenchmarkModel([],'@formId','adebenchmarks');
            ko.applyBindings(benchmarkModel, document.getElementById("@(formId)"));

            var uploadCover= SunnetWebUploader.CreateWebUploader({
                pick: "#btnCoverFile",
                container: "#coverlist",
                submitbutton: "#btnSubmit",
                targetField: "#ParentReportCoverPath",
                accept: {
                    extensions: "pdf",
                    mimeTypes: "application/pdf"
                }
            });
            function beforeSubmit (sender) {
                if (uploadCover.getStats().queueNum > 0) {
                    var docConfirmHtml = "<div>"
                    docConfirmHtml += "<p>Confirm Documentation Upload</p>";
                    docConfirmHtml += "<p style='font-size:16px'>You will be uploading the following item</p>";
                    var queueFiles = uploadCover.getFiles("queued");
                    for (var i = 0; i < queueFiles.length; i++) {
                        docConfirmHtml += "<p style='font-size:14px'>" + queueFiles[i].name + "(" + WebUploader.formatSize(queueFiles[i].size) + ")</p>";
                    }
                    docConfirmHtml += "<p style='font-size:16px;font-weight: bolder;'>Would you like to proceed with the document upload and assessment record creation?</p>";
                    docConfirmHtml += "</div>";
                    jQuery.when(waitingConfirm(docConfirmHtml, "Yes", "No")).done(function () {
                        $("#ParentReportCoverName").val(queueFiles[0].name + "(" + WebUploader.formatSize(queueFiles[0].size) + ")")
                        $(sender).data("clicked", true);
                        if (uploadCover.state == "ready") {
                            uploadCover.upload();
                        }
                    }).fail(function () {
                        return false;
                    });
                    return false;
                }
                if (uploadCover.getStats().progressNum > 0) {
                    return false;
                }
                $("#adebenchmarks").val(JSON.stringify(benchmarkModel.benchmarks()));
                if($('#@(formId)').valid())
                    $('#@(formId)').submit();
                return false;
            }
            $("#btnSubmit").click(function() {
                return beforeSubmit(this);
            });
        })();

        function isCpalls(type) {
            var cpallsType = "@((int)AssessmentType.Cpalls)";
            return cpallsType == type;
        }

        function changeADEType(sender) {
            if (isCpalls($(sender).val())) {
                $("#divOrder").css("display", "");
                $("#divTotal").css("display", "");
                $("#divScores").css("display", "");
                $("#divScoreItems").css("display", "");
            }
            else{
                $("#divOrder").css("display", "none");
                $("#divTotal").css("display", "none");
                $("#divScores").css("display", "none");
                $("#divScoreItems").css("display", "none");
                $("#Order1").prop("checked", true);
                $("#Language").val("1");
            }
        }


    </script>
}
@using (Ajax.BeginForm("Save", "Assessment", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        role = "form",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    @Html.Hidden("scores")
    @Html.Hidden("adebenchmarks")
    <div class="form-group">
        @Html.LabelFor(model => model.Type, new { @class = "control-label col-sm-3 required" })
        <div class="col-sm-9">
            @Html.EnumDropDownListFor(model => model.Type, ViewTextHelper.DefaultPleaseSelectText, "", new { @class = "form-control", onchange = "changeADEType(this);" })
            @Html.ValidationMessageFor(model => model.Type)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Label, new { @class = "control-label col-sm-3 required" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.Label, baseClassObj)
            @Html.ValidationMessageFor(model => model.Label)
        </div>
        @Html.LabelFor(model => model.Name, new { @class = "control-label col-sm-3 required" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.Name, baseClassObj)
            @Html.ValidationMessageFor(model => model.Name)
        </div>
    </div>
    <div class="form-group" id="divOrder">
        @Html.LabelFor(model => model.OrderType, new { @class = "control-label col-sm-3 required", @for = "OrderType_x" })
        <div class="col-sm-3">
            @Html.Hidden("OrderType_x")
            <div class="checkbox">
                @Html.RadioButtonFor(model => model.OrderType, OrderType.Sequenced, new { id = "Order1" })
                @Html.Label("", OrderType.Sequenced.ToDescription(), new { @for = "Order1" })


                @ViewTextHelper.HtmlEmptySeparator
            </div>
            <div class="checkbox">
                @Html.RadioButtonFor(model => model.OrderType, OrderType.Random, new { id = "Order2" })
                @Html.Label("", OrderType.Random.ToDescription(), new { @for = "Order2" })
            </div>
            @Html.ValidationMessageFor(model => model.OrderType)
        </div>
        @Html.LabelFor(model => model.Language, new { @class = "control-label col-sm-3 required" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(model => model.Language, ViewTextHelper.DefaultPleaseSelectText, "", baseClassObj)
            @Html.ValidationMessageFor(model => model.Language)
        </div>
    </div>
    <div class="form-group" id="divTotal">
        @Html.LabelFor(model => model.TotalScored, new { @class = "control-label col-sm-3 required" })
        <div class="col-sm-2 checkbox">
            @ViewTextHelper.HtmlEmptySeparator
            @Html.EditorFor(model => model.TotalScored)
            @Html.ValidationMessageFor(model => model.TotalScored)
        </div>
        @Html.LabelFor(model => model.ParentReportCoverPath, new { @class = "control-label col-sm-4" })
        <div class="col-sm-3">
            <div id="coverlist" class="uploader-list"></div>
            <div class="btns">
                <div id="btnCoverFile" for="ParentReportCover">Select File</div>
            </div>
            @Html.TextBoxFor(model => model.ParentReportCoverPath, new { @style = "width:0px;height:0px;" })
            @Html.LabelFor(model => model.ParentReportCoverName, new { @style = "display:none" })
            @Html.TextBoxFor(model => model.ParentReportCoverName, new { @style = "display:none" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.DisplayPercentileRank, new { @class = "control-label col-sm-3" })
        <div class="col-sm-2 checkbox">
            @ViewTextHelper.HtmlEmptySeparator
            @Html.EditorFor(model => model.DisplayPercentileRank)
        </div>
    </div>
    <div class="form-group" id="divDescription">
        @Html.LabelFor(model => model.Description, new { @class = "control-label col-sm-3 " })
        <div class="col-sm-9 ">
            @Html.TextBoxFor(model => model.Description, baseClassObj)
            @Html.ValidationMessageFor(model => model.Description)
        </div>
    </div>
    <div class="form-group" id="divScores">
        <div class="col-sm-12">
            Benchmark Labels and Colors:
        </div>
    </div>
    <div class="form-group" id="divScoreItems">
        <div id="myTabContent" class="tab-content">
            @Html.Editor("", "Benchmarks")
        </div>
    </div>
    <div class="modal-footer">
        <button class="mainbutton modal-btn submit-btn" type="button" id="btnSubmit">Submit</button>
        <button class="mainbutton modal-btn cancel-btn" type="button" data-dismiss="modal">Cancel</button>
    </div>
}
