@model Sunnet.Cli.Business.Trs.Models.TrsSchoolModel
@using System.Web.Optimization
@{
    ViewBag.Title = "Facilities";

}
@section BreadPath
{
    <a href="@(SFConfig.MainSiteDomain)Home/Dashboard">
        <img src="/images/icon_trs.png" alt="Logo" />
    </a>
    <i class="icon-angle-right"></i>Facilities
}
@section Styles
{
    @Styles.Render("~/css/assessment/offline")
}
@Html.Partial("Offline/_Partial_Reset")
@Html.Partial("Offline/_Partial_Pin")
<div class="right-content-top">
</div>
<form class="form-horizontal" role="form" id="formSearch">
    <div class="form-group">
        @Html.Label("", "LWDB", new { @class = "control-label col-sm-2", @for = "txtCommunity" })
        <div class="col-sm-3">
            @Html.TextBox("txtCommunity", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_for = "#CommunityId",
           data_remote = Url.Action("GetCommunitySelectListForSearch"),
           data_text = "Name",
           data_value = "ID",
           id = "txtCommunity",
           placeholder = "Enter key text to search",
           @for = "CommunityId",
           data_bind = "value: searchCriteria.communityName",
           data_required = "true"
       })
            @Html.Hidden("CommunityId", "", new
       {
           @class = "form-control ",
           data_bind = "value: searchCriteria.communityId"
       })
        </div>
        <label class="control-label col-sm-2" for="txtSchool">School (Facility/Operator)</label>
        <div class="col-sm-3">
            @Html.TextBox("SchoolName", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_remote = Url.Action("GetSchoolSelectList"),
           data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",
           data_text = "Name",
           data_value = "ID",
           placeholder = "Enter key text to search",
           id = "txtSchool",
           data_bind = "value: searchCriteria.schoolName",
           data_extraParams = "{\"communityId\":\"#CommunityId\"}",
           data_required = "false"
       })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("", "Director", new { @class = "control-label col-sm-2", @for = "txtDirector" })
        <div class="col-sm-3">
            <input type="text" class="form-control" id="txtDirector" data-bind="value: searchCriteria.director" />
        </div>

        <div class="col-sm-2"></div>
        <div class="col-sm-5">
            <button class="mainbutton mainright-btn search-bg-btn" type="button" data-bind="event: { click: search }">Search</button>
            @if (@ViewBag.TRSOffline)
            {
                <button id="hrefGoOffline" class=" mainbutton mainright-btn pencil-btn" type="button">
                    <i class=" icon-cloud-download"></i>
                    Offline Assessment
                </button>
                <button class="mainbutton mainright-btn pencil-btn hidden" type="button" id="btnOpenResetPin" type="button">
                    <i class="icon-key"></i>
                    Reset PIN</button>
            }

        </div>
    </div>
</form>
<div class="main-content main-content">
    <div class="content-title">Facilities</div>
    <div class="content-body-tab">
        <table class="table table-striped table-hover">
            <thead>
                <tr data-bind="foreach: { data: headers, as: 'header' }">
                    <!-- ko if: (header.order === true)-->
                    <th data-bind="style: { width: width }">
                        <a href="javascript:;" data-bind="text: text, click: $root.changeOrder"></a>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                    </th>
                    <!-- /ko-->
                    <!-- ko if: (header.order === false) -->
                    <th data-bind="text: text, style: { width: width }"></th>
                    <!-- /ko-->
                </tr>
            </thead>
            <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                <tr>
                    <td data-bind="each: item.Communities"></td>
                    <td data-bind="text: item.Name"></td>
                    @*<td data-bind="foreach: { data: item.Principals, as: 'principal' }">
                        <span data-bind="text: FullName"></span>
                        <br />
                    </td>*@
                    <td data-bind="datetime: item.ActionRequired"></td>
                    <td data-bind="text: item.Assessor.FullName"></td>
                    <td data-bind="text: item.StarStatus.text"></td>
                    <td data-bind="datetime: item.StarDesignationDate"></td>
                    <td data-bind="datetime: item.RecertificationBy"></td>
                    <td data-bind="text: item.VerifiedStar.text"></td>
                    <td>
                        @if (ViewBag.accessSchool)
                        {
                            <a class="table-btn icon-building pencil-btn" data-bind="event: { click: $root.editSchool }" href="#Edit" title="Edit School"></a>
                        }
                        @if (ViewBag.accessClass)
                        {
                            <a class="table-btn icon-bell pencil-btn" data-bind="event: { click: $root.editTrsClass }" href="#Edit" title="Edit Classes"></a>
                        }

                        <a class="tab-btn table-btn" data-bind="click: $root.viewSchool" href="#Assessment" title="Play"><span style="display: none">1</span><i class="icon-play"></i></a>
                    </td>
                </tr>
            </tbody>@Html.Display("e", "NoData", new { Colspan = 10 })
        </table>
        @Html.Partial("_Partial_Pager")
    </div>
</div>
@section Scripts
{
    @Scripts.Render("~/scripts/trs/offline")
    <script type="text/javascript">
        var list_School = {};

        $(function () {
            $("#txtCommunity").on("selected.sunnet.datalist", function (event) {
                if (!event.selected.value) {
                    list_School.searchCriteria.communityId(0);
                }
                $("#txtSchool").datalist("clear");
            });

            list_School = new ViewModel(
                {
                    instanceName: "list_School",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("Search")))',
                    orderBy: "Name",
                    orderDirection: "ASC",
                    pageSize: 10,
                    headers: [
                        {
                            text: "@Html.DisplayNameFor(model => model.Communities)",
                            field: "",
                            order: false,
                            width: '20%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Name)",
                            field: "Name",
                            order: true,
                            width: '*'
                        },
                        @*{
                            text: "@Html.DisplayNameFor(model => model.Principals)",
                            order: false,
                            width: '12%'
                        },*@
                        {
                            text: "@Html.DisplayNameFor(model => model.ActionRequired)",
                            field: "ActionRequired",//Using in search data.
                            order: true,
                            width: '12%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Assessor)",
                            field: "Assessor.LastName",
                            order: true,
                            width: '10%'
                        }, {
                            text: "@Html.DisplayNameFor(model => model.StarStatus)",
                            field: "@Html.NameFor(model => model.StarStatus)",
                            order: true,
                            width: '10%'
                        }, {
                            text: "@Html.DisplayNameFor(model => model.StarDesignationDate)",
                            field: "@Html.NameFor(model => model.StarDesignationDate)",
                            order: true,
                            width: '10%'
                        }, {
                            text: "@Html.DisplayNameFor(model => model.RecertificationBy)",
                            field: "@Html.NameFor(model => model.RecertificationBy)",
                            order: true,
                            width: '8%'
                        }, {
                            text: "@Html.DisplayNameFor(model => model.VerifiedStar)",
                            field: "@Html.NameFor(model => model.VerifiedStar)",
                            order: true,
                            width: '8%'
                        },
                        {
                            text: "Action",
                            width: '120px'
                        }
                    ],
                    searchCriteria: {
                        communityId: ko.observable(window.queryString("communityId", 0)),
                        communityName: ko.observable(window.queryString("communityName", "")),
                        schoolName: ko.observable(window.queryString("schoolName", "")),
                        schoolId: ko.observable(window.queryString("schoolId", 0)),
                        director: ko.observable(window.queryString("director", ""))
                    }
                }, {
                    viewSchool: function (school) {
                        var url = '@Url.Action("School")' + "/" + school.ID + "?returnurl=" + list_School.getLocation();;
                        location.href = url;
                    },
                    editSchool: function (school) {
                        var url = "@(Html.Raw(ViewBag.SchoolUrl))" + school.ID;
                        if (/\?/ig.test(url)) {
                            url += "&from=Trs&close=true";
                        } else {
                            url += "?from=Trs&close=true";
                        }
                        window.open(url);
                    },
                    editTrsClass: function (school) {
                        var url = "@(SFConfig.MainSiteDomain)TRSClass/TRSClass/Index?schoolid=" + school.ID + "&schoolname=" + encodeURIComponent(school.Name)
                            + "&from=Trs&close=true";
                        window.open(url);
                    }
                });
            list_School.offline = function () {
                $.get('@Url.Action("Offline")', {
                    communityId: list_School.searchCriteria.communityId(),
                    schoolName: list_School.searchCriteria.schoolName(),
                    schoolId: list_School.searchCriteria.schoolId(),
                    director: list_School.searchCriteria.director(),
                    sort: list_School.orderBy(),
                    order: list_School.orderDirection(),
                    first: list_School.showFromRecord() - 1,
                    count: list_School.showRecordsCount()
                }, function (response) {
                    location.href = "/Trs/Offline/Preparing";
                });
            };
            list_School.search();
            ko.applyBindings(list_School);


            var offlineApp = getTrsOfflineApp("@(ViewBag.EncryptUserID)");
            offlineApp.init();

            offlineApp.customOfflinePreparing = function () {
                list_School.offline();
            };

            $("#hrefGoOffline").click(function () {
                if (offlineApp.status === offlineApp.values.Status.Changed) {
                    $.when(window.waitingConfirm("confirm_To_Offline_Changed", "Go to Offline", "Cancel")).done(function () {
                        location.href = "/Trs/Offline";
                    });
                } else {
                    offlineApp.showLocker();
                }
                return false;
            });

            if (offlineApp.status === offlineApp.values.Status.None) {
                $("#btnOpenResetPin").remove();
            } else {
                $("#btnOpenResetPin").removeClass("hidden").click(function () {
                    offlineApp.resetPin();
                });
            }
        });
    </script>
}
