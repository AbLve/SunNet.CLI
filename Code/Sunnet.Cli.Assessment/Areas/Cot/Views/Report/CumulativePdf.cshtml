@using Sunnet.Cli.Business.Cot.Cumulative
@{
    ViewBag.Title = "Preview";
    Layout = "~/Areas/Cot/Views/Shared/_Layout_Report_Chart.cshtml";
    var models = ViewBag.Model as List<ReportModel>;
    var isFirstTeacher = true;
    var index = 0;
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}
@foreach (var model in models)
{
    foreach (var measure in model.Measures)
    {
        <table class='header @(isFirstTeacher ? "" : "newpager") ' width="100%">
            @Html.Partial("_Partial_CumulativeReport_Head", model, new ViewDataDictionary { new KeyValuePair<string, object>("measureName", measure.Name) })
        </table>
        <div id="chart@(index++)" style="width: @ReportHelper.GetChartWidth(measure.Items.Count() + 2, 40,800,3250)px;height:520px;">
        </div>
            @*<div id="chart@(index++)" style="width: 100%;height:520px;">
                </div>*@
            <table class='header newpager' width="100%">
                @Html.Partial("_Partial_CumulativeReport_Head", model, new ViewDataDictionary { new KeyValuePair<string, object>("measureName", measure.Name) })
            </table>
            <table cellpadding="0" cellspacing="0" class="report-data table_border" style="text-align:center; margin-bottom:50px" width="50%">
                <thead style="page-break-inside: avoid">
                    <tr>
                        <th colspan="5">Possible Goals</th>
                    </tr>
                    <tr>
                        <th width="30%">Item</th>
                        <th width="10%">Status</th>
                        <th width="20%">Date</th>
                        <th width="20%">Level Number</th>
                        <th width="30%">Resource</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in measure.Items.Where(i => !i.IsFillColor))
                    {
                        <tr>
                            <td>@item.Description</td>
                            <td>@(item.IsSet ? "Set" : "Not Set")</td>
                            <td>@(item.IsSet ? item.SetDate.ToString("MM/dd/yyyy") : "")</td>
                            <td>@item.Level.GetValue()</td>
                            <td>
                                @if (item.Links != null)
                        {
                            foreach (var link in item.Links)
                            {
                                        <a href="@(link.Link)" target="_blank">@(link.DisplayText)</a>
                                        <br />
                                    }
                                }
                            </td>
                        </tr>
                    }
                    @if (measure.Items.Count(i => !i.IsFillColor) == 0)
                    {
                        <tr>
                            <td colspan="5">No Data</td>
                        </tr>
                    }
                </tbody>
            </table>
        {
            isFirstTeacher = false;
        }
    }
}

@using (Html.BeginForm("CumulativePdf_Download", "Report", FormMethod.Post, new { id = formId, target = "_blank" }))
            {
    @Html.Hidden("teacherId")
    @Html.Hidden("assessmentId")
    @Html.Hidden("year")
    @Html.Hidden("type")
    @Html.Hidden("SchoolId")
    @Html.Hidden("CommunityId")
    @Html.Hidden("measures")
    @Html.Hidden("export", true)
    <button type="submit" class="btn-export" id="btn_Export" onclick="javascript:return exportPdf();">
        Export
    </button>
}
@section Scripts{
    @Scripts.Render("~/scripts/chart")
    @Scripts.Render("~/scripts/report/assessment")
    <script type="text/javascript">
    var reports = @Html.Raw(ViewBag.Json);
    var charts = [];
    var options = [];
    var currentIndex = 0;
    function exportPdf() {
        var $form = $("#@(formId)");
            $form.find("input:hidden[name='imgSources']").remove();
            if (charts && charts.length) {
                for (var i = 0; i < charts.length; i++) {
                    var myChart = charts[i];
                    var options = myChart.getOption();
                    options.toolbox.feature.magicType.show = false;
                    options.toolbox.feature.dataZoom.show = false;
                    options.toolbox.feature.restore.show = false;
                    myChart.setOption(options);
                    var $imgSources = $('<input name="imgSources" type="hidden" value="" />').appendTo($form);
                    $imgSources.val(myChart.getDataURL());

                    options.toolbox.feature.magicType.show = true;
                    options.toolbox.feature.dataZoom.show = true;
                    options.toolbox.feature.restore.show = true;
                    myChart.setOption(options);
                }
            }
            return true;
        }

        var totalOfMeasure = {};
        $(function() {
            function startGenerateReport() {
                if (options.length > currentIndex) {
                    window.scrollTo(0, $("#chart" + currentIndex).offset().top);

                    var option = options[currentIndex];
                    var myChart = echarts.init(document.getElementById('chart' + index++), echartsTheme.default);
                    myChart.setOption(option);
                    charts.push(myChart);
                    currentIndex++;
                    setTimeout(function() {
                        startGenerateReport();
                    }, 1000);
                } else {
                    setTimeout(function() {
                        $("#btn_Export").slideDown();
                    }, 1000);
                }
            }

            //var totalWidth = window.innerWidth - 250;
            var totalWidth = 3200;
            var maxItemCount = 0;
            var barWidth = 40;
            for (var i = 0; i < reports.length; i++) {
                var r = reports[i];
                for (var j = 0; j < r.Measures.length; j++) {
                    var m = r.Measures[j];
                    if (m.Items.length > maxItemCount) {
                        maxItemCount = m.Items.length;
                    }
                }
            }
            var calcbarWidth = parseInt(totalWidth / maxItemCount);
            if (calcbarWidth < barWidth) {
                barWidth = calcbarWidth;
            }

            var index = 0;
            var lastLevel = 0;
            for (var i = 0; i < reports.length; i++) {
                var report = reports[i];

                for (var j = 0; j < report.Measures.length; j++) {
                    var measure = report.Measures[j];
                    var option = new ReportOption();
                    option.title = {
                        text: "@(ReportHelper.GetReportTitle(AssessmentType.Cot, ViewBag.AssessmentName))",
                        subtext: report.Teacher,
                        textAlign: "left",
                        x: 0,
                        y: 0
                    };

                    option.tooltip.show = false;
                    option.toolbox.feature.magicType.type = [];

                    var legendTitle = "Item";
                    option.legend.data.push(legendTitle);
                    option.legend.x = 10350; // hide legend
                    option.legend.show = false;

                    option.series.push({
                        name: legendTitle,
                        type: 'bar',
                        stack: legendTitle,
                        data: [],
                        barWidth: barWidth
                    });


                    //option.xAxis = option.xAxis.slice(0, 1);
                    option.xAxis[0].axisLabel.rotate = 90;
                    option.xAxis[0].axisLabel.formatter = function(value) {
                        return value.toString();
                    };
                    option.xAxis[0].axisTick = {
                        show: true,
                        length:5,
                        lineStyle: {
                            type: 'dashed'
                        }
                    };
                    var xAxis = option.xAxis[0].data;
                    var xAxis1 = option.xAxis[1].data;
                    if (measure.Items.length) {
                        for (var itemIndex = 0; itemIndex < measure.Items.length; itemIndex++) {
                            var item = measure.Items[itemIndex];
                            if (lastLevel == 0) {
                                lastLevel = item.Level.value;
                            }
                            //if (lastLevel != item.Level.value) {
                            //    xAxis1.push("");
                            //    xAxis.push("");
                            //    option.series[0].data.push(
                            //    {
                            //        value: 1,
                            //        itemStyle: { normal: { color: "#bbb" } }
                            //    });
                            //}
                            xAxis.push(item.Description);

                            var borderColor = "#CC0099";
                            if (item.Level.value == 2) {
                                borderColor = "#8EAADC";
                            } else if (item.Level.value == 3) {
                                borderColor = "#92D050";
                            }
                            option.series[0].data.push(
                            {
                                value: 1,
                                itemStyle: {
                                    normal: {
                                        color: item.IsFillColor ? item.Level.text : "#fff",
                                        barBorderColor: item.IsFillColor ? "#000":borderColor,
                                        barBorderWidth: 1
                                    }
                                }
                            });
                            lastLevel = item.Level.value;
                            xAxis1.push("");
                        }
                    } else {
                        xAxis.push("");
                        xAxis1.push("");
                        option.series[0].data.push(0);
                    }

                    option.xAxis[0].axisLine = {
                        lineStyle: {
                            color: '#000',
                            width: 1,
                            type: 'solid'
                        }
                    };

                    option.xAxis[1].axisLine = {
                        lineStyle: {
                            color: '#000',
                            width: 1,
                            type: 'solid'
                        }
                    };
                    option.xAxis[1].axisTick = { show: false };
                    option.xAxis[1].axisLabel = { show: false };

                    option.yAxis = [
                        {
                            type: 'value',
                            name: "Obs/Met",
                            min: 0,
                            max: 1,
                            axisLabel: {
                                show: false
                            },
                            axisLine: {
                                show: true,
                                lineStyle: {
                                    color: '#000',
                                    width: 1,
                                    type: 'solid'
                                }
                            },
                            axisTick: {}
                        },
                        {
                            type: 'value',
                            name: '',
                            min: 0,
                            max: 1,
                            axisLabel: {
                                show: false
                            },
                            axisLine: {
                                show: true,
                                lineStyle: {
                                    color: '#000',
                                    width: 1,
                                    type: 'solid'
                                }
                            },
                            axisTick: {}
                        }
                    ];
                    option.grid.width = barWidth;
                    option.grid.height = 150;
                    option.grid.width = xAxis.length * option.grid.width;
                    //option.grid.y = 150;

                    options.push(option);

                    lastLevel = 0;
                }
            }
            startGenerateReport();
        });
    </script>
}
