@{
    ViewBag.Title = "Class View";
    string formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var baseClassObj = new { @class = "form-control" };
    CpallsSchoolModel schoolModel = ViewBag.SchoolModel;
    var districtId = 0;
    int.TryParse(Request.QueryString["communityId"], out districtId);
    string backUrl = Url.Action("Index", "School", new
    {
        assessmentId = Request.QueryString["assessmentId"],
        wave = ViewBag.Wave,
        communityId = districtId,
        communityName = Request.QueryString["communityName"]
    });
    int leftWidth = 210;
    ViewBag.LeftWidth = leftWidth;// Partial
    ViewBag.Target = "Class";
    var childrenMeasures = ViewBag.MeasureList as List<MeasureHeaderModel>;
    var topHeight = childrenMeasures != null && childrenMeasures.Any(x => x.ParentId > 1) ? 160 : 130;
}
@section LeftMenu
{
    @Html.Partial("_Partial_Left_Cpalls")
}
@section BreadPath
{
    <a href="/">@(ViewBag.AssessmentName)</a>
    @if (ViewBag.ShowSchoolback)
    {
        <i class="icon-angle-right"></i>
        <a href="@backUrl">School View</a>
    }
    <i class="icon-angle-right"></i>Class View
}
@section Styles{
    <style type="text/css">
        .fixed-header {
            margin-left: 224px;
        }
        .fixed-column-title div {
            top: @(topHeight-25)px;
        }
        .main-content, .right-content-top {
            margin-top: 5px;
        }
        .modal-l-b {
            margin: 5px 0;
        }
        .form-horizontal .control-label {
            padding-right: 5px;
        }
        .form-group > div{
            padding-left: 5px;
        }
    </style>
}
<div class="main-content top-form">
    <form class="form-horizontal" role="form">
        <label class="control-label" for="Name">Community/District</label>
        @Html.DisplayFor(x => schoolModel.CommunitiesText)
        @ViewTextHelper.HtmlEmptySeparator
        <label class="control-label" for="Name">School</label>
        @Html.DisplayFor(x => schoolModel.Name)
    </form>
</div>

<div class="right-content-top">

    <div class="btn-group">
        @if (ViewBag.ShowSchoolback)
        {
            <a type="button" class="mainbutton mainright-btn nav-btn" href="@backUrl">
                <i class=" icon-double-angle-left"></i>
                School View
            </a>
        }
    </div>
    <div class="btn-group">
        <button type="button" class="mainbutton mainright-btn create-btn dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <i class="icon-bar-chart"></i>
Reports <span class="caret"></span>
        </button>
        @if (ViewBag.SchoolId > 0)
        {
            <ul class="dropdown-menu">
                <li><a href="javascript:void(0);" data-bind="click:completion_report">School Completion Report</a></li>
                <li>
                    @Html.ActionLink("School Summary Report", "Summary", "Class",
            new
            {
                Area = "Report",
                assessmentId = ViewBag.AssessmentId,
                year = ViewBag.Year,
                schoolId = ViewBag.SchoolId,
                school = schoolModel.Name
            },
            new
            {
                data_toggle = "modal",
                data_target = "#modalNormal",
                data_confirm = "false"
            })
                </li>
                <li>
                    @Html.ActionLink("School Growth Report", "Growth", "Class", new
        {
            Area = "Report",
            assessmentId = ViewBag.AssessmentId,
            year = ViewBag.Year,
            schoolId = ViewBag.SchoolId,
            districtId = districtId,
            school = schoolModel.Name
        }, new
        {
            data_toggle = "modal",
            data_target = "#modalNormal",
            data_confirm = "false"
        })
                </li>
                @if (ViewBag.Debug)
                {
                    <li><a href="javascript:void(0);" data-bind="click:comparison_report">School Comparison of Growth</a></li>
                }
                else
                {
                    <li><a href="javascript:void(0);" onclick=" alert('Coming soon.'); ">School Comparison of Growth</a></li>
                }
            </ul>
        }
    </div>
    <div class="btn-group">
        @if (ViewBag.HasAnotherVersion)
        {
            <a class="mainbutton mainright-btn nav-btn "
               href='@(Html.Raw(Url.Action("Index", "Class", new
                       {
                           assessmentId = ViewBag.OtherAssessmentId,
                           schoolId = Request.QueryString["schoolId"],
                           year = Request.QueryString["year"]
                       })))'>
                <i class="icon-exchange"></i>
                @(ViewData["OtherVersion"].ToString())
            </a>
        }
    </div>
</div>

<div class="modal-l-b"></div>
<form class="form-horizontal" role="form" id="formSearch">
    <div class="form-group">
        @Html.Label("txtSchool", "School", new { @class = "control-label col-sm-1" })
        <div class="col-sm-2">
            @Html.TextBox("txtSchool", @schoolModel.Name, new
            {
                autocomplete = "off",
                @class = "form-control",
                data_list = "true",
                data_for = "#SchoolId",
                data_remote = Url.Action("GetSchoolSelectList", "School"),
                data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",
                data_text = "Name",
                data_value = "ID",
                id = "txtSchool",
                placeholder = "Enter key text to search",
                @for = "SchoolId",
                data_extraParams = "{\"communityId\":\"#CommunityId\",\"isActive\":\"#isActive\"}",
                data_bind = "value:searchCriteria.schoolName"
            })
            <input class="form-control" data-bind="value: searchCriteria.schoolId" data-val="true" data-val-number="The field SchoolId must be a number." data-val-required="The SchoolId field is required." id="SchoolId" name="SchoolId" type="hidden" value="-1">
            <input id="isActive" name="isActive" type="hidden" value="False">
        </div>
        <label class="control-label col-sm-1" for="classname">Class</label>
        <div class="col-sm-2">
            <input type="text" class="form-control" name="classname" id="classname" placeholder="Enter Class Name" data-bind="value: searchCriteria.classname" />
        </div>
        <label class="control-label col-sm-1" for="year">Year</label>
        <div class="col-sm-1">
            @Html.DropDownList("year", (IEnumerable<SelectListItem>)ViewBag.YearOptions, new { @class = "form-control", data_bind = "value: searchCriteria.year" })
        </div>
        <label class="control-label col-sm-1" for="wave">Wave</label>
        <div class="col-sm-1">
            @Html.DropDownList("wave", (IEnumerable<SelectListItem>)ViewBag.WaveOptions, new { @class = "form-control", data_bind = "value: searchCriteria.wave" })
        </div>
        <div class="col-sm-1">
            <button class="mainbutton mainright-btn sreach-btn" type="button" data-bind="event: { click: customSearch }">Search</button>
        </div>
    </div>
</form>
<div class="modal-l-b"></div>

<div class="main-content">
    <div class="content-body-tab" id="div_tableWidth">
        @if (ViewBag.HaveMeasure)
        {
            <div id="fixed_header_container" class="fixed-header-container">
                <div class="fixed-header">
                    <table class="table table-striped table-hover">
                        @Html.Partial("_Partial_Measure_Header")
                    </table>
                </div>
            </div>
            <div class="fixed-columns-container">
                <div class="fixed-columns-overflow" id="fixed_container" style="margin-left: @(leftWidth)px">
                    <table class="table table-striped table-hover">
                        @Html.Partial("_Partial_Measure_Header")
                        <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                            <tr>
                                <td class="fixed-column">
                                    <div style="width: @(leftWidth)px" data-bind="style:{top:@(topHeight)+$index()*35 + 'px'}">
                                        <a data-title-length="20" data-bind="attr:{href:$root.getCreateUrl(item)} ,title:item.Name" class="form-link"></a>
                                    </div>
                                </td>
                                <!--ko template:{foreach:$root.measures,as:'measure',name:'_td_average'}-->
                                <!--/ko-->
                                <th style="width: 100%">&nbsp;</th>
                            </tr>
                        </tbody>
                        @Html.Display("e", "NoData", new { Colspan = 2 + ((List<MeasureHeaderModel>)ViewBag.MeasureList).Count })
                    </table>
                </div>
            </div>
        }
        else
        {
            <h2>@ViewTextHelper.NoRecordFound</h2>
        }
    </div>
    @Html.Partial("_Partial_Pager")

</div>
<script type="text/html" id="_td_average">
    <!-- ko if: (measure.ParentId == 1 || $root.parentMeasure[measure.ParentId].visible()) && measure.MeasureId >0 && measure.ParentId != measure.MeasureId-->
    <td data-bind="text: $parent.DicMeasure != null && $parent.DicMeasure[measure.MeasureId] ? $parent.DicMeasure[measure.MeasureId].Average : '-',css:{'measure-split-line-left':measure.IsFirstOfParent,'measure-split-line-bottom':measure.ParentId>1 }"></td>
    <!-- /ko -->
    <!-- ko if: measure.ParentId == measure.MeasureId && measure.MeasureId >0 -->
    <td class="measure-split-line-right" data-bind="text: $parent.DicMeasure != null && $parent.DicMeasure[measure.MeasureId] ? $parent.DicMeasure[measure.MeasureId].Average : '-',css:{'measure-split-line-left': (measure.IsLastOfParent && $root.parentMeasure[measure.ParentId].visible() == false),'measure-split-line-bottom':measure.ParentId>1}"></td>
    <!-- /ko -->
</script>

@section Scripts
{
    @Scripts.Render("~/scripts/ade")
    @if (ViewBag.Mobile)
    {
        @Scripts.Render("~/scripts/hammer")
    }
    <script type="text/javascript">
        var list_Assessment = {};

        jQuery(function() {

            var $fixedHeaderContainer = $("#fixed_header_container");
            var $container = $("#div_tableWidth");
            var adjustHeight = 0;
            $(window).on("scroll", function(event) {
                // show float header when scroll to bottom
                var limit = $container[0].getBoundingClientRect().top;
                var top = limit + adjustHeight;
                if (top <= 0) {
                    $fixedHeaderContainer.show();
                } else {
                    $fixedHeaderContainer.hide();
                }
            }).trigger("scroll");
            var $fixed_container = $("#fixed_container");
            var $fixed_header = $fixedHeaderContainer.find("table");
            var initLeftMargin = 0 - parseInt($fixed_header.css("margin-left"));
            $fixed_container.on("scroll", function() {
                // sync float header when scroll table body
                var newLeftMargin = initLeftMargin - $fixed_container.scrollLeft();
                $fixed_header.css("margin-left", newLeftMargin);
            });

            $(window).resize(function() {
                var adjust = 0;
                $fixedHeaderContainer.width($container.width() + adjust);
            }).trigger("resize");

            var startX;
            var newX;
            if (typeof Hammer === "function" && $.fn.hammer) {
                $fixedHeaderContainer.hammer().bind("panstart", function() {
                    startX = parseInt("" + $fixed_header.css("margin-left"), 10);
                }).bind("panleft panright", function(event) {
                    newX = startX + event.gesture.deltaX;
                    var hammer = $fixedHeaderContainer.data("hammer");
                    if (newX > 0) {
                        newX = 0;
                        hammer && hammer.stop();
                    }
                    $fixed_container.scrollLeft(Math.abs(newX));
                    var realNewX = $fixed_container.scrollLeft();
                    if (realNewX < Math.abs(newX)) {
                        newX = 0 - realNewX;
                        hammer && hammer.stop();
                    }
                    $fixed_header.css("margin-left", newX);
                }).bind("panend", function(event) {
                    startX = newX;
                });
            }

            list_Assessment = new ViewModel(
                {
                    instanceName: "list_Assessment",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("Search")))',
                    orderBy: "Name",
                    orderDirection: "ASC",
                    pageSize: 20,
                    searchCriteria: {
                        assessmentId: ko.observable(window.queryString("assessmentId", @ViewBag.AssessmentId)),
                        year: ko.observable(window.queryString("year", @ViewBag.Year)),
                        wave: ko.observable(window.queryString("wave", @ViewBag.Wave)),
                        classname: ko.observable(window.queryString("classname")),
                        schoolName: ko.observable(window.queryString("schoolName", "@(Html.Raw(ViewBag.SchoolName))")),
                        schoolId: ko.observable(window.queryString("schoolId", @ViewBag.SchoolId))
                    }
                },
                {
                    getCreateUrl: function(item) {
                        return '@(Html.Raw(Url.Action("Index", "Student", new
                                {
                                    schoolId = ViewBag.SchoolId,
                                    communityId = Request.QueryString["communityId"],
                                    communityName = Request.QueryString["communityName"]
                                })))&classId=' + item.ID + "&assessmentId=@(ViewBag.AssessmentId)&year=" + list_Assessment.searchCriteria.year()
                            + "&wave=" + list_Assessment.searchCriteria.wave();
                    },

                    customSearch: function() {
                        if ('@(ViewBag.Year)' == list_Assessment.searchCriteria.year()
                            && '@(ViewBag.Wave)' == list_Assessment.searchCriteria.wave())
                            list_Assessment.search();
                        else
                            location.href = "?schoolId=@(ViewBag.SchoolId)&assessmentId=@(ViewBag.AssessmentId)&year=" + list_Assessment.searchCriteria.year()
                                + "&wave=" + list_Assessment.searchCriteria.wave();
                    },
                    collapse: function(measureId) {
                        if (list_Assessment.parentMeasure[measureId]) {
                            if (list_Assessment.parentMeasure[measureId].visible()) {

                                list_Assessment.parentMeasure[measureId].visible(false);
                                list_Assessment.parentMeasure[measureId].colspan(1);
                            } else {
                                list_Assessment.parentMeasure[measureId].visible(true);
                                list_Assessment.parentMeasure[measureId].colspan(list_Assessment.parentMeasure[measureId]._colspan);
                            }
                            list_Assessment.parentMeasure[measureId].name(list_Assessment.parentMeasure[measureId].name());
                        }
                    },
                    completion_report: function() {
                        if (list_Assessment.searchCriteria.schoolId() > 0) {
                            $("#modalNormal").modal({
                                remote: '@Url.Action("Completion", "Class", new {Area = "Report", assessmentId = ViewBag.AssessmentId})'
                                    + '&year=' + list_Assessment.searchCriteria.year()
                                    + "&schoolId=" + list_Assessment.searchCriteria.schoolId(),
                                confirm: false
                            });
                        } else {
                            var school = $("#txtSchool");
                            showMessage("hint", "Cpalls_Report_need_SchoolId");
                            school.focus();
                        }
                    },
                    comparison_report: function() {
                        if (list_Assessment.searchCriteria.schoolId() > 0) {
                            $("#modalNormal").modal({
                                remote: '@Url.Action("Comparison", "Class", new {Area = "Report", assessmentId = ViewBag.AssessmentId})'
                                    + "&schoolId=" + list_Assessment.searchCriteria.schoolId(),
                                confirm: false
                            });
                        } else {
                            var school = $("#txtSchool");
                            showMessage("hint", "Cpalls_Report_need_SchoolId");
                            school.focus();
                        }
                    }
                }
            );
            list_Assessment["measures"] = @(Html.Raw(ViewBag.Measures));
            list_Assessment.parentMeasure = ParentMeasures(@Html.Raw(ViewBag.Parents));
            list_Assessment.search();
            ko.applyBindings(list_Assessment);

            $("th[isparent]").each(function() {
                var $this = $(this);
                var $table = $this.closest("table");
                //tab-td-b-l
                var $childMeasures = $table.find("th[parent=" + $this.attr("val") + "]");
                $childMeasures.first().addClass("tab-td-b-l");
                $childMeasures.last().next().addClass("tab-td-b-l");
            });

            $("#txtSchool").on("selected.sunnet.datalist", function(event) {
                if (event.selected.value != "") {
                    location.href = "?schoolId=" + event.selected.value + "&assessmentId=@(ViewBag.AssessmentId)&year=" + list_Assessment.searchCriteria.year()
                        + "&wave=" + list_Assessment.searchCriteria.wave();
                } else {
                    var schoolId = @(Request.QueryString["schoolId"]);
                    list_Assessment.searchCriteria.schoolName("@(Html.Raw(ViewBag.SchoolName))");  //schoolModel.Name
                    list_Assessment.searchCriteria.schoolId(schoolId);
                }
            });
        });

    </script>
}