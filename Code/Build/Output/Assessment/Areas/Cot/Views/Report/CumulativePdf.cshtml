@using Sunnet.Cli.Business.Cot.Cumulative
@{
    ViewBag.Title = "Preview";
    Layout = "~/Areas/Cot/Views/Shared/_Layout_Report_Chart.cshtml";
    var models = ViewBag.Model as List<ReportModel>;
    var isFirstTeacher = true;
    var index = 0;
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}
@foreach (var model in models)
{
    foreach (var measure in model.Measures)
    {
        <table class='header @(isFirstTeacher ? "" : "newpager") ' width="100%">
            <thead>
                <tr>
                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>

                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>

                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>
                    <td style="width: 90px;"></td>
                </tr>
                <tr>
                    <td colspan="4">
                        &nbsp;
                    </td>
                    <th class="title" style="vertical-align: middle;" colspan="4">
                        @(ReportHelper.GetReportTitle(AssessmentType.Cot, ViewBag.AssessmentName))<br />
                        @(model.Type.ToDescription())
                    </th>
                    <td colspan="4" style="text-align:right;" rowspan="2">
                        <img src="@(SFConfig.AssessmentDomain)/Resources/cli_logo.png" alt="CLI logo" style="width:150px;" />
                    </td>
                </tr>
                <tr>
                    <td colspan="4">&nbsp;</td>
                    <th class="title" colspan="4">
                        @(measure.Name)
                        <br />
                        @(model.Type.GetDisplayName())
                    </th>
                </tr>
                <tr>
                    <td colspan="7">
                        @Html.DisplayNameFor(x => model.Community):
                        &nbsp;@(model.Community)
                    </td>
                    <td colspan="2"></td>
                    <td colspan="3">
                        @Html.DisplayNameFor(x => model.Teacher):
                        &nbsp;@(model.Teacher)
                    </td>
                </tr>
                <tr>
                    <td colspan="6">
                        @Html.DisplayNameFor(x => model.School):
                        &nbsp;@(model.School)
                    </td>
                    <td></td>
                    <td colspan="2"></td>
                    <td colspan="3">
                        @Html.DisplayNameFor(x => model.Mentor):
                        &nbsp;@(model.Mentor)
                    </td>
                </tr>
                <tr>
                    <td colspan="6">
                        @Html.DisplayNameFor(x => model.SchoolYear):
                        &nbsp;@(model.FullSchoolYear)
                    </td>
                    <td></td>
                    <td colspan="2"></td>
                    <td colspan="3">
                        @Html.DisplayNameFor(x => model.BoyDate):
                        &nbsp;@(model.BoyDate.FormatDateString())
                    </td>
                </tr>
                <tr>
                    <td colspan="6"></td>
                    <td></td>
                    <td colspan="2"></td>
                    <td colspan="3">
                        @Html.DisplayNameFor(x => model.MoyDate):
                        &nbsp;@(model.MoyDate.FormatDateString())
                    </td>
                </tr>
                <tr>
                    <td colspan="6"></td>
                    <td></td>
                    <td colspan="2"></td>
                    <td colspan="3">
                        @Html.DisplayNameFor(x => model.MetDate):
                        &nbsp;@(model.MetDate.FormatDateString())
                    </td>
                </tr>
            </thead>
        </table>
        <div id="chart@(index++)" style="width: @ReportHelper.GetChartWidth(measure.Items.Count() + 2, 50, 100, 1200)px;height:520px;">
        </div>
        {
            isFirstTeacher = false;
        }
    }
}

@using (Html.BeginForm("CumulativePdf_Download", "Report", FormMethod.Post, new { id = formId, target = "_blank" }))
{
    @Html.Hidden("teacherId")
    @Html.Hidden("assessmentId")
    @Html.Hidden("year")
    @Html.Hidden("type")
    @Html.Hidden("SchoolId")
    @Html.Hidden("CommunityId")
    @Html.Hidden("measures")
    @Html.Hidden("export", true)
    <button type="submit" class="btn-export" id="btn_Export" onclick="javascript:return exportPdf();">
        Export
    </button>
}
@section Scripts{
    @Scripts.Render("~/scripts/chart")
    @Scripts.Render("~/scripts/report/assessment")
    <script type="text/javascript">
    var reports = @Html.Raw(ViewBag.Json);
    var charts = [];
    var options = [];
    var currentIndex = 0;
    function exportPdf() {
        var $form = $("#@(formId)");
            $form.find("input:hidden[name='imgSources']").remove();
            if (charts && charts.length) {
                for (var i = 0; i < charts.length; i++) {
                    var myChart = charts[i];
                    var options = myChart.getOption();
                    options.toolbox.feature.magicType.show = false;
                    options.toolbox.feature.dataZoom.show = false;
                    options.toolbox.feature.restore.show = false;
                    myChart.setOption(options);
                    var $imgSources = $('<input name="imgSources" type="hidden" value="" />').appendTo($form);
                    $imgSources.val(myChart.getDataURL());

                    options.toolbox.feature.magicType.show = true;
                    options.toolbox.feature.dataZoom.show = true;
                    options.toolbox.feature.restore.show = true;
                    myChart.setOption(options);
                }
            }
            return true;
        }

        var totalOfMeasure = {};
        $(function() {
            function startGenerateReport() {
                if (options.length > currentIndex) {
                    window.scrollTo(0, $("#chart" + currentIndex).offset().top);

                    var option = options[currentIndex];
                    var myChart = echarts.init(document.getElementById('chart' + index++), echartsTheme.default);
                    myChart.setOption(option);
                    charts.push(myChart);
                    currentIndex++;
                    setTimeout(function() {
                        startGenerateReport();
                    }, 1000);
                } else {
                    setTimeout(function() {
                        $("#btn_Export").slideDown();
                    }, 1000);
                }
            }

            var index = 0;
            var lastLevel = 0;
            for (var i = 0; i < reports.length; i++) {
                var report = reports[i];

                for (var j = 0; j < report.Measures.length; j++) {
                    var measure = report.Measures[j];
                    var option = new ReportOption();
                    option.title = {
                        text: "@(ReportHelper.GetReportTitle(AssessmentType.Cot, ViewBag.AssessmentName))",
                        subtext: report.Teacher,
                        textAlign: "left",
                        x: 0,
                        y: 0
                    };

                    option.tooltip.show = false;
                    option.toolbox.feature.magicType.type = [];

                    var legendTitle = "Item";
                    option.legend.data.push(legendTitle);
                    option.legend.x = 10350; // hide legend
                    option.legend.show = false;

                    option.series.push({
                        name: legendTitle,
                        type: 'bar',
                        stack: legendTitle,
                        data: [],
                        barWidth: 30
                    });


                    option.xAxis = option.xAxis.slice(0, 1);
                    option.xAxis[0].axisLabel.rotate = 0;
                    option.xAxis[0].axisLabel.formatter = function(value) {
                        return value.toString().split('').join("\n");
                    };
                    var xAxis = option.xAxis[0].data;
                    if(measure.Items.length){
                        for (var itemIndex = 0; itemIndex < measure.Items.length; itemIndex++) {
                            var item = measure.Items[itemIndex];
                            if (lastLevel == 0) {
                                lastLevel = item.Level.value;
                            }
                            if (lastLevel != item.Level.value) {
                                xAxis.push("");
                                option.series[0].data.push(
                                {
                                    value: 1,
                                    itemStyle: { normal: { color: "#bbbbbb" } }
                                });
                            }
                            xAxis.push(item.CotItemNo);
                            option.series[0].data.push(
                            {
                                value: item.Count,
                                itemStyle: { normal: { color: item.Level.text } }
                            });
                            lastLevel = item.Level.value;
                        }
                    } else {
                        xAxis.push("");
                        option.series[0].data.push(0);
                    }
                    option.yAxis[0].name = "Obs/Met";
                    option.yAxis[0].max = 1;
                    option.yAxis[0].min = 0;
                    option.yAxis[0].axisLabel = { show: false };
                    option.yAxis[0].axisLine = {
                        show: true
                    };
                    option.grid.width = 50;
                    option.grid.height = 100;
                    option.grid.width = xAxis.length * option.grid.width;
                    option.grid.y = 150;

                    options.push(option);

                    lastLevel = 0;
                }
            }
            startGenerateReport();
        });
    </script>
}