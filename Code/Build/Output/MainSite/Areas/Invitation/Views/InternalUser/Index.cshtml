@model Sunnet.Cli.Business.Users.Models.UserModel
@using Sunnet.Cli.MainSite.Models
@using Sunnet.Framework.Extensions
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Cli.Core.Users.Enums
@{
    ViewBag.Title = "Search for CLI Users";
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.CLIUser)
}
@section BreadPath
{
    @(Html.ActionLink("CLI User Management", "Index", "InternalUser")) <i class="icon-angle-right"></i>User List
}
@if (ViewBag.accessAdd)
{ 
    <div class="right-content-top">
        <button type="button" class="mainbutton mainright-btn create-btn" data-bind="click: $root.addData">Add User</button>
    </div>
}
<div class="modal-l-b"></div>
<form class="form-horizontal" role="form" id="formSearch">
    <div class="form-group">
        @Html.LabelFor(m => m.Keyword, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.Keyword, new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.keyword"
            })
        </div>
        @Html.LabelFor(m => m.Type, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(x => x.Type, ViewTextHelper.DefaultAllText, "-1", new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.roleId"
            })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Status, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(x => x.Status, ViewTextHelper.DefaultAllText, "-1", new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.status"
            })
        </div>
        <div class="col-sm-2"></div>
        <div class="col-sm-2">
            <button class="mainbutton mainright-btn sreach-btn" type="button" data-bind="event: { click: search }">Search</button>
        </div>
    </div>
</form>
<div class="main-content main-content">
    <div class="content-title">Users</div>
    <div class="content-body-tab">
        <table class="table table-striped table-hover">
            <thead>
                <tr data-bind="foreach: { data: headers, as: 'header' }">
                    <!-- ko if: (header.order === true)-->
                    <th data-bind="style: { width: width }">
                        <a href="javascript:;" data-bind="text: text, click: $root.changeOrder"></a>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                    </th>
                    <!-- /ko-->
                    <!-- ko if: (header.order === false) -->
                    <th data-bind="text: text, style: { width: width }"></th>
                    <!-- /ko-->
                </tr>
            </thead>
            <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                <tr>
                    <td data-bind="text: item.GoogleId"></td>
                    <td data-bind="text: item.FirstName"></td>
                    <td data-bind="text: item.LastName"></td>
                    <td data-bind="text: item.Type.text"></td>
                    <td data-bind="text: item.Email"></td>
                    <td data-bind="text: item.Status.text"></td>
                    <td align="left" style="padding-left: 10px;">
                        @if (ViewBag.accessView)
                        {
                            <a class="table-btn icon-folder-open view-btn" data-bind="event: { click: $root.onDataViewed }" href="#" title="View"></a>                       
                        }
                        @if (ViewBag.accessEdit)
                        {
                            <a class="table-btn icon-pencil pencil-btn" data-bind="event: { click: $root.onDataUpdated }" href="#" title="Edit"></a>
                        }
                        @if (ViewBag.accessEquipment)
                        {
                            <a class="table-btn icon-desktop equipment-btn" data-bind='attr: { href: $root.equipmentData(item) }, visible: $root.showWhere(item)'
                                data-toggle="modal" data-target="#modalNormal" title="Equipment"></a>
                        }
                        @if (ViewBag.accessCommunity)
                        {
                            <a class="table-btn icon-tags assign3-btn" data-bind='visible: (item.Status.text == "Inactive" ? false : true), attr: { href: $root.AssignCommunityUrl(item) }' title="Assign Communities"></a>
                        }
                        @if (ViewBag.accessCoordCoach)
                        {
                            <a class="table-btn icon-random assign-btn"
                                data-bind="visible: (item.Type.value == @((int)Role.Intervention_manager) ? true : false),
    attr: { href: $root.AssignCoordUrl(item) }"
                                title="Assign Coordinators"></a>
                            
                            <a class="table-btn icon-cogs assign2-btn"
                                data-bind='visible: (item.Type.value == @((int)Role.Intervention_manager) ? true : false),
    attr: { href: $root.AssignCoachUrl(item) }'
                                title="Assign Mentor/Coaches"></a>
                        }
                        @if (ViewBag.accessDelete)
                        {
                            <a class="table-btn icon-trash trash-btn" data-bind="event: { click: $root.deleteData }" href="#" title="Delete"></a>
                        }
                    </td>
                </tr>
            </tbody>
            @Html.Display("e", "NoData", new { Colspan = 7 })
        </table>
        @Html.Partial("_Partial_Pager")
    </div>
</div>


@section Scripts
{
    <script type="text/javascript">
        if ("@ViewBag.accessList".toLowerCase() == "false")
            redirectBack('/home/dashboard');
        var list_InternalUser = {};

        jQuery(function () {
            $(".table.table-striped.table-hover td").css("word-break", "break-all");
            list_InternalUser = new ViewModel(
                {
                    instanceName: "list_InternalUser",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("Search")))',
                    addDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("New")))',
                    addType: "Redirect",
                    deleteDataUrl: '@Html.Raw(Url.Action("Delete"))',
                    showField: "FirstName",
                    orderBy: "LastName",
                    orderDirection: "ASC",
                    pageSize: 10,
                    headers: [
                        {
                            text: "User Name",
                            field: "@Html.NameFor(model => model.GoogleId)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.FirstName)",
                            field: "@Html.NameFor(model => model.FirstName)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.LastName)",
                            field: "@Html.NameFor(model => model.LastName)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Type)",
                            field: "@Html.NameFor(model => model.Type)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Email)",
                            field: "@Html.NameFor(model => model.Email)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Status)",
                            field: "@Html.NameFor(model => model.Status)",
                            order: true,
                            width: '7%'
                        },
                        { text: "Action", width: '18%' }
                    ],
                    searchCriteria: {
                        keyword: ko.observable(window.queryString("keyword")),
                        roleId: ko.observable(window.queryString("roleId")),
                        status: ko.observable(window.queryString("status", -1))
                    }
                }
                , {
                    onDataUpdated: function (user) {
                        location.href = '@Url.Action("Edit")' + "?userId=" + user.ID + "&returnurl=" + list_InternalUser.getLocation();
                    },
                    onDataViewed: function (user) {
                        location.href = '@Url.Action("View")' + "?userId=" + user.ID + "&returnurl=" + list_InternalUser.getLocation();
                    },
                    equipmentData: function (user) {
                        return '@Url.Action("CoordCoachEquipment")' + "?userId=" + user.ID;
                    },
                    showWhere: function (user) {
                        return user.Type.value == '@((int)Role.Coordinator)' || user.Type.value == '@((int)Role.Mentor_coach)';
                    },

                    AssignCommunityUrl: function (user) {
                        return '@Url.Action("AssignCommunity", "Public", new { Area = "Invitation" })' +
                            "?userId=" + user.ID + "&returnurl=" + list_InternalUser.getLocation();
                    },

                    AssignCoordUrl: function (user) {
                        return '@Url.Action("AssignCoaches")' + "?userId=" + user.ID + "&isCoord=" + true + "&returnurl=" + list_InternalUser.getLocation();
                    },

                    AssignCoachUrl: function (user) {
                        return '@Url.Action("AssignCoaches")' + "?userId=" + user.ID + "&isCoord=" + false + "&returnurl=" + list_InternalUser.getLocation();
                    }
                });

            list_InternalUser.search();
            ko.applyBindings(list_InternalUser, $("div.main-container:first")[0]);
        });
    </script>
}