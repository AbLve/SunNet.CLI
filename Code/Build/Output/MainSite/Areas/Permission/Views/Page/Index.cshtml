@model Sunnet.Cli.Business.Permission.Models.PageModel
@using Sunnet.Cli.UIBase.Models;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.MainSite.Models;
@{
    ViewBag.Title = "Page Invite";
    bool boolvar = false;
    //type dropdownlist
    IEnumerable<SelectListItem> TypeList =
        boolvar.ToSelectList(ViewTextHelper.DefaultAllText, "-1", yesText: "Page", noText: "Menu")
        as IEnumerable<SelectListItem>;
    //isshow dropdownlist
    IEnumerable<SelectListItem> IsShowList = boolvar.ToSelectList(ViewTextHelper.DefaultAllText, "-1")
    as IEnumerable<SelectListItem>;
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.Permission)
}
@section BreadPath
{
    @(Html.ActionLink("Page", "Index", "Page")) <i class="icon-angle-right"></i>Page List
}
@if (ViewBag.accessAdd)
{
    <div class="right-content-top">
        <input type="button" value="Add Page" class="mainbutton mainright-btn create-btn" data-bind="click: $root.addData" />
    </div>
}
<div class="modal-l-b"></div>
<form class="form-horizontal" role="form" id="formSearch">
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.Name, new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.name"
       })
        </div>
        <label class="control-label col-sm-2" for="IsPage">Type</label>
        <div class="col-sm-3">
            @Html.DropDownListFor(model => model.IsPage, TypeList, new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.type"
       })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Url, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.Url, new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.url"
       })
        </div>
        @Html.LabelFor(m => m.IsShow, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.DropDownListFor(model => model.IsShow, IsShowList, new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.isShow"
       })
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-sm-2" for="ParentID">Menu</label>
        <div class="col-sm-3">
            @Html.DropDownListFor(model => model.ParentID, @ViewBag.Menu as IEnumerable<SelectListItem>, new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.belongsMenu"
       })
        </div>
        <div class="col-sm-2">&nbsp;</div>
        <div class="col-sm-3">
        </div>
        <div class="col-sm-2">
            <button class="mainbutton mainright-btn sreach-btn" type="button" data-bind="event: { click: search }">Search</button>
        </div>
    </div>
</form>
<div class="main-content main-content">
    <div class="content-title">Page</div>
    <div class="content-body-tab">
        <table class="table table-striped table-hover">
            <thead>
                <tr data-bind="foreach: { data: headers, as: 'header' }">
                    <th data-bind="text: text, style: { width: width }"></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                <tr>
                    <td data-bind="html: item.Name" style="text-align: left"></td>
                    <td data-bind="text: item.IsPage == 0 ? 'Menu' : 'Page'"></td>
                    <td data-bind="text: item.ParentID"></td>
                    <td data-bind="text: item.Url"></td>
                    <td data-bind="text: item.Sort"></td>
                    <td data-bind="text: item.IsShow == 0 ? 'No' : 'Yes'"></td>
                    <td>
                        @if (ViewBag.accessEdit)
                        {
                            <a class="table-btn icon-pencil pencil-btn" data-bind="event: { click: $root.updateData }" href="#" title="Edit"></a>
                        }
@*<a class="table-btn icon-trash trash-btn" data-bind="event: { click: $root.deleteData }" href="#" title="Delete"></a>        *@
                    </td>
                </tr>
            </tbody>@Html.Display("e", "NoData", new { Colspan = 7 })
        </table>
        @Html.Partial("_Partial_Pager")
    </div>
</div>


@section Scripts
{
    <script type="text/javascript">
        var list_Page = {};

        $(function () {
            list_Page = new ViewModel(
                {
                    instanceName: "list_Page",
                    modalId: "modalNormal",
                    addDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("New")))',
                    addType: "Redirect",
                    editDataUrl: '@Html.Raw(Url.Action("Edit"))',
                    editType: "Redirect",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("Search")))',
                    deleteDataUrl: '@Html.Raw(Url.Action("Delete"))',
                    headers: [
                        {
                            text: "@Html.DisplayNameFor(model => model.Name)",
                            field: "@Html.NameFor(model => model.Name)",
                            order: false,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.IsPage)",
                            field: "@Html.NameFor(model => model.IsPage)",
                            order: false,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.ParentID)",
                            field: "@Html.NameFor(model => model.ParentID)",
                            order: false,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Url)",
                            field: "@Html.NameFor(model => model.Url)",
                            order: false,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Sort)",
                            field: "@Html.NameFor(model => model.Sort)",
                            order: false,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.IsShow)",
                            field: "@Html.NameFor(model => model.IsShow)",
                            order: false,
                            width: '15%'
                        },
                        { text: "Action", width: '25%' }
                    ],
                    searchCriteria: {
                        name: ko.observable(window.queryString("name")),
                        type: ko.observable(window.queryString("type")),
                        url: ko.observable(window.queryString("url")),
                        isShow: ko.observable(window.queryString("isShow")),
                        belongsMenu: ko.observable(window.queryString("belongsMenu"))
                    }
                }
                );
            list_Page.search();
            ko.applyBindings(list_Page);
        });
    </script>
}