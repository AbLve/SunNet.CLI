@using System.Activities.Expressions
@using System.Web.Optimization
@using System.Web.UI.WebControls
@using Sunnet.Cli.Business.Classes
@using Sunnet.Cli.Core.Common.Enums
@using Sunnet.Cli.Core.Students.Enums
@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@model Sunnet.Cli.Business.Students.Models.StudentModel

@{
    ViewBag.Title = "New Student";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);  
}
@section Scripts
{
    @Scripts.Render("~/scripts/module_student")
    <script type="text/javascript">

        var list_StudentClasses = {};
        function changeStatus() {

            $("#txtCommunity").keydown(function () {
                $("#CommunityId").val("");
                $("#txtSchool").datalist("clear");
                $("#SchoolId").val("");
            });
        }

        function ReturnFromClass() {
            list_StudentClasses.search();
        }
        jQuery(function () {

            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    redirectBack("index");
                }
            });

            changeStatus();

            list_StudentClasses = new ViewModel(
                {
                    instanceName: "list_StudentClasses",
                    modalId: "modalNormal",
                    viewType: "Redirect",
                    getDataUrl: '/Student/Student/GetClassesBySchoolId',
                    orderBy: "Name",
                    orderDirection: "ASC",
                    pageSize: 100000,
                    headers: [
                        {
                            text: "Classroom Name",
                            field: "",
                            order: false,
                            width: '10%'
                        },
                        {
                            text: "Class Name",
                            field: "",
                            order: false,
                            width: '10%'
                        },
                        {
                            text: "Day Type",
                            field: "",
                            order: false,
                            width: '30%'
                        }
                    ],
                    schoolId: $("#SchoolId").val(),
                    searchCriteria:
                    {
                        schoolId: ko.observable(window.queryString("schoolId", "@ViewBag.SchoolId")),
                    }
                }
            );
            list_StudentClasses.search();
            ko.applyBindings(list_StudentClasses, document.getElementById("@formId"));


            $("#txtSchool").on("selected.sunnet.datalist", function (event) {
                list_StudentClasses.search();
            });

        });
        function AddClass() {
            var url = '@Url.Action("New", "Class", new { Area = "Class" })';
            url = url + "?communityId=" + $("#CommunityId").val() + "&communityName=" + $("#txtCommunity").val()
                + "&schoolId=" + $("#SchoolId").val() + "&schoolName=" + $("#txtSchool").val();
            window.open(url, "_blank");
        }
    </script>
}

@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.Student)
}

@section BreadPath
{
    @(Html.ActionLink("Student", "Index", "Student"))
    <i class="icon-angle-right">&nbsp;Add</i>
}

@using (Ajax.BeginForm("New", "Student", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        id = formId
    }))
{
    @Html.AntiForgeryToken() 
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))" >Back to Student List</a>
    </div>
    <div class="main-content">
        <div class="content-title">Basic Information</div>
        <div class="content-body">
            <div class="form-group">
                @Html.LabelFor(model => model.CommunityId, null, new { @class = "col-sm-2 control-label " })
                @Html.Label("lbtxtCommunity", "txtCommunity", new { @class = "hide", @for = "txtCommunity" })
                <div class="col-sm-4">
                    @Html.TextBox("txtCommunity", "", new
                        {
                            autocomplete = "off",
                            @class = "form-control",
                            data_list = "true",
                            data_for = "#CommunityId",
                            data_remote = "/Community/Community/GetCommunitySelectList",
                            data_text = "Name",
                            data_value = "ID",
                            id = "txtCommunity",
                            placeholder = "Enter key text to search",
                            name = "txtCommunity",
                            @for = "CommunityId",
                            @Value = ViewBag.CommunityName
                        })

                    @Html.HiddenFor(model => model.CommunityId, new
               {
                   //@class = "form-control validate",

                   placeholder = "selected from autocomplete",
                   @Value = ""
               })
                    @*@Html.ValidationMessageFor(model => model.CommunityId)*@
                </div>
                @Html.LabelFor(model => model.SchoolId, new { @class = "control-label col-sm-2 required" })
                @Html.Label("lbtxtSchool", "txtSchool", new { @class = "hide", @for = "txtSchool" })
                <div class="col-sm-4">
                    @Html.TextBox("txtSchool", "", new
                        {
                            autocomplete = "off",
                            @class = "form-control",
                            data_list = "true",
                            data_for = "#SchoolId",
                            data_remote = Url.Action("GetSchoolSelectList", "School", new { Area = "School" }),
                            data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",

                            data_text = "Name",
                            data_value = "ID",
                            id = "txtSchool",
                            placeholder = "Enter key text to search",
                            name = "txtSchool",
                            @for = "SchoolId",
                            data_extraParams = "{\"communityId\":\"#CommunityId\"}",
                            @Value =""
                        })

                    @Html.HiddenFor(model => model.SchoolId, new
               {
                   @class = "form-control validate",

                   data_bind = "value: searchCriteria.schoolId",
                   @Value = ""
               })
                    @Html.ValidationMessageFor(model => model.SchoolId)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StudentId, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.StudentId, new { @class = "form-control", @readonly = "true" })
                </div>

                @Html.LabelFor(model => model.SchoolYear, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.SchoolYear, new { @class = "form-control", @readonly = "true" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>

                @Html.LabelFor(model => model.MiddleName, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.MiddleName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MiddleName)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastName, new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>

                @Html.LabelFor(model => model.Ethnicity, new { @class = "col-sm-2 control-label " })
                <div class="col-sm-4">
                    @Html.EnumDropDownListFor(model => model.Ethnicity, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                    @Html.TextBoxFor(model => model.EthnicityOther, new { @class = "form-control", type = "hidden" })
                    @Html.Label("lbEthnicityOther", "EthnicityOther", new { @class = "hide", @for = "EthnicityOther" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BirthDate, new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.BirthDate, new
               {
                   @class = "form-control date",
                   @Value = Model.BirthDate.FormatDateString()
               })
                    @Html.ValidationMessageFor(model => model.BirthDate)
                </div>


                <span class="col-sm-2 control-label required">@Html.DisplayNameFor(model => model.Gender)</span>

                <div class="col-sm-4">
                    @Html.RadioButtonFor(model => model.Gender, Gender.Male, new { id = "Gender1" })
                    @Html.Label("", Gender.Male.ToDescription(), new { @for = "Gender1" })
                    @Html.RadioButtonFor(model => model.Gender, Gender.Female, new { id = "Gender2" })
                    @Html.Label("", Gender.Female.ToDescription(), new { @for = "Gender2" })
                    <br />@Html.ValidationMessageFor(model => model.Gender)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PrimaryLanguageId, new { @class = "col-sm-2 control-label " })
                <div class="col-sm-4">
                    @Html.DropDownListFor(e => e.PrimaryLanguageId, (IEnumerable<SelectListItem>)ViewBag.Language, new { @class = "form-control" })
                    @Html.TextBoxFor(model => model.PrimaryLanguageOther, new { @class = "form-control", type = "hidden" })
                    @Html.Label("lbPrimaryLanguageOther", "PrimaryLanguageOther", new { @class = "hide", @for = "PrimaryLanguageOther" })
                </div>
                @Html.LabelFor(model => model.SecondaryLanguageId, new { @class = "col-sm-2 control-label " })
                <div class="col-sm-4">
                    @Html.DropDownListFor(e => e.SecondaryLanguageId, (IEnumerable<SelectListItem>)ViewBag.Language, new { @class = "form-control" })
                    @Html.TextBoxFor(model => model.SecondaryLanguageOther, new { @class = "form-control", type = "hidden" })
                    @Html.Label("lbSecondaryLanguageOther", "SecondaryLanguageOther", new { @class = "hide", @for = "SecondaryLanguageOther" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Status, null, new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Status, (IEnumerable<SelectListItem>)ViewBag.StatusOptions,
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Status)
                </div>
                @Html.LabelFor(model => model.StatusDate, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.StatusDate, new
                    {
                        @class = "form-control ",
                        @Value = Model.StatusDate.FormatDateString(),
                        @readonly = "readonly"
                    })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsSendParent, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.CheckBoxFor(model => model.IsSendParent)
                </div>
                @Html.LabelFor(model => model.LocalStudentID, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.LocalStudentID, new { @class = "form-control" })
                </div>

            </div>

            @if (ViewBag.MediaAccess == "RW")
            {
                <div class="form-group">

                    <span class="col-sm-2 control-label">@Html.DisplayNameFor(model => model.IsMediaRelease)</span>
                    <div class="col-sm-4">
                        @Html.RadioButtonFor(model => model.IsMediaRelease, MediaRelease.Yes, new { id = "MediaYes" })
                        @Html.Label("", "Yes", new { @for = "MediaYes" })

                        @Html.RadioButtonFor(model => model.IsMediaRelease, MediaRelease.No, new { id = "MediaNo" })
                        @Html.Label("", "No", new { @for = "MediaNo" })

                        @Html.RadioButtonFor(model => model.IsMediaRelease, MediaRelease.Refused, new { id = "MediaRefused" })
                        @Html.Label("", "Refused", new { @for = "MediaRefused" })
                        <br />
                    </div>

                    @Html.LabelFor(model => model.AssessmentLanguage, new { @class = "col-sm-2 control-label required" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(e => e.AssessmentLanguage, (IEnumerable<SelectListItem>)ViewBag.AssessmentLanguages, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AssessmentLanguage)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TSDSStudentID, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.TSDSStudentID, new { @class = "form-control" })
                    </div>
                    @Html.LabelFor(model => model.GradeLevel, new { @class = "col-sm-2 control-label required" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(e => e.GradeLevel, (IEnumerable<SelectListItem>)ViewBag.GradeLevelOptions, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.GradeLevel)
                    </div>
                </div>

            }
            else if (ViewBag.MediaAccess == "R")
            {
                <div class="form-group">

                    <span class="col-sm-2 control-label">@Html.DisplayNameFor(model => model.IsMediaRelease)</span>
                    <div class="col-sm-4">
                        @Html.RadioButtonFor(model => model.IsMediaRelease, MediaRelease.Yes,
                            new { id = "MediaYes", @disabled = "true" })
                        @Html.Label("", "Yes", new { @for = "MediaYes" })

                        @Html.RadioButtonFor(model => model.IsMediaRelease, MediaRelease.No,
                            new { id = "MediaNo", @disabled = "true" })
                        @Html.Label("", "No", new { @for = "MediaNo" })

                        @Html.RadioButtonFor(model => model.IsMediaRelease, MediaRelease.Refused,
                            new { id = "MediaRefused", @disabled = "true" })
                        @Html.Label("", "Refused", new { @for = "MediaRefused" })
                    </div>

                    @Html.LabelFor(model => model.AssessmentLanguage, new { @class = "col-sm-2 control-label required" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(e => e.AssessmentLanguage, (IEnumerable<SelectListItem>)ViewBag.AssessmentLanguages, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AssessmentLanguage)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TSDSStudentID, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.TSDSStudentID, new { @class = "form-control" })
                    </div>
                    @Html.LabelFor(model => model.GradeLevel, new { @class = "col-sm-2 control-label required" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(e => e.GradeLevel, (IEnumerable<SelectListItem>)ViewBag.GradeLevelOptions, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.GradeLevel)
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    @Html.HiddenFor(model => model.IsMediaRelease)
                    @Html.LabelFor(model => model.AssessmentLanguage, new { @class = "col-sm-2 control-label required" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(e => e.AssessmentLanguage, (IEnumerable<SelectListItem>)ViewBag.AssessmentLanguages, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AssessmentLanguage)
                    </div>
                    @Html.LabelFor(model => model.TSDSStudentID, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.TSDSStudentID, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.GradeLevel, new { @class = "col-sm-2 control-label required" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(e => e.GradeLevel, (IEnumerable<SelectListItem>)ViewBag.GradeLevelOptions, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.GradeLevel)
                    </div>
                </div>
            }

            <div class="form-group">

                <span class="col-sm-2 control-label required">Assign Student to Class</span>
                <div class="col-sm-2 ">
                    <a class="mainbutton mainright-btn sreach-btn" href="#" onclick="AddClass();">Add Class</a>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-2"></div>
                <div class="col-sm-10">

                    @Html.ValidationMessage("chkClasses")
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>

                                    <label for="hiddenChk" class="hide">Select All</label>
                                    <input type="checkbox" id="hiddenChk" name="chkClasses" class="required hide validate" />
                                    <input type="checkbox" onclick="CheckAll" id="chkSelectAll" />
                                    <label for="chkSelectAll">Select All</label>
                                </th>
                                <th>Classroom Name</th>
                                <th>Class Name</th>
                                <th>Day Type</th>
                            </tr>
                        </thead>
                        <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                            <tr>
                                <td>

                                    <label data-bind=" attr: { 'for': 'chkClasses' + $index() }" class="hide">hiddenChk</label>
                                    <input type="checkbox" name="chkClasses" id="chkClasses" class="required"
                                        data-bind="value: item.ClassId, attr: { id: 'chkClasses' + $index() }" />
                                </td>
                                <td data-bind="text: item.ClassroomName"></td>
                                <td data-bind="text: item.ClassName"></td>
                                <td data-bind="text: item.DayType.text"></td>
                            </tr>
                        </tbody>@Html.Display("e", "NoData", new { Colspan = 4 })
                    </table>
                </div>
            </div>

            @if (ViewBag.NoteAccess == "RW")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Notes, null, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        @Html.TextAreaFor(model => model.Notes, 5, 10, new { @class = " form-control" })
                    </div>
                </div>
            }
            else if (ViewBag.NoteAccess == "R")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Notes, null, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        @Html.TextAreaFor(model => model.Notes, 5, 10, new { @class = " form-control  ", @readonly = "true" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.Notes, new { PlaceHolder = "Limit to 600 characters." })
            }

        </div>
    </div>
    <div class="modal-footer">
        <button class="mainbutton modal-btn submit-btn" onclick="return BeforeSubmit()" type="submit">Submit</button>
        <button class="mainbutton modal-btn cancel-btn" type="button" onclick='redirectBack("index")'>Cancel</button>
    </div>
   
            
}