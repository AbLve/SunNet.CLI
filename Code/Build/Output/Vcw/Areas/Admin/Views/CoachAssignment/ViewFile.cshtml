@model Sunnet.Cli.Business.Vcw.Models.CoachFileModel
@using Sunnet.Cli.UIBase.Models
@using System.Web.Optimization;
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase;
@using Sunnet.Cli.Vcw.Models;
@{
    ViewBag.Title = "Video Information";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    bool isSummary = !string.IsNullOrEmpty(ViewBag.Redirect);
}

@if (isSummary)
{
    @section LeftMenu
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Admin_Summary)
    }
}
else
{
    @section LeftMenu
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Admin_Coaches)
    }
}

@if (isSummary)
{
    @section BreadPath
    {
        @(Html.ActionLink("Admin Summary", "Index", "Summary"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        @(Html.ActionLink("Coach Files", "Index", "Summary"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        File
    }
}
else
{
    @section BreadPath
    {
        @(Html.ActionLink("Admin Coaches", "Index", "CoachGeneral"))
        &nbsp;<i class="icon-angle-right"></i>&nbsp;
        @(Html.ActionLink("Coach Assignments", "Index", "CoachAssignment"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        @(Html.ActionLink("Assignment", "View", "CoachAssignment", new { id = Model.AssignmentId }, null))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;    
        View
    }
}

@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload")
    <script type="text/javascript">
        var contextOther = '@((int)ContextEnum.Other)';
        $(function () {
            if (CheckIfPlay('@(Model.FileExtension)')) {
                setPlayerVideo("700", "350", "@(FileHelper.GetPreviewPathofUploadFile(Model.FilePath).Replace("\\", "/"))", "div_sunnet", '@(DomainHelper.StaticSiteDomain)');
            }

            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    var backurl = "@(ViewBag.Redirect)";
                    if (backurl != "") {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("TeacherFiles", "Summary"))");
                    }
                    else {
                        redirectBack("@Url.Action("ViewAssignmentFiles", "CoachAssignment", new { id = Model.AssignmentId }, "")");
                    }
                }
            })
        });

        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }
    </script>
}

@using (Ajax.BeginForm("EditFile", "CoachAssignment", new { IsPM = ViewBag.IsPM }, PostFormHelper.DefaultAjaxOptions, new
    {
        @class = "form-horizontal",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    <div class="right-content-top">
        @if (isSummary)
        {
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
            Url.Action("CoachFiles", "Summary"))" >Back to Files</a>
        }
        else
        {
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
            Url.Action("ViewAssignmentFiles", "CoachAssignment"))" >Back to Assignment</a>
        }
    </div>
    <div class="main-content">
        <div class="content-title">Selected File Information</div>
        <div class="content-body">
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                                </div>
                                <div class="inputtext-con">
                                    @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IdentifyFileName)
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    <label class="control-label" for="DateRecorded">Date Video Recorded</label>
                                </div>
                                <div class="textarea-con">
                                    @Html.TextBoxFor(m => m.DateRecorded, new { @class = "form-control date", @Value = Model.DateRecorded.Value.FormatDateString() })
                                    @Html.ValidationMessageFor(m => m.DateRecorded)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">Video language</div>
                                </div>
                                <div class="checkbox-con">
                                    <label class="radio-inline">
                                        @Html.RadioButtonFor(m => m.Language, LanguageEnum.English, new { @value = LanguageEnum.English, id = "Language_English" })
                                        @LanguageEnum.English.ToDescription()
                                    </label>
                                </div>
                                <div class="checkbox-con">
                                    <label class="radio-inline">
                                        @Html.RadioButtonFor(m => m.Language, LanguageEnum.Bilingual, new { @value = LanguageEnum.Bilingual, id = "Language_Bilingual" })
                                        @LanguageEnum.Bilingual.ToDescription()
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="content-con">
                                <div class="content-title3">
                                    <div class="control-label">Video Context</div>
                                </div>
                                @foreach (ContextEnum item in Enum.GetValues(typeof(ContextEnum)))
                                {
                                    if (item != ContextEnum.None)
                                    {
                                        bool isChecked = Model.ContextId == item;
                                        if (item == ContextEnum.Other)
                                        {
                                    <div class="checkbox-con">
                                        <label class="checkbox-inline">
                                            <input type="checkbox" name="Context" value="@(item.GetValue())"  @(isChecked ? "checked" : "")/>@item.ToDescription()
                                        </label>
                                        <label>
                                            @if (Model.ContextId == ContextEnum.Other)
                                            {
                                                @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control", disabled = "disabled" })  
                                            }
                                        </label>
                                        @Html.ValidationMessageFor(model => model.ContextOther)
                                    </div>
                                        }
                                        else
                                        {
                                    <div class="checkbox-con">
                                        <label class="checkbox-inline">
                                            <input type="checkbox" name="Context" value="@(item.GetValue())" @(isChecked ? "checked" : "")/>@item.ToDescription()
                                        </label>
                                    </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div id='div_sunnet'>
                            <div style='width:100%;height:450px; text-align:center; background:#333333 url(@(Sunnet.Framework.SFConfig.AssessmentDomain)/images/not-played.jpg) no-repeat center center; line-height:450px;'>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">Video Content</div>
                        </div>
                        @foreach (ContentEnum item in Enum.GetValues(typeof(ContentEnum)))
                        {
                            if (item != ContentEnum.None)
                            {
                                bool isChecked = Model.Contents.Contains(item);
                                if (item == ContentEnum.Other)
                                {
                            <div class="checkbox-con">
                                <label class="checkbox-inline">
                                    <input type="checkbox" name="Content"  onclick="ContentClick(this)" 
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "")>@item.ToDescription()
                                    &nbsp;&nbsp;
                                </label>
                                @if (isChecked)
                                {
                                    @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control", @disabled = "disabled" })   
                                }
                                @Html.LabelFor(model => model.ContentOther, null, new { @class = "control-label hide" })
                                @Html.ValidationMessageFor(model => model.ContentOther)
                            </div>
                                }
                                else
                                {
                            <div class="checkbox-con">
                                <label class="checkbox-inline">
                                    <input type="checkbox" name="Content"  
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "") >
                                    @item.ToDescription()
                                </label>
                            </div>
                                }
                            }

                        }
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">Coaching Strategies</div>
                        </div>
                        @foreach (StrategyEnum item in Enum.GetValues(typeof(StrategyEnum)))
                        {
                            if (item != StrategyEnum.None)
                            {
                            <div class="checkbox-con checkbox-con-double">
                                <label class="radio-inline" for="strategy_@(item)" >
                                    @Html.RadioButtonFor(m => m.StrategyId, item, new { @value = item, id = "strategy_" + item }) @item.ToDescription()</label>
                            </div>
                            }
                        }
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                Coaching Objectives
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                            </div>
                            <label class="hide" for="Objectives">&nbsp;</label>
                        </div>
                        <div class="textarea-con">
                            @Html.TextAreaFor(m => m.Objectives, new { @class = "form-control", row = "2" })
                            @Html.ValidationMessageFor(m => m.Objectives)
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                Coaching Effectiveness
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                            </div>
                            <label class="hide" for="Effectiveness">&nbsp;</label>
                        </div>
                        <div class="textarea-con">
                            @Html.TextAreaFor(m => m.Effectiveness, new { @class = "form-control", row = "2" })
                            @Html.ValidationMessageFor(m => m.Effectiveness)
                        </div>
                    </div>
                </div>
            </div>
            @Html.Partial("/Areas/Coach/Views/Partials/UploadedFile.cshtml")
            <div class="form-group">
                <div class="coachreview-con">
                    <div class="coachreview-con-t">PM Review</div>
                    <div class="col-sm-6">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label">Screening</div>
                            </div>
                            <div class="checkbox-con">
                                <label class="checkbox-inline">
                                    <input type="checkbox" name="screening" value="1" 
                                     @(Model.Status == FileStatus.Completed ? "checked" : "")/>Accept
                                </label>
                            </div>
                            <div class="checkbox-con">
                                <label class="checkbox-inline">
                                    <input type="checkbox" name="screening" value="2" 
                                    @(Model.Status == FileStatus.Rejected ? "checked" : "")/>Reject
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label">Selection List</div>
                            </div>
                            @foreach (SelectionEnum item in Enum.GetValues(typeof(SelectionEnum)))
                            {
                                <div class="checkbox-con checkbox-con-double">
                                    <label class="checkbox-inline">
                                        <input type="checkbox" name="selectionlist"value="@item.GetValue()"
                                        @(Model.SelectionList.Contains(item) ? "checked" : "")>@item.ToDescription()
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <input type="hidden" name="uploadfiles" id="uploadfiles" />
            <div class="button-content">
                <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" onclick="return beforeSubmit_edit()" id="btnSubmit">
                @if (isSummary)
                {
                    <a class="mainbutton modal-btn cancel-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
                    Url.Action("CoachFiles", "Summary"))" >Cancel</a>
                }
                else
                {
                    <a class="mainbutton modal-btn cancel-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
                    Url.Action("ViewAssignmentFiles", "CoachAssignment", new { id = Model.AssignmentId }, ""))" >Cancel</a>
                }
            </div>
        </div>
    </div>
}
