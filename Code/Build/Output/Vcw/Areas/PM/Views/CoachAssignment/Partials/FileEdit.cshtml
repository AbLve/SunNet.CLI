@model Sunnet.Cli.Business.Vcw.Models.CoachFileModel
@using Sunnet.Cli.Core.Vcw.Enums
@using Sunnet.Framework.Extensions

<div class="form-group">
    <div class="col-sm-6">
        <div class="form-group">
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                    </div>
                    <div class="inputtext-con">
                        @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IdentifyFileName)
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        <label class="control-label" for="DateRecorded">Date Video Recorded</label>
                    </div>
                    <div class="textarea-con">
                        @Html.TextBoxFor(m => m.DateRecorded, new { @class = "form-control date", @Value = Model.DateRecorded.Value.FormatDateString() })
                        @Html.ValidationMessageFor(m => m.DateRecorded)
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        <div class="control-label">Video language</div>
                    </div>
                    <div class="checkbox-con">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(m => m.Language, LanguageEnum.English, new { @value = LanguageEnum.English, id = "Language_English" })
                            @LanguageEnum.English.ToDescription()
                        </label>
                    </div>
                    <div class="checkbox-con">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(m => m.Language, LanguageEnum.Bilingual, new { @value = LanguageEnum.Bilingual, id = "Language_Bilingual" })
                            @LanguageEnum.Bilingual.ToDescription()
                        </label>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="content-con">
                    <div class="content-title3">
                        <div class="control-label">Video Context</div>
                    </div>
                    @foreach (ContextEnum item in Enum.GetValues(typeof(ContextEnum)))
                    {
                        if (item != ContextEnum.None)
                        {
                            bool isChecked = Model.ContextId == item;
                            if (item == ContextEnum.Other)
                            {
                        <div class="checkbox-con">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="Context" value="@(item.GetValue())"  @(isChecked ? "checked" : "")/>@item.ToDescription()
                            </label>
                            <label>
                                @if (Model.ContextId == ContextEnum.Other)
                                {
                                    @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control", disabled = "disabled" })  
                                }
                            </label>
                            @Html.ValidationMessageFor(model => model.ContextOther)
                        </div>
                            }
                            else
                            {
                        <div class="checkbox-con">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="Context" value="@(item.GetValue())" @(isChecked ? "checked" : "")/>@item.ToDescription()
                            </label>
                        </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div id='div_sunnet'>
                <div style='width:100%;height:450px; text-align:center; background:#333333 url(@(Sunnet.Framework.SFConfig.AssessmentDomain)/images/not-played.jpg) no-repeat center center; line-height:450px;'>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="form-group">
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Video Content</div>
            </div>
            @foreach (ContentEnum item in Enum.GetValues(typeof(ContentEnum)))
            {
                if (item != ContentEnum.None)
                {
                    bool isChecked = Model.Contents.Contains(item);
                    if (item == ContentEnum.Other)
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Content" onclick="ContentClick(this)" 
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "")>@item.ToDescription()
                        &nbsp;&nbsp;
                    </label>
                    <label>
                        @if (isChecked)
                        {
                            @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control form-control-double" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control form-control-double", @disabled = "disabled" })   
                        }
                    </label>
                    @Html.ValidationMessageFor(model => model.ContentOther)
                </div>
                    }
                    else
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Content"  
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "") >
                        @item.ToDescription()
                    </label>
                </div>
                    }
                }

            }
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Coaching Strategies</div>
            </div>
            @foreach (StrategyEnum item in Enum.GetValues(typeof(StrategyEnum)))
            {
                if (item != StrategyEnum.None)
                {
                <div class="checkbox-con checkbox-con-double">
                    <label class="radio-inline" for="strategy_@(item)" >
                        @Html.RadioButtonFor(m => m.StrategyId, item, new { @value = item, id = "strategy_" + item }) @item.ToDescription()</label>
                </div>
                }
            }
        </div>
    </div>

</div>

<div class="form-group">
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">
                    Coaching Objectives
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                </div>
                <label class="hide" for="Objectives">&nbsp;</label>
            </div>
            <div class="textarea-con">
                @Html.TextAreaFor(m => m.Objectives, new { @class = "form-control", row = "2" })
                @Html.ValidationMessageFor(m => m.Objectives)
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">
                    Coaching Effectiveness
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                </div>
                <label class="hide" for="Effectiveness">&nbsp;</label>
            </div>
            <div class="textarea-con">
                @Html.TextAreaFor(m => m.Effectiveness, new { @class = "form-control", row = "2" })
                @Html.ValidationMessageFor(m => m.Effectiveness)
            </div>
        </div>
    </div>
</div>
@Html.Partial("/Areas/Coach/Views/Partials/UploadedFile.cshtml")