@model Sunnet.Cli.Business.Vcw.Models.TeacherGeneralFileModel
@using Sunnet.Cli.UIBase.Models
@using System.Web.Optimization;
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase;
@using Sunnet.Framework;
@{
    ViewBag.Title = "View General File";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    bool isSummary = !string.IsNullOrEmpty(ViewBag.Redirect);
}

@if (isSummary)
{
    @section LeftMenu
{
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Teacher_Summary)
    }
}
else
{
    @section LeftMenu
{
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Teacher_General)
    }
}

@if (isSummary)
{
    @section BreadPath
    {
        @(Html.ActionLink("Teacher Summary", "Index", "Summary"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        File
    }
}
else
{
    @section BreadPath
    {
        @(Html.ActionLink("Teacher General", "Index", "General"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        View
    }
}

@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload")
    <script type="text/javascript">
        var contextOther = '@((int)ContextEnum.Other)';
        $(function () {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    var backurl = "@(ViewBag.Redirect)";
                    if (backurl != "") {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))");
                    }
                    else {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))");
                    }
                }
            });

            if (CheckIfPlay('@(Model.FileExtension)')) {
                setPlayerVideo("700", "350", "@(FileHelper.GetPreviewPathofUploadFile(Model.FilePath).Replace("\\", "/"))", "div_sunnet",
                    '@(DomainHelper.StaticSiteDomain)');
            }

        });

        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }
    </script>
}

@using (Ajax.BeginForm("Edit", "General", null, PostFormHelper.DefaultAjaxOptions, new
{
    @class = "form-horizontal",
    id = formId
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    <div class="right-content-top">
        @if (isSummary)
        {
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
        Url.Action("Index", "Summary"))" >Back to Files</a>
        }
        else
        {
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ??
        Url.Action("Index", "General"))" >Back to General</a>
        }
    </div>
    <div class="main-content">
        <div class="content-title">Selected Video Information</div>
        <div class="content-body">
            <form class="form-horizontal">
                <div class="form-group">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <div class="col-sm-6">
                                <div class="content-con">
                                    <div class="content-title3">
                                        @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                                    </div>
                                    <div class="inputtext-con">
                                        @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.IdentifyFileName)
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="content-con">
                                    <div class="content-title3">
                                        <label class="control-label" for="DateVieoRecorded">Date Video Recorded</label>
                                    </div>
                                    <div class="inputtext-con">
                                        @Html.TextBoxFor(model => model.DateVieoRecorded, new
                                   {
                                       @class = "form-control date"
                                       ,
                                       @Value = Model.DateVieoRecorded.Value.FormatDateString()
                                   })
                                        @Html.ValidationMessageFor(model => model.DateVieoRecorded)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-6">
                                <div class="content-con">
                                    <div class="content-title3">
                                        <div class="control-label">Video Context</div>
                                    </div>
                                    @foreach (ContextEnum item in Enum.GetValues(typeof(ContextEnum)))
                                    {
                                        if (item != ContextEnum.None)
                                        {
                                            bool isChecked = Model.ContextId == item;
                                            if (item == ContextEnum.Other)
                                            {
                                        <div class="checkbox-con">
                                            <label class="checkbox-inline">
                                                <input type="checkbox" name="Context" value="@(item.GetValue())"  @(isChecked ? "checked" : "")/>@item.ToDescription()
                                            </label>
                                            <label>
                                                @if (Model.ContextId == ContextEnum.Other)
                                                {
                                                    @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control" })
                                                }
                                                else
                                                {
                                                    @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control", disabled = "disabled" })  
                                                }
                                            </label>
                                            @Html.ValidationMessageFor(model => model.ContextOther)
                                        </div>
                                            }
                                            else
                                            {
                                        <div class="checkbox-con">
                                            <label class="checkbox-inline">
                                                <input type="checkbox" name="Context" value="@(item.GetValue())" @(isChecked ? "checked" : "")/>@item.ToDescription()
                                            </label>
                                        </div>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="content-con">
                                    <div class="content-title3">
                                        <div class="control-label">Video Content</div>
                                    </div>
                                    @foreach (ContentEnum item in Enum.GetValues(typeof(ContentEnum)))
                                    {
                                        if (item != ContentEnum.None)
                                        {
                                            bool isChecked = Model.Contents.Contains(item);
                                            if (item == ContentEnum.Other)
                                            {
                                        <div class="checkbox-con">
                                            <label class="checkbox-inline">
                                                <input type="checkbox" name="Content" onclick="ContentClick(this)" 
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "")>@item.ToDescription()
                                                &nbsp;&nbsp;
                                            </label>
                                            <label>
                                                @if (isChecked)
                                                {
                                                    @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control" })
                                                }
                                                else
                                                {
                                                    @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control", @disabled = "disabled" })   
                                                }
                                            </label>
                                            @Html.ValidationMessageFor(model => model.ContentOther)
                                        </div>
                                            }
                                            else
                                            {
                                        <div class="checkbox-con">
                                            <label class="checkbox-inline">
                                                <input type="checkbox" name="Content"  
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "") >
                                                @item.ToDescription()
                                            </label>
                                        </div>
                                            }
                                        }

                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="content-con">
                            <div id='div_sunnet'>
                                <div style='width:100%;height:450px; text-align:center; background:#333333 url(@(SFConfig.AssessmentDomain)/images/not-played.jpg) no-repeat center center; line-height:450px;'>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-6">
                        <div class="content-con">
                            <div class="content-title3">
                                <div class="control-label">
                                    Description
                                    <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                                </div>
                            </div>
                            <div class="textarea-con">
                                <label for="Description" class="hide">&nbsp;</label>
                                @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = "2" })
                                @Html.ValidationMessageFor(m => m.Description)
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="content-con" style="min-height: 182px">
                            <div class="content-title3">
                                <span class="control-label">Coach Feedback</span>
                            </div>
                            <div class="uploader-list">
                                @if (!string.IsNullOrEmpty(Model.FeedbackFilePath))
                                {
                                    <div class="item">
                                        <i class="icon-paper-clip"></i>
                                        <a href="@(DownLoadFile.GetDownFilePath(Model.FeedbackFilePath, Model.FeedbackFileName))"  
                                    class="form-link4">@(Model.FeedbackFileName)</a>
                                    </div>
                                }
                                <p>
                                    @Model.FeedbackText
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                @Html.Partial("/Areas/Coach/Views/Partials/UploadedFile.cshtml")
            </form>
        </div>
        <input type="hidden" name="uploadfiles" id="uploadfiles" />
        <div class="button-content">
            <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" id="btnSubmit" onclick="return beforeSubmit_edit(this);">
            @if (!string.IsNullOrEmpty(ViewBag.Redirect))
            {
                <button class="mainbutton modal-btn cancel-btn" type="button"  
                onclick="redirectBack('@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))');">
                    Cancel</button>
            }
            else
            {
                <button class="mainbutton modal-btn cancel-btn" type="button"  
                onclick="redirectBack('@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))');">
                    Cancel</button>    
            }
        </div>
    </div>  
}


