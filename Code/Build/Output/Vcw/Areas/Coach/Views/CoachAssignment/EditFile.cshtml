@model Sunnet.Cli.Business.Vcw.Models.CoachFileModel
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Cli.Core.Vcw.Enums
@using System.Web.Optimization
@using Sunnet.Framework.Extensions
@using Sunnet.Cli.UIBase

@section LeftMenu
{
    @if (!string.IsNullOrEmpty(ViewBag.Redirect))
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Coach_Summary)
    }
    else
    {
        @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Coach_Assignment)
    }
}

@{
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@if (!string.IsNullOrEmpty(ViewBag.Redirect))
{
    @section BreadPath
{
        @(Html.ActionLink("Coach Summary", "Index", "Summary"))&nbsp; 
        <i class="icon-angle-right"></i>&nbsp;   
        @(Html.ActionLink("Coach Files", "Index", "Summary"))&nbsp; 
        <i class="icon-angle-right"></i>&nbsp;   
    View
    }
}
else
{
    @section BreadPath
{
        @(Html.ActionLink("Coach Assignment List", "Index", "CoachAssignment"))&nbsp;
    <i class="icon-angle-right"></i>&nbsp;   
    @(Html.ActionLink("Assignment Files", "ViewAssignmentFiles", "CoachAssignment", new { id = Model.AssignmentId }, null))&nbsp;
    <i class="icon-angle-right"></i>&nbsp;    
    View
    }
}

@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload")
    <script type="text/javascript">
        var contextOther = '@((int)ContextEnum.Other)';
        $(function () {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    var backurl = "@(ViewBag.Redirect)";
                    if (backurl != "") {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))");
                    }
                    else {
                        redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "ViewAssignmentFiles/" + Model.AssignmentId)");
                    }
                }
            });
            if (CheckIfPlay('@(Model.FileExtension)')) {
                setPlayerVideo("700", "350", "@(FileHelper.GetPreviewPathofUploadFile(Model.FilePath).Replace("\\", "/"))", "div_sunnet",
                    '@(DomainHelper.StaticSiteDomain)');
            }
        })

        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }
    </script>
}
@using (Ajax.BeginForm("Edit", "CoachAssignment", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        role = "form",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.AssignmentId)
    <div class="right-content-top">
        @if (!string.IsNullOrEmpty(ViewBag.Redirect))
        {
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))" >Back to Summary</a>
        }
        else
        {
            <a class="mainbutton mainright-btn nav-btn" 
            href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("ViewAssignmentFiles", "CoachAssignment", new { id = Model.AssignmentId }))" >Back to Assignment  Files</a>
        }
    </div>
    <div class="form-group"></div>
    <div class="form-group">
        <div class="col-sm-6">
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                        </div>
                        <div class="inputtext-con">
                            @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.IdentifyFileName)
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <label class="control-label" for="DateRecorded">Date Video Recorded</label>
                        </div>
                        <div class="textarea-con">
                            @Html.TextBoxFor(m => m.DateRecorded, new { @class = "form-control date", @Value = Model.DateRecorded.Value.FormatDateString() })
                            @Html.ValidationMessageFor(m => m.DateRecorded)
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">Video language</div>
                        </div>
                        <div class="checkbox-con">
                            <label class="radio-inline">
                                @Html.RadioButtonFor(m => m.Language, LanguageEnum.English, new { @value = LanguageEnum.English, id = "Language_English" })
                                @LanguageEnum.English.ToDescription()
                            </label>
                        </div>
                        <div class="checkbox-con">
                            <label class="radio-inline">
                                @Html.RadioButtonFor(m => m.Language, LanguageEnum.Bilingual, new { @value = LanguageEnum.Bilingual, id = "Language_Bilingual" })
                                @LanguageEnum.Bilingual.ToDescription()
                            </label>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">Video Context</div>
                        </div>
                        @foreach (ContextEnum item in Enum.GetValues(typeof(ContextEnum)))
                        {
                            if (item != ContextEnum.None)
                            {
                                bool isChecked = Model.ContextId == item;
                                if (item == ContextEnum.Other)
                                {
                            <div class="checkbox-con">
                                <label class="checkbox-inline">
                                    <input type="checkbox" name="Context" value="@(item.GetValue())"  @(isChecked ? "checked" : "")/>@item.ToDescription()
                                </label>
                                <label>
                                    @if (Model.ContextId == ContextEnum.Other)
                                    {
                                        @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m.ContextOther, new { @class = "form-control", disabled = "disabled" })  
                                    }
                                </label>
                                @Html.ValidationMessageFor(model => model.ContextOther)
                            </div>
                                }
                                else
                                {
                            <div class="checkbox-con">
                                <label class="checkbox-inline">
                                    <input type="checkbox" name="Context" value="@(item.GetValue())" @(isChecked ? "checked" : "")/>@item.ToDescription()
                                </label>
                            </div>
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="content-con">
                <div id='div_sunnet'>
                    <div style='width:100%;height:450px; text-align:center; background:#333333 url(@(Sunnet.Framework.SFConfig.AssessmentDomain)/images/not-played.jpg) no-repeat center center; line-height:450px;'>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-6">
            <div class="content-con">
                <div class="content-title3">
                    <div class="control-label">Video Content</div>
                </div>
                @foreach (ContentEnum item in Enum.GetValues(typeof(ContentEnum)))
                {
                    if (item != ContentEnum.None)
                    {
                        bool isChecked = Model.Contents.Contains(item);
                        if (item == ContentEnum.Other)
                        {
                    <div class="checkbox-con">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Content" id="content-other" onclick="ContentClick(this)" 
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "")>@item.ToDescription()
                            &nbsp;&nbsp;
                        </label>
                        <label>
                            @if (isChecked)
                            {
                                @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control", @disabled = "disabled" })   
                            }
                        </label>
                        @Html.ValidationMessageFor(model => model.ContentOther)
                    </div>
                        }
                        else
                        {
                    <div class="checkbox-con">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Content"  
                                                    value="@item.GetValue()" @(isChecked ? "checked" : "") >
                            @item.ToDescription()
                        </label>
                    </div>
                        }
                    }

                }
            </div>
        </div>
        <div class="col-sm-6">
            <div class="content-con">
                <div class="content-title3">
                    <div class="control-label">Coaching Strategies</div>
                </div>
                @foreach (StrategyEnum item in Enum.GetValues(typeof(StrategyEnum)))
                {
                    if (item != StrategyEnum.None)
                    {
                        if (item == StrategyEnum.ReflectiveFeedback)
                        {
                    <div class="checkbox-con checkbox-con-double">
                        <label class="radio-inline" for="strategy_@(item)" >
                            @Html.RadioButtonFor(m => m.StrategyId, item, new { @value = item, id = "strategy_" + item }) @item.ToDescription()</label>
                    </div>
                        }
                        else
                        {
                    <div class="checkbox-con checkbox-con-double">
                        <label class="radio-inline" for="strategy_@(item)" >
                            @Html.RadioButtonFor(m => m.StrategyId, item, new { @value = item, id = "strategy_" + item }) @item.ToDescription()</label>
                    </div>
                        }
                    }
                }
            </div>
        </div>

    </div>
    
    <div class="form-group">
        <div class="col-sm-6">
            <div class="content-con">
                <div class="content-title3">
                    <div class="control-label">
                        Coaching Objectives
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                    </div>
                    <label class="hide" for="Objectives">&nbsp;</label>
                </div>
                <div class="textarea-con">
                    @Html.TextAreaFor(m => m.Objectives, new { @class = "form-control", row = "2" })
                    @Html.ValidationMessageFor(m => m.Objectives)
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="content-con">
                <div class="content-title3">
                    <div class="control-label">
                        Coaching Effectiveness
                        <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                    </div>
                    <label class="hide" for="Effectiveness">&nbsp;</label>
                </div>
                <div class="textarea-con">
                    @Html.TextAreaFor(m => m.Effectiveness, new { @class = "form-control", row = "2" })
                    @Html.ValidationMessageFor(m => m.Effectiveness)
                </div>
            </div>
        </div>
    </div>
    @Html.Partial("/Areas/Coach/Views/Partials/UploadedFile.cshtml")
    <input type="hidden" name="uploadfiles" id="uploadfiles" />
    <div class="modal-footer">
        <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" id="btnSubmit" onclick="return beforeSubmit_edit(this);">
        @if (!string.IsNullOrEmpty(ViewBag.Redirect))
        {
            <button class="mainbutton modal-btn cancel-btn" type="button" data-dismiss="modal"
            onclick='redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index", "Summary"))");' >
                Cancel</button>
        }
        else
        {
            <button class="mainbutton modal-btn cancel-btn" type="button" data-dismiss="modal"
            onclick='redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "ViewAssignmentFiles/" + Model.AssignmentId)");' >
                Cancel</button>
        }
    </div>
}