@model Sunnet.Cli.Business.Vcw.Models.AssignmentModel
@using Sunnet.Cli.UIBase.Models
@using System.Web.Optimization;
@using Sunnet.Cli.Core.Vcw.Enums;
@{
    ViewBag.Title = "SendAssignment";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@section LeftMenu
{
    @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Coach_Teachers)
}

@section BreadPath
{
    @(Html.ActionLink("Coach Teachers", "Index", "TeacherVIP"))&nbsp;
    <i class="icon-angle-right"></i>&nbsp;
    @(Html.ActionLink("Teacher List", "TeacherIndex", "TeacherSendAssignment"))&nbsp;
    <i class="icon-angle-right"></i>&nbsp;
    Send Assignment
}

@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload_file")
    <script type="text/javascript">
        $(function () {

            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "TeacherIndex")");
                }
            })

            var switchHtml = "";
            var $teacher = $("#div_teacher");
            var $vipTeacher = $("#div_teachervip");

            $("#Type").change(
                function () {
                    ShowPartial();
                });

            switchHtml = $vipTeacher[0].outerHTML;
            $vipTeacher.remove();

            function ShowPartial() {
                $teacher = $("#div_teacher");
                $vipTeacher = $("#div_teachervip");
                $("div[class=webuploader-pick]").removeAttr("class");
                var type = $("#Type").val();
                if (type == "@((int)AssignmentTypeEnum.TeacherAssignment)") {
                    if ($vipTeacher.length) {
                        $teacher = $(switchHtml);
                        
                        $vipTeacher.hide();
                        $teacher.show().insertBefore($vipTeacher);
                        switchHtml = $vipTeacher[0].outerHTML;
                        $vipTeacher.remove();
                    }
                    InitUpload();
                }
                if (type == "@((int)AssignmentTypeEnum.TeacherVIP)") {
                    if ($teacher.length) {
                        $vipTeacher = $(switchHtml);

                        $teacher.hide();
                        $vipTeacher.show().insertBefore($teacher);
                        switchHtml = $teacher[0].outerHTML;
                        $teacher.remove();
                    }
                }                
            }      
                        
        });               

        function ContextClick(sender) {
            if ($(sender)[0].checked) {
                $("#ContextOther").removeAttr("disabled");
            } else {
                $("#ContextOther").attr("disabled", "disabled");
                $("#ContextOther").val('');
            }
        }

        function ContentClick(sender) {
            if ($(sender)[0].checked) {
                $("#ContentOther").removeAttr("disabled");
            } else {
                $("#ContentOther").attr("disabled", "disabled");
                $("#ContentOther").val('');
            }
        }

        function getUploaderPrefix() {
            return "@(ViewBag.EncryptUserID)_";
        }            
        

        var arrStgList;
        function receiveStgList(v) {
            if (v) {
                arrStgList = v;
                var tmpSelectStgHtml = TemplateEngine(window["template_stg_select"].innerHTML, v);
                $("#divStgSelect").html(tmpSelectStgHtml);
            }
        }

        function moveStgList(id) {
            for (var i = 0; i < arrStgList.length; i++) {
                if (arrStgList[i].id == id) {
                    arrStgList.splice(i, 1);
                    break;
                }
            }
        }
    </script>
}

@using (Ajax.BeginForm(ViewBag.Teachers == null ? "New" : "NewBatch", "TeacherSendAssignment", null, PostFormHelper.DefaultAjaxOptions, new
    {
        @class = "form-horizontal",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.ReceiveUserId, new { @Value = "" + (int)ViewBag.Teacher + "" })
    @Html.Hidden("teachers", (string)ViewBag.Teachers)
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("TeacherIndex"))" >Back to Teacher List</a>
    </div>
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                <label class="col-sm-3 control-label" for="Type">Assignment Type</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.Type, ViewBag.AssignmentType as IEnumerable<SelectListItem>, new { @class = "form-control" })
                </div>
            </div>
            <div id="div_teacher">
                @Html.Partial("/Areas/Coach/Views/TeacherSendAssignment/Partials/TeacherAssignment.cshtml")
            </div>
            <div id="div_teachervip" style="display: none;">
                @Html.Partial("/Areas/Coach/Views/TeacherSendAssignment/Partials/TeacherVIPAssignment.cshtml")
            </div>
        </div>
        <input type="hidden" name="uploadfiles" id="uploadfiles" />
        <input type="hidden" name="uploadWatchfiles" id="uploadWatchfiles" />
        <div class="button-content">
            <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" id="btnSubmit" onclick="return beforeSubmit('Vcw_Files_Inqueue');">
            <input type="button" class="mainbutton modal-btn cancel-btn" value="Cancel" 
                onclick='redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "TeacherIndex")    ")'>
        </div>
    </div>  
}


