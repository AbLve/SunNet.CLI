@model Sunnet.Cli.Business.Vcw.Models.AssignmentModel
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase.Models;

    <div class="form-group">
        @Html.LabelFor(model => model.DueDate, new { @class = "col-sm-3 control-label required" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.DueDate, new { @class = "form-control date",@Value = Model.DueDate == null ? "" : DateTime.Parse(Model.DueDate.ToString()).FormatDateString()})
        </div>
        @Html.LabelFor(model => model.Wave, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.DropDownListFor(model => model.Wave, ViewBag.Waves as IEnumerable<SelectListItem>, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-6">
            <div class="content-con">
                <div class="content-title3">
                    <div class="control-label">Video Context</div>
                </div>

                @foreach (ContextEnum item in Enum.GetValues(typeof(ContextEnum)))
                {
                    bool isChecked = Model.Contexts.Contains(item);
                    if (item.ToString() == ContextEnum.Other.ToString())
                    {
                    <div class="checkbox-con">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Context" id="context-other" value="@(item.GetValue())" @(isChecked ? "checked" : "")>@item.ToDescription()
                        </label>
                        @Html.TextBoxFor(model => model.ContextOther, new { @class = "form-control" })
                        @Html.LabelFor(model => model.ContextOther, null, new { @class = "control-label hide" })
                    </div>
                    }
                    else
                    {
                    <div class="checkbox-con">
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Context" value="@(item.GetValue())" @(isChecked ? "checked" : "")>@item.ToDescription()
                        </label>
                    </div>
                    }
                }
            </div>
            <div class="content-con">
                <div class="content-title3">
                    <div class="control-label">Upload Type</div>
                </div>
                @foreach (UploadTypeEnum item in Enum.GetValues(typeof(UploadTypeEnum)))
                {
                    bool isChecked = Model.UploadTypes.Contains(item);             
                    <div class="checkbox-con">
                        <label class="checkbox-inline">
                            <input type="checkbox"  name="UploadType" value="@(item.GetValue())" @(isChecked ? "checked" : "")>@item.ToDescription()
                        </label>
                    </div>
                }
            </div>
        </div>
        <div class="col-sm-6">
            <div class="content-con"  style="min-height:310px">
                <div class="content-title3">
                    <div class="control-label">Content</div>
                </div>
                @foreach (AssignmentContent item in Enum.GetValues(typeof(AssignmentContent)))
                {
                    bool isChecked = Model.Contents.Contains(item);
                    if (item.ToString() == AssignmentContent.Other.ToString())
                    {
                    <div class="checkbox-con">
                        <label class="checkbox-inline">
                            <input type="checkbox"  name="Content" id="content-other" value="@item.GetValue()" @(isChecked ? "checked" : "")>@item.ToDescription()
                        </label>
                        @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control"})
                        @Html.LabelFor(model => model.ContentOther, null, new { @class = "control-label hide" })
                    </div>
                    }
                    else
                    {
                    <div class="checkbox-con">
                        <label class="checkbox-inline">
                            <input type="checkbox"  name="Content" value="@item.GetValue()" @(isChecked ? "checked" : "")>@item.ToDescription()
                        </label>
                    </div>
                    }
                }
            </div>

        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">
            <div class="content-con">
                <div class="content-title3">
                    @Html.LabelFor(model => model.Description, null, new { @class = "control-label" })
                </div>
                <div class="textarea-con">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "5" })
                </div>
            </div>
        </div>
    </div>


