@model Sunnet.Cli.Business.Vcw.Models.AssignmentModel
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase.Models;
@using System.Web.Optimization;
@using Sunnet.Cli.Core.Vcw.Entities;
@using Sunnet.Cli.UIBase;



<div class="form-group">
    @Html.LabelFor(model => model.DueDate, new { @class = "col-sm-3 control-label required" })
    <div class="col-sm-3">
        @Html.TextBoxFor(model => model.DueDate, new { @class = "form-control date", @Value = Model.DueDate == null ? "" : DateTime.Parse(Model.DueDate.ToString()).FormatDateString() })
    </div>
    @Html.LabelFor(model => model.CallDate, new { @class = "col-sm-3 control-label required" })
    <div class="col-sm-3">
        @Html.TextBoxFor(model => model.CallDate, new { @class = "form-control date", @Value = Model.CallDate == null ? "" : DateTime.Parse(Model.CallDate.ToString()).FormatDateString() })
    </div>
</div>
<div class="form-group">
    <div class="col-sm-6">
        <div class="content-con" style="min-height: 310px">
            <div class="content-title3">
                <span class="control-label">Content</span>
            </div>
            @foreach (AssignmentContent item in Enum.GetValues(typeof(AssignmentContent)))
            {
                bool isChecked = Model.Contents.Contains(item);
                if (item.ToString() == AssignmentContent.Other.ToString())
                {
                <div class="checkbox-con">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Content" id="content-other" value="@item.GetValue()" @(isChecked ? "checked" : "") >@item.ToDescription()
                    </label>
                    @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control" })
                    @Html.LabelFor(model => model.ContentOther, null, new { @class = "control-label hide" })
                </div>
                }
                else
                {
                <div class="checkbox-con">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Content" value="@item.GetValue()" @(isChecked ? "checked" : "")>@item.ToDescription()
                    </label>
                </div>
                }
            }
        </div>

    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Video Context</div>
            </div>

            @foreach (ContextEnum item in Enum.GetValues(typeof(ContextEnum)))
            {
                bool isChecked = Model.Contexts.Contains(item);
                if (item.ToString() == ContextEnum.Other.ToString())
                {
                <div class="checkbox-con">
                    <label class="checkbox-inline">
                        <input type="checkbox" id="context-other" name="Context" value="@(item.GetValue())" @(isChecked ? "checked" : "")>@item.ToDescription()
                    </label>
                    @Html.TextBoxFor(model => model.ContextOther, new { @class = "form-control" })
                    @Html.LabelFor(model => model.ContextOther, null, new { @class = "control-label hide" })
                </div>
                }
                else
                {
                <div class="checkbox-con">
                    <label class="checkbox-inline">
                        <input type="checkbox"  name="Context" value="@(item.GetValue())" @(isChecked ? "checked" : "")>@item.ToDescription()
                    </label>
                </div>
                }
            }
        </div>
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Upload Type</div>
            </div>
            @foreach (UploadTypeEnum item in Enum.GetValues(typeof(UploadTypeEnum)))
            {
                bool isChecked = Model.UploadTypes.Contains(item);               
                <div class="checkbox-con">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="UploadType" value="@(item.GetValue())" @(isChecked ? "checked" : "")>@item.ToDescription()
                    </label>
                </div>
            }
        </div>
    </div>
</div>
<div class="form-group">
    <div class="col-sm-3">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Watch</div>
            </div>
            <div class="inputtext-con">
                @Html.TextBoxFor(model => model.Watch, new { @class = "form-control" })
            </div>
        </div>
    </div>
    <div class="col-sm-3">
        <div class="content-con">
            <div class="content-title3">
                @Html.LabelFor(model => model.Session, new { @class = "control-label" })
            </div>
            <div class="inputtext-con">
                @Html.DropDownListFor(model => model.Session, ViewBag.Sessions as IEnumerable<SelectListItem>, new { @class = "form-control" })
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label required">Coach Assignment File</div>
            </div>
            <div class="uploader-list">
                @foreach (AssignmentFileEntity item in Model.AssignmentFiles)
                {
                    <div class="item">
                        <i class="icon-paper-clip"></i>
                        <a class="form-link4" 
                            href="@(DownLoadFile.GetDownFilePath(item.FilePath, item.FileName))">@(item.FileName)</a><br />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="form-group">
    <div class="col-sm-12">
        <div class="content-con">
            <div class="content-title3">
                @Html.LabelFor(model => model.Description, null, new { @class = "control-label" })
            </div>
            <div class="textarea-con">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "5" })
            </div>
        </div>
    </div>
</div>


