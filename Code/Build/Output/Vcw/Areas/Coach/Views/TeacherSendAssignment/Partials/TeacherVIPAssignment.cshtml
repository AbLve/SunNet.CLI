@model Sunnet.Cli.Business.Vcw.Models.AssignmentModel
@using Sunnet.Cli.Core.Vcw.Enums;
@using Sunnet.Framework.Extensions;
@using Sunnet.Cli.UIBase.Models;

<div class="form-group">
    @Html.LabelFor(model => model.DueDate, new { @class = "col-sm-3 control-label required" })
    <div class="col-sm-3">
        @Html.TextBoxFor(model => model.DueDate, new { @class = "form-control date", @Value = "" })
        @Html.ValidationMessageFor(model => model.DueDate)
    </div>
    @Html.LabelFor(model => model.Wave, new { @class = "col-sm-3 control-label" })
    <div class="col-sm-3">
        @Html.DropDownListFor(model => model.Wave, ViewBag.Wave as IEnumerable<SelectListItem>, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Wave)
    </div>
</div>
<div class="form-group">
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Video Context</div>
            </div>

            @foreach (ContextEnum item in Enum.GetValues(typeof(ContextEnum)))
            {
                if (item != ContextEnum.None)
                {
                    if (item.ToString() == ContextEnum.Other.ToString())
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Context" onclick="ContextClick(this)" id="context-other" value="@(item.GetValue())">@item.ToDescription()
                        &nbsp;&nbsp;
                    </label>
                    @Html.TextBoxFor(model => model.ContextOther, new { @class = "form-control form-control-double", @disabled = "disabled" })
                    @Html.LabelFor(model => model.ContextOther, null, new { @class = "control-label hide" })
                </div>
                    }
                    else
                    {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="Context" value="@(item.GetValue())">@item.ToDescription()
                    </label>
                </div>
                    }
                }
            }
        </div>
    </div>
    <div class="col-sm-6">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">Content</div>
            </div>
            @foreach (AssignmentContent item in Enum.GetValues(typeof(AssignmentContent)))
            {
                if (item.ToString() == AssignmentContent.Other.ToString())
                {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox"  name="Content" id="content-other" onclick="ContentClick(this)"  value="@item.GetValue()">@item.ToDescription()
                        &nbsp;&nbsp;
                    </label>
                    @Html.TextBoxFor(model => model.ContentOther, new { @class = "form-control form-control-double", @disabled = "disabled" })
                    @Html.LabelFor(model => model.ContentOther, null, new { @class = "control-label hide" })
                </div>
                }
                else
                {
                <div class="checkbox-con checkbox-con-double">
                    <label class="checkbox-inline">
                        <input type="checkbox"  name="Content" value="@item.GetValue()">@item.ToDescription()
                    </label>
                </div>
                }
            }
        </div>

    </div>
</div>
<div class="form-group">
    <div class="col-sm-12">
        <div class="content-con">
            <div class="content-title3">
                <div class="control-label">
                    @Html.LabelFor(model => model.Description)
                    <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                </div>
            </div>
            <div class="textarea-con">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "5" })
                @Html.ValidationMessageFor(model => model.Description)
            </div>
        </div>
    </div>
</div>


