@model Sunnet.Cli.Business.Vcw.Models.CoachFileModel
@using Sunnet.Cli.UIBase.Models;
@using Sunnet.Cli.Core.Vcw.Enums;
@using System.Web.Optimization;
@using Sunnet.Cli.Business.Vcw.Models;
@using Sunnet.Framework.Extensions;

@{
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    List<CoachListModel> Coaches = ViewBag.Coaches as List<CoachListModel>;
}

@section LeftMenu
{
    @Html.Partial("~/views/Shared/_Partial_Left.cshtml", LeftmenuModel.Coach_General)
}

@section BreadPath
    {
    @(Html.ActionLink("Coach General", "Index", "General"))&nbsp;
        <i class="icon-angle-right"></i>&nbsp;
        Upload File
    }

@section Scripts
{
    @Scripts.Render("~/scripts/upload")
    @Scripts.Render("~/scripts/vcw_upload")
    <script type="text/javascript">

        $(function () {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "Index")");
                }
            });

            $("#coach_all").click(function () {
                if ($(this)[0].checked) {
                    $("input[name=Coach]").each(
                        function () {
                            $(this)[0].checked = true;
                        }
                        );
                } else {
                    $("input[name=Coach]").each(
                        function () {
                            $(this)[0].checked = false;
                        }
                        );
                }
            })
        })

            function getUploaderPrefix() {
                return "@(ViewBag.EncryptUserID)_";
            }

            function StrategyClick(sender) {
                if ($(sender)[0].value == '@(StrategyEnum.Other)') {
                    if ($(sender)[0].checked) {
                        $("#StrategyOther").removeAttr("disabled");
                    }
                }
                else {
                    $("#StrategyOther").attr("disabled", "disabled");
                    $("#StrategyOther").val('');
                }

            }

            function CancelAll(sender) {
                if ($(sender)[0].checked == false) {
                    $("#coach_all").removeAttr("checked");
                }
            }

    </script>
}
@using (Ajax.BeginForm("Upload", "General", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        role = "form",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))" >Back to General List</a>
    </div>
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                <div class="col-sm-4">
                    <div class="content-con">
                        <div class="content-title3">
                            @Html.LabelFor(model => model.IdentifyFileName, new { @class = "control-label required" })
                        </div>
                        <div class="inputtext-con">
                            @Html.TextBoxFor(model => model.IdentifyFileName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.IdentifyFileName)
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="content-con">
                        <div class="content-title3">
                            <label class="control-label" for="DateRecorded">Date Video Recorded</label>
                        </div>
                        <div class="inputtext-con">
                            @Html.TextBoxFor(m => m.DateRecorded, new { @class = "form-control date", @Value = "" })
                            @Html.ValidationMessageFor(m => m.DateRecorded)
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label required">
                                Upload File 
                                (<span class="redtext">@ViewTextHelper.Vcw_UploadTitle</span>)
                                <span class="control-label-text-r">@ViewTextHelper.Vcw_UploadLimit</span>
                            </div>
                        </div>
                        <div class="upload-btn">
                            <div id="picker">1) Select File to Upload</div>
                        </div>
                        <div id="filelists" class="uploader-list"></div>
                        <div class="upload-btn">
                            <a id="ctlBtn">2) Start Upload</a>
                        </div>
                        <input type="hidden" id="filetarget" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                Coaching Strategies
                            </div>
                        </div>
                        @foreach (StrategyEnum item in Enum.GetValues(typeof(StrategyEnum)))
                        {
                            if (item != StrategyEnum.None)
                            {
                                if (item == StrategyEnum.Other)
                                {
                            <div class="checkbox-con">
                                <label class="radio-inline">
                                    @Html.RadioButtonFor(m => m.StrategyId, item, new { onclick = "StrategyClick(this)" })@item.ToDescription()
                                </label>
                                @Html.TextBoxFor(model => model.StrategyOther, new { @class = "form-control", @disabled = "disabled" })
                                @Html.LabelFor(model => model.StrategyOther, null, new { @class = "control-label hide" })
                                @Html.ValidationMessageFor(model => model.StrategyOther)
                            </div>
                                }
                                else
                                {
                            <div class="checkbox-con">
                                <label class="radio-inline">
                                    @Html.RadioButtonFor(m => m.StrategyId, item, new { onclick = "StrategyClick(this)" })@item.ToDescription()
                                </label>
                            </div>
                                }
                            }
                        }
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">Send Upload To PM</div>
                        </div>
                        <div class="checkbox-con">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="pm" @(ViewBag.PM ? "" : "disabled")>Project Manager
                            </label>
                        </div>
                        <div class="content-title3">
                            <div class="control-label">Send Upload To Coach</div>
                        </div>
                        @if (Coaches != null)
                        {
                            if (Coaches.Count > 0)
                            {
                            <div style="min-height: 150px; max-height: 150px; overflow-y: scroll">
                                <div class="checkbox-con">
                                    <label class="checkbox-inline">
                                        <input type="checkbox" id="coach_all">All
                                    </label>
                                </div>
                                @foreach (CoachListModel item in ViewBag.Coaches as List<CoachListModel>)
                                {
                                    <div class="checkbox-con">
                                        <label class="checkbox-inline">
                                            <input type="checkbox"   name="Coach" value="@(item.UserId)" onclick="CancelAll(this)">@item.Name
                                        </label>
                                    </div>                              
                                }
                            </div>       
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                Coaching Objectives
                                <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                            </div>
                            <label for="Objectives" class="hide">&nbsp;</label>
                        </div>
                        <div class="textarea-con">
                            @Html.TextAreaFor(m => m.Objectives, new { @class = "form-control", row = "2" })
                            @Html.ValidationMessageFor(m => m.Objectives)
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="content-con">
                        <div class="content-title3">
                            <div class="control-label">
                                Coaching Effectiveness
                                <span class="control-label-text-r">@ViewTextHelper.Vcw_DescriptionLimit</span>
                            </div>
                            <label class="hide" for="Effectiveness">&nbsp;</label>
                        </div>
                        <div class="textarea-con">
                            @Html.TextAreaFor(m => m.Effectiveness, new { @class = "form-control", row = "2" })
                            @Html.ValidationMessageFor(m => m.Effectiveness)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" name="uploadfiles" id="uploadfiles" />
    <div class="modal-footer">
        <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit" id="btnSubmit" onclick="return beforeSubmit_new(this);">
        <button class="mainbutton modal-btn cancel-btn" type="button" data-dismiss="modal" 
            onclick='redirectBack("@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? "Index")")'>
            Cancel</button>
    </div>
}