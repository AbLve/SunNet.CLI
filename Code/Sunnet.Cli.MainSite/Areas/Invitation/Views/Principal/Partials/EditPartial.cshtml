@model Sunnet.Cli.Core.Users.Entities.PrincipalEntity
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Cli.Core.Users.Entities
@using Sunnet.Framework.Extensions
@using Sunnet.Cli.Core.Common.Enums
@using Sunnet.Cli.Core.Users.Enums
@using Sunnet.Cli.Business.Permission.Models
@{
    bool isPrincipal = ViewBag.RoleType == Role.Principal_Delegate;
    string iDText = isPrincipal ? "My Delegate Engage ID" : "Principal/Director Engage ID";
    IEnumerable<SelectItemModel> pDList = ViewBag.PDList;
    IEnumerable<SelectItemModel> certificateList = ViewBag.CertificateList;
    certificateList = certificateList.Where(e => e.Selected == true).ToList();
}


@Html.HiddenFor(model => model.ID)
@Html.HiddenFor(model => model.UserInfo.ID)
@Html.HiddenFor(model => model.UserInfo.GoogleId)
@Html.HiddenFor(model => model.UserInfo.Role)
@Html.HiddenFor(model => model.UserInfo.StatusDate)
@Html.HiddenFor(model => model.ParentId)
@Html.HiddenFor(model => model.UserInfo.Sponsor)
@Html.HiddenFor(model => model.UserInfo.InvitationEmail)
@Html.HiddenFor(model => model.UserInfo.EmailExpireTime)
@Html.HiddenFor(model => model.UserInfo.Notes)
@Html.HiddenFor(model => model.UserInfo.CreatedOn)
@Html.HiddenFor(x => x.UserInfo.Gmail)
@Html.Hidden("confirm", false)
<input type='hidden' name='certificates' id='txtCers' value="@ViewBag.CertificateText" />
@Html.AntiForgeryToken()
<div class="content-title">Basic Information</div>
<div class="content-body">
    <div class="form-group">
        @Html.Label("", "School", new { @class = "col-sm-2 control-label", @for = "txtSchool" })
        <div class="col-sm-10">
            @if (isPrincipal)
            {
                @Html.Display("X", "List", new { Objects = ViewBag.ParentSchoolNames })
            }
            else
            {
                @Html.Display("X", "List", new { Objects = Model.UserInfo.UserCommunitySchools.Select(x => x.School.Name).ToArray() })
            }
            @Html.Hidden("schoolId", 0)
        </div>
    </div>
    <div class="form-group">
        @Html.Label("PrincipalId", iDText, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.PrincipalId, new { @class = "form-control", @readonly = "readonly" })
        </div>
        @Html.LabelFor(model => model.SchoolYear, null, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.SchoolYear, new { @class = "form-control", @readonly = "readonly" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UserInfo.FirstName, null, new { @class = "col-sm-2 control-label required" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.UserInfo.FirstName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UserInfo.FirstName)
        </div>
        @Html.LabelFor(model => model.UserInfo.MiddleName, null, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.UserInfo.MiddleName, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UserInfo.LastName, null, new { @class = "col-sm-2 control-label required" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.UserInfo.LastName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UserInfo.LastName)
        </div>
        @Html.LabelFor(model => model.UserInfo.PreviousLastName, null, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.UserInfo.PreviousLastName, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.BirthDate, null, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.BirthDate, new { @class = "form-control date", @Value = DateTime.Parse(Model.BirthDate.ToString()).FormatDateString() })
        </div>
        <span class="col-sm-2 control-label">@Html.DisplayNameFor(model => model.Gender)</span>
        <div class="col-sm-4">
            @Html.RadioButtonFor(model => model.Gender, Gender.Male, new { id = "Gender1" })
            @Html.Label("", Gender.Male.ToDescription(), new { @for = "Gender1" })
            @Html.RadioButtonFor(model => model.Gender, Gender.Female, new { id = "Gender2" })
            @Html.Label("", Gender.Female.ToDescription(), new { @for = "Gender2" })
            @Html.RadioButtonFor(model => model.Gender, 0, new { id = "Gender3", @class = "hide" })
            @Html.Label("Gender3", new { @class = "hide" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Ethnicity, null, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.EnumDropDownListFor(model => model.Ethnicity, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
            @Html.LabelFor(model => model.EthnicityOther, new { @class = "control-label hide" })
            @Html.TextBoxFor(model => model.EthnicityOther, new { @class = "form-control", type = "hidden" })
        </div>
        @Html.LabelFor(model => model.PrimaryLanguageId, null, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.DropDownListFor(e => e.PrimaryLanguageId, (IEnumerable<SelectListItem>)ViewBag.Language, new { @class = "form-control" })
            @Html.LabelFor(model => model.PrimaryLanguageOther, new { @class = "control-label hide" })
            @Html.TextBoxFor(model => model.PrimaryLanguageOther, new { @class = "form-control", type = "hidden" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.PositionId, null, new { @class = "col-sm-2 control-label required" })
        <div class="col-sm-4">
            @Html.DropDownListFor(e => e.PositionId, (IEnumerable<SelectListItem>)ViewBag.PositionOptions, new { @class = "form-control" })
            @Html.LabelFor(model => model.PositionOther, new { @class = "control-label hide" })
            @Html.TextBoxFor(model => model.PositionOther, new { @class = "form-control", type = "hidden" })
            @Html.ValidationMessageFor(model => model.PositionId)
        </div>
        @Html.LabelFor(model => model.UserInfo.Status, null, new { @class = "col-sm-2 control-label required" })
        <div class="col-sm-4">
            @Html.DropDownListFor(model => model.UserInfo.Status, Model.UserInfo.Status.ToSelectList(), new { @class = "form-control", onchange = "changeInactive(this);" })
            @Html.ValidationMessageFor(model => model.UserInfo.Status)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UserInfo.InternalID, null, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.UserInfo.InternalID, new { @class = "form-control" })
        </div>
    </div>
</div>

<div class="content-title">Contact Information</div>
<div class="content-body">
    <div class="form-group">
        <span class="col-sm-4 control-label">@Html.DisplayNameFor(model => model.IsSameAddress)</span>
        <div class="col-sm-8">
            @Html.RadioButtonFor(model => model.IsSameAddress, 1, new { id = "IsSameAddress1" })
            @Html.Label("", ViewTextHelper.BoolInTexts[true], new { @for = "IsSameAddress1" })
            @Html.RadioButtonFor(model => model.IsSameAddress, 2, new { id = "IsSameAddress2" })
            @Html.Label("", ViewTextHelper.BoolInTexts[false], new { @for = "IsSameAddress2" })
            @Html.RadioButtonFor(model => model.IsSameAddress, 0, new { id = "IsSameAddress3", @class = "hide" })
            @Html.Label("IsSameAddress3", new { @class = "hide" })
            <br />@Html.ValidationMessageFor(model => model.IsSameAddress)
        </div>
    </div>
    <form class="form-horizontal" role="form">
        <div class="form-group">
            @Html.LabelFor(model => model.Address, null, new { @class = "col-sm-3 control-label required" })
            <div class="col-sm-9">
                @Html.TextBoxFor(model => model.Address, new { @class = "form-control m-b", placeholder = "Address 1*" })
                @Html.ValidationMessageFor(model => model.Address)
                @Html.LabelFor(model => model.Address2, null, new { @class = "control-label hide" })
                @Html.TextBoxFor(model => model.Address2, new { @class = "form-control m-b", placeholder = "Address 2(optional)" })
                <div class="col-lg-3 m-l-n">
                    @Html.LabelFor(model => model.City, null, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.City, new { @class = "form-control", placeholder = "City*" })
                    @Html.ValidationMessageFor(model => model.City)
                </div>
                <div class="col-lg-3 m-l-n">
                    @Html.LabelFor(model => model.StateId, null, new { @class = "control-label hide" })
                    @Html.DropDownListFor(model => model.StateId, (IEnumerable<SelectListItem>)ViewBag.State,
                            new { @class = "form-control", placeholder = "State*", data_bind = "value:selectedState" })
                    @Html.ValidationMessageFor(model => model.StateId)
                </div>
                <div class="col-lg-3 m-l-n">
                    @Html.LabelFor(model => model.CountyId, null, new { @class = "control-label hide" })
                    @Html.DropDownListFor(model => model.CountyId, (IEnumerable<SelectListItem>)ViewBag.County,
                            new
                            {
                                @class = "form-control",
                                placeholder = "County*",
                                data_bind = "options: countiesOptions, optionsText: 'Text', optionsValue: 'Value',value:selectedCounty"
                            })
                    @Html.ValidationMessageFor(model => model.CountyId)
                </div>
                <div class="col-lg-3 m-l-n">
                    @Html.LabelFor(model => model.Zip, null, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.Zip, new { @class = "form-control _num_5", placeholder = "Zip*" })
                    @Html.ValidationMessageFor(model => model.Zip)
                </div>
            </div>
        </div>
    </form>
    <div class="form-group">
        @Html.LabelFor(model => model.UserInfo.PrimaryPhoneNumber, null, new { @class = "col-sm-3 control-label required" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.UserInfo.PrimaryPhoneNumber, new { @class = "form-control _homephone" })
            @Html.ValidationMessageFor(model => model.UserInfo.PrimaryPhoneNumber)
        </div>
        @Html.LabelFor(model => model.UserInfo.PrimaryNumberType, null, new { @class = "col-sm-3 control-label required" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(model => model.UserInfo.PrimaryNumberType, ViewTextHelper.DefaultPleaseSelectText, "", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UserInfo.PrimaryNumberType)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UserInfo.SecondaryPhoneNumber, null, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.UserInfo.SecondaryPhoneNumber, new { @class = "form-control _homephone" })
        </div>
        @Html.LabelFor(model => model.UserInfo.SecondaryNumberType, null, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(model => model.UserInfo.SecondaryNumberType, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UserInfo.FaxNumber, null, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.UserInfo.FaxNumber, new { @class = "_phone form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UserInfo.PrimaryEmailAddress, null, new { @class = "col-sm-3 control-label required" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.UserInfo.PrimaryEmailAddress, new { @class = "form-control email" })
            @Html.ValidationMessageFor(model => model.UserInfo.PrimaryEmailAddress)
        </div>
        @Html.LabelFor(model => model.UserInfo.SecondaryEmailAddress, null, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.UserInfo.SecondaryEmailAddress, new { @class = "form-control email" })
            @Html.ValidationMessageFor(model => model.UserInfo.SecondaryEmailAddress)
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Receive Requests for new", null, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            <span style="padding-top: 6px; vertical-align: middle;">
                <label for="SchoolLevelRequest" class="control-label">School Level Requests </label>
                @Html.CheckBoxFor(model => model.SchoolLevelRequest)</span>
        </div>
    </div>
</div>
<div class="content-title">Professional Information</div>
<div class="content-body">
    <div class="form-group">
        @Html.LabelFor(model => model.TotalYearCurrentRole, null, new { @class = "col-sm-5 control-label" })
        <div class="col-sm-7">
            @Html.TextBoxFor(model => model.TotalYearCurrentRole, new { @class = "_num_2 form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.TotalYearSchoolWorking, null, new { @class = "col-sm-5 control-label" })
        <div class="col-sm-7">
            @Html.TextBoxFor(model => model.TotalYearSchoolWorking, new { @class = "_num_2 form-control" })
        </div>
    </div>
    <div class="form-group">
        <span class="col-sm-5 control-label">In What areas have you received Professional Development(PD) in over the last 12 months?<br>
            (check all that apply)
        </span>
        <div class="col-sm-7">
            @foreach (var item in pDList)
            {
                string stChecked = "";
                if (Model.UserInfo.ProfessionalDevelopments.Where(e => e.ID == item.ID).Count() > 0)
                {
                    stChecked = "checked='checked'";
                }
                <div class="with50">
                    <label class="checkbox-inline">
                        <input type="checkbox" name="chkPDs" @(stChecked) pdtext="@item.Name" value="@item.ID">
                        @item.Name
                    </label>
                </div>
            }
            @Html.LabelFor(model => model.PDOther, new { @class = "control-label hide" })
            @Html.TextBoxFor(model => model.PDOther, new { @class = "form-control", type = (Model.PDOther == "" ? "hidden" : "text") })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.EducationLevel, null, new { @class = "col-sm-5 control-label" })
        <div class="col-sm-7">
            @Html.EnumDropDownListFor(model => model.EducationLevel, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <span class="col-sm-5 control-label">Certificates and Credentials (check all that apply)
        </span>
        <div class="col-sm-7" id="dvCertificate">
            @foreach (var item in certificateList)
            {
                <span class="col-lg-8 control-label m-l-n m-b">
                    @item.Name
                </span>
                <div class="col-lg-4 m-l-n m-b">
                    <label class="radio-inline">
                        <input type="radio" name="certificate@(item.ID)" @(Model.UserInfo.Certificates.Where(e => e.ID == item.ID).Count() > 0 ? "checked='checked'" : "") value="@item.ID">
                        Yes
                    </label>
                    <label class="radio-inline">
                        <input type="radio" name="certificate@(item.ID)" @(Model.UserInfo.Certificates.Where(e => e.ID == (item.ID + 1)).Count() > 0 ? "checked='checked'" : "") value="@(item.ID + 1)">
                        No
                    </label>
                </div>
            }
        </div>
    </div>
</div>


