@using Sunnet.Framework.Extensions
@model Sunnet.Cli.Business.Users.Models.TeacherUserModel
@{
    ViewBag.Title = "Bulk Add/Update Teachers";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}
@section BreadPath
{
    @(Html.ActionLink("User Management", "Dashboard", "Public"))
    <i class="icon-angle-right"></i>
    @Html.ActionLink("Teacher", "Index", "Teacher")
    <i class="icon-angle-right"></i>Bulk Add/Update Teachers

}
<style>
    .main-con-right {
        width: 98%;
    } 
     input.error {
           border: 1px solid #b94a48;
     }
   select.error {
           border: 1px solid #b94a48;
     }
     label.error {
         color: #b94a48;
     }
   </style>
 <div class="right-content-top"  style="margin-bottom: 20px;">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))" >Back to Teacher List</a>
    </div>
<form class="form-horizontal" role="form" id="BesSearch">
    <div class="form-group" id="divComSch">
        @Html.LabelFor(m => m.CommunityName, new { @class = "control-label col-sm-2", @for = "txtCommunity" })
        <div class="col-sm-3">
            @Html.TextBox("txtCommunity", "", new
                {
                    autocomplete = "off",
                    @class = "form-control",
                    data_list = "true",
                    data_for = "#CommunityId",
                    data_remote = "/Community/Community/GetCommunitySelectList",
                    data_text = "Name",
                    data_value = "ID",
                    id = "txtCommunity",
                    name = "txtCommunity",
                    @for = "CommunityId",
                    placeholder = "Enter key text to search",
                    data_bind = "value: searchCriteria.txtCommunity"
                   
                })
              @Html.HiddenFor(model => model.CommunityId, new
               {
                   @class = "form-control validate",
                   placeholder = "Selected Community"
               })
                @Html.ValidationMessageFor(model => model.CommunityId)
        </div>
        @Html.LabelFor(m => m.SchoolName, new
       {
           @class = "control-label col-sm-2",
           @for = "txtSchool"
       })
        <div class="col-sm-3">
            @Html.TextBox("txtSchool", "", new
                {
                    autocomplete = "off",
                    @class = "form-control",
                    data_list = "true",
                    data_for = "#SchoolId",
                    data_remote = "/School/School/GetSchoolSelectList",
                    data_text = "Name",
                    data_value = "ID",
                    id = "txtSchool",
                    name = "txtSchool",
                    @for = "SchoolId",
                    placeholder = "Enter key text to search",
                    data_extraParams = "{\"communityId\":\"#CommunityId\"}",
                    data_bind = "value: searchCriteria.txtSchool"
                })
            @Html.HiddenFor(model => model.SchoolId, new
               {
                   @class = "form-control validate",
                   placeholder = "Selected SchoolId",
                   @Value = (Model.SchoolId == 0 ? "" : Model.SchoolId.ToString())
               })
      @Html.ValidationMessageFor(model => model.SchoolId)
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Code", "Teacher ID", new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.Code, new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.teacherCode"
            })
        </div>
        @Html.LabelFor(m => m.Status, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(x => x.Status, ViewTextHelper.DefaultAllText, "-1", new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.status"
            })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.FirstName, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.FirstName, new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.firstName"
            })
        </div>
        @Html.LabelFor(m => m.LastName, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.TextBoxFor(model => model.LastName, new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.lastName"
            })
        </div>
        <div class="col-sm-2">
            <button class="mainbutton mainright-btn sreach-btn" type="button" onclick="searchForm()">Search</button>
        </div>
    </div>

    <div class="main-content main-content" >
        <div class="content-title">
            Teachers 
        </div>
        <div class="content-body-tab">
            <table class="table table-striped table-hover p-table-list">
                <thead>
                    <tr data-bind="foreach: { data: headers, as: 'header' }">

                        <!-- ko if: (header.order === true)-->
                        <th data-bind="style: { width: width }">
                            <a href="javascript:;" data-bind="html: text, click: $root.changeOrder"></a>
                            <span class="glyphicon"
                                data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                            <span class="glyphicon"
                                data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                        </th>
                        <!-- /ko-->
                        <!-- ko if: (header.order === false) -->
                        <th data-bind="text: text, style: { width: width }"></th>
                        <!-- /ko-->
                    </tr>
                </thead>
                <tbody id="listBody" data-bind="foreach: { data: showRecords, as: 'item' }">
                    <tr data-bind="css:{'new-table-list':created}">
                        <td>
                           
                            <span data-bind="text:$index()+1"></span>
                        </td>
                        <td>
                            <label style="display: none" data-bind="attr:{for:'IsInvitation'+$index()}">wave</label>
                            <input type="checkbox" id="chkIsInvitation"
                                data-bind="checked:item.IsInvitation,attr:{id:'IsInvitation'+$index(),
    name:'IsInvitation'+$index()}" />
                        </td> 
                     
                        
                        <td>
                            <label style="display: none" data-bind="attr:{for:'FirstName'+$index()}">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                style="display: inline-block;" data-bind="value: item.FirstName,attr:{id:'FirstName'+$index(),name:'FirstName'+$index()},required:true" />
                        </td>
                        <td>
                            <label style="display: none" data-bind="attr:{for:'MiddleName'+$index()}">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                style="display: inline-block;" data-bind="value: item.MiddleName,attr:{id:'MiddleName'+$index(),name:'MiddleName'+$index()}" />
                        </td>
                        <td>
                            <label style="display: none" data-bind="attr:{for:'LastName'+$index()}">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                style="display: inline-block;" data-bind="value: item.LastName,attr:
                        {id:'LastName'+$index(),name:'LastName'+$index()},required:true" />
                        </td> 
                          
                        
                        <td>
                            <label style="display: none" data-bind="attr:{for:'Status'+$index()}">wave</label>
                            <select class="form-control" data-bind="
    value: item.Status.value,
    options:$root.statusOptions,
    optionsText:'text',
    optionsValue:'value',attr:{id:'Status'+$index(),name:'Status'+$index(),required:true}">
                            </select>
                        </td>
                        <td>
                            <label style="display: none" data-bind="attr:{for:'TeacherNumber'+$index()}">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                style="display: inline-block;" data-bind="value: item.TeacherNumber,attr:
                             {id:'TeacherNumber'+$index(),name:'TeacherNumber'+$index()},css:{'input-validation-error':hasNoTeacherNumber}" />
                        </td> 
                        <td>
                            <label style="display: none" data-bind="attr:{for:'EmployedBy'+$index()}">wave</label>
                            <select class="form-control " data-bind="
                                options:$root.employedByOptions,
                                optionsText:'text',
                                optionsValue:'value',
                                value: item.EmployedBy.value,
                                attr:{id:'EmployedBy'+$index(),name:'EmployedBy'+$index(),required:true}">
                             </select>
                        </td>
                        <td>
                            <label style="display: none" data-bind="attr:{for:'PrimaryEmail'+$index()}">wave</label>
                            <input type="text" class="form-control email input-sm" maxlength="100"
                                   style="display: inline-block;" data-bind="value: item.PrimaryEmail,attr:
                        {id:'PrimaryEmail'+$index(),name:'PrimaryEmail'+$index()},required:true,email:true" />
                        </td>
                         <td>
                            <label style="display: none" data-bind="attr:{for:'PrimaryPhoneNumber'+$index()}">wave</label>
                            <input type="text" class="form-control _homephone input-sm" maxlength="100"
                                style="display: inline-block;" data-bind="value: item.PrimaryPhoneNumber,attr:
                        {id:'PrimaryPhoneNumber'+$index(),name:'PrimaryPhoneNumber'+$index()}" />
                        </td>
                        <td>
                            <label style="display: none" data-bind="attr:{for:'FaxNumber'+$index()}">wave</label>
                            <input type="text" class="form-control _phone input-sm" maxlength="100"
                                   style="display: inline-block;" data-bind="value: item.FaxNumber,attr:
                        {id:'FaxNumber'+$index(),name:'FaxNumber'+$index()}" />
                        </td>
                        <td>
                            <!-- ko if: created -->
                         <a href="#" class="table-btn icon-minus minus-btn" data-bind="event: { click: $root.deleteTeacher }" title="Delete"></a>
                            <!--/ko-->
                            <!-- ko if: ($index()+1) === list_Teachers.showRecords().length -->
                            <a class="table-btn icon-plus  create-btn" data-bind="event: { click: $root.newRow }" href="#" title="New Teacher"></a>
                            <!--/ko-->  
                        </td>
                    </tr>
                </tbody>
                @Html.Display("e", "NoData", new { Colspan = 11 })
            </table>

            @Html.Partial("_Partial_Pager")
        </div> 
    </div>
</form>
@using (Ajax.BeginForm("BESSave", null, null, PostFormHelper.DefaultAjaxOptions, new
{
    id = formId,
    data_bind = "visible:changed"
}))
{
    @Html.AntiForgeryToken()
    @Html.Hidden("confirm", false)
    <input type="hidden" name="Teachers" id="Teachers" />
    <input type="hidden" name="debug" value="true" />
    <div class="modal-footer">
        <button class="mainbutton modal-btn submit-btn" type="button" data-bind="click:submit">Submit</button>
    </div>
}
@section Scripts
{
    <script type="text/javascript">
        ko.bindingHandlers.datalist = {
            init: function(element, valueAccessor, allBinding, viewModel, bindingContext) {
                $(element).datalist();
            }
        };
        var list_Teachers = {};

        function getOptions(positions, status, employedBys) {
            var pleaseSelect = '@(ViewTextHelper.DefaultPleaseSelectText)';

            status.unshift({ text: pleaseSelect, value: '' });
            employedBys.unshift({ text: pleaseSelect, value: '' });
            return {
                positionOptions: positions,
                statusOptions: status,
                employedByOptions: employedBys
            };
        }

        var options = getOptions(@(Html.Raw(ViewBag.PositionOptions)), @(Html.Raw(ViewBag.StatusJson)), @(Html.Raw(ViewBag.EmployedByOptions)));
        var schoolPhoneNumber = "";

        function Teacher(defaultValues) {
            this.hasNoTeacherNumber = ko.observable(false);
            var self = this;
            this.ID = 0;
            this.FirstName = "";
            this.MiddleName = "";
            this.LastName = "";
            this.EmployedBy = { value: 4 }; //NonApplicable
            this.Status = { value: 1 }; //Active
            this.TeacherNumber = "";
            this.PrimaryPhoneNumber = schoolPhoneNumber;
            this.PrimaryEmail = "";
            this.FaxNumber = "";
            this.IsInvitation = 0;
            this.changed = ko.observable(false);
            var fieldChanged = function(newVal) {
                self.changed(true);
            };

            if (defaultValues) {
                $.extend(self, defaultValues);
            }
            this.FirstName = ko.observable(this.FirstName);
            this.MiddleName = ko.observable(this.MiddleName);
            this.LastName = ko.observable(this.LastName);
            this.EmployedBy.value = ko.observable(this.EmployedBy.value === 0 ? '' : this.EmployedBy.value);
            this.Status.value = ko.observable(this.Status.value);
            this.TeacherNumber = ko.observable(this.TeacherNumber);
            this.PrimaryPhoneNumber = ko.observable(this.PrimaryPhoneNumber);
            this.PrimaryEmail = ko.observable(this.PrimaryEmail);
            this.IsInvitation = ko.observable(this.IsInvitation);
            this.FaxNumber = ko.observable(this.FaxNumber);

            if (defaultValues != undefined) {

                this.FirstName.subscribe(
                    function(newVal) {
                        if (defaultValues.FirstName != newVal)
                            self.changed(true);
                    });
                this.MiddleName.subscribe(
                    function(newVal) {
                        if (defaultValues.MiddleName != newVal)
                            self.changed(true);
                    });
                this.LastName.subscribe(
                    function(newVal) {
                        if (defaultValues.LastName != newVal)
                            self.changed(true);
                    });

                this.EmployedBy.value.subscribe(
                    function(newVal) {
                        if (defaultValues.EmployedBy.value != newVal)
                            self.changed(true);
                    });

                this.Status.value.subscribe(
                    function(newVal) {
                        if (defaultValues.Status.value != newVal)
                            self.changed(true);
                    });
                this.TeacherNumber.subscribe(
                    function(newVal) {
                        if (defaultValues.TeacherNumber != newVal)
                            self.changed(true);
                    });
                this.IsInvitation.subscribe(
                    function(newVal) {
                        if (defaultValues.IsInvitation != newVal)
                            self.changed(true);
                    });
                this.PrimaryPhoneNumber.subscribe(
                    function(newVal) {
                        if (defaultValues.PrimaryPhoneNumber != newVal)
                            self.changed(true);
                    });

                this.PrimaryEmail.subscribe(
                    function(newVal) {
                        if (defaultValues.PrimaryEmail != newVal)
                            self.changed(true);
                    });

                this.FaxNumber.subscribe(
                    function(newVal) {
                        if (defaultValues.FaxNumber != newVal)
                            self.changed(true);
                    });
            }

            this.changed(false);

        }

        function getNewTeacher() {
            var teacher = new Teacher();
            teacher.changed(true);
            teacher.created = true;
            return teacher;
        }

        function getTeacher(values) {
            var teacher = new Teacher(values);
            teacher.created = false;
            return teacher;
        }

        $(function() {
            var $form = $("#@(formId)");
            var $formData = $("#BesSearch");
            var inited = false;
            registerFormCallbacks("@(formId)", {
                onPosted: function(response) {

                    if (response.success) {
                        list_Teachers.search();
                    }
                }
            });
            list_Teachers = new ViewModel(
                {
                    instanceName: "list_Teachers",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("BESSearch")))',
                    orderBy: "FirstName",
                    orderDirection: "ASC",
                    pageSize: 50,
                    headers: [
                        {
                            text: '#',
                            width: '5%'
                        },
                        {
                            text: 'Send Invitation',
                            width: '5%'
                        },
                        {
                            text: "<span class='required'>First Name</span>",
                            field: "@Html.NameFor(model => model.FirstName)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "<span  >Middle Name</span>",
                            field: "@Html.NameFor(model => model.MiddleName)",
                            order: true,
                            width: '9%'
                        },
                        {
                            text: "<span class='required'>Last Name</span>",
                            field: "@Html.NameFor(model => model.LastName)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "<span class='required'>Status</span>",
                            field: "@Html.NameFor(model => model.Status)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "Teacher Internal ID",
                            field: "@Html.NameFor(model => model.TeacherNumber)",
                            order: true,
                            width: '8%'
                        },
                        {
                            text: "<span  class='required' >Employed By</span>",
                            field: "@Html.NameFor(model => model.EmployedBy)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "<span class='required'>Primary Email</span>",
                            field: "@Html.NameFor(model => model.PrimaryEmail)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "Primary Phone Number",
                            field: "@Html.NameFor(model => model.PrimaryPhoneNumber)",
                            order: true,
                            width: '8%'
                        },
                        {
                            text: "Fax Number",
                            field: "@Html.NameFor(model => model.FaxNumber)",
                            order: true,
                            width: '8%'
                        }, { text: "Action", width: '8%' }
                    ],
                    searchCriteria: {
                        communityId: ko.observable(window.queryString("communityId", "@ViewBag.CommunityId")),
                        txtCommunity: ko.observable(window.queryString("txtCommunity", "@Html.Raw(ViewBag.CommunityName)")),
                        schoolId: ko.observable(window.queryString("schoolId", "@ViewBag.SchoolId")),
                        txtSchool: ko.observable(window.queryString("txtSchool", "@Html.Raw(ViewBag.SchoolName)")),
                        teacherCode:
                            ko.observable(window.queryString("teacherCode", "")),
                        status:
                            ko.observable(window.queryString("status", 0)),
                        firstName:
                            ko.observable(window.queryString("firstName", "")),
                        lastName: ko.observable(window.queryString("lastName", ""))
                    }
                },
                {
                    dataProcessor: function(items) {
                        var models = [];
                        for (var i = 0; i < items.length; i++) {
                            models.push(getTeacher(items[i]));
                        }
                        if (items.length == 0)
                            list_Teachers.newRow();
                        return models;

                    },
                    newRow: function() {
                        list_Teachers.showRecords.push(getNewTeacher());
                    },
                    deleteTeacher: function(teacher) {
                        list_Teachers.showRecords.remove(teacher);
                    },
                    submit: function() {
                        var teachers = [], changedTeachers = [];

                        if (list_Teachers.changed()) {
                            if ($formData.valid() === false) {
                                window.showMessage("hint", "multiple_Fields_Required");
                                return false;
                            }
                            for (var i = 0; i < list_Teachers.showRecords().length; i++) {
                                var item = list_Teachers.showRecords()[i];
                                if (item.changed()) {
                                    changedTeachers.push(item);
                                }
                            }
                            var hasTeacherId = true;
                            teachers = $.map(changedTeachers, function(item) {
                                if (!item.TeacherNumber()) {
                                    hasTeacherId = false;
                                    item.hasNoTeacherNumber(true);
                                }
                                return {
                                    ID: item.ID,
                                    CommunityId: $("#CommunityId").val(),
                                    SchoolId: $("#SchoolId").val(),
                                    FirstName: item.FirstName(),
                                    MiddleName: item.MiddleName(),
                                    LastName: item.LastName(),
                                    EmployedBy: item.EmployedBy.value(),
                                    Status: item.Status.value(),
                                    TeacherNumber: item.TeacherNumber(),
                                    PrimaryPhoneNumber: item.PrimaryPhoneNumber(),
                                    PrimaryEmail: item.PrimaryEmail(),
                                    FaxNumber: item.FaxNumber(),
                                    IsInvitation: item.IsInvitation()
                                }
                            });
                            if (!hasTeacherId) {
                                jQuery.when(window.waitingConfirm("You have left Teacher Internal ID blank. Do you have a School Teacher ID?", "Yes", "No")).done(function() {
                                    return;
                                }).fail(function() {
                                    $form.find("#Teachers").val(JSON.stringify(teachers));
                                    $form.submit();
                                });
                            } else {
                                $form.find("#Teachers").val(JSON.stringify(teachers));
                                $form.submit();
                            }
                        } else {
                            window.showMessage("success", "Nothing is changed.");
                            return;
                        }
                    }
                }
            );

            $.extend(list_Teachers, options);
            list_Teachers.changed = ko.computed(function() {
                var changed = false;
                for (var i = 0; i < this.showRecords().length; i++) {
                    if (this.showRecords()[i].changed()) {
                        changed = true;
                        break;
                    }
                }
                return changed;
            }, list_Teachers);

            ko.applyBindings(list_Teachers);
            var $txtCommunity = $("#txtCommunity");
            var $txtSchool = $("#txtSchool");
            $txtCommunity.on("selected.sunnet.datalist", function(event) {
                $txtSchool.datalist("clear");
            });
        });

        $(function() {
            $form = $("#@(formId)");
            registerFormCallbacks("@(formId)", {
                onResponsed: function(response) {
                    if (response.success) {
                        $form.find("#confirm").val(false);
                        var promise;
                        if (typeof response.data == "string") {
                            if (response.data == "waiting") {
                                promise = window.waitingAlert("warning", response.msg);
                            } else {
                                promise = window.showMessage("success", response.msg);
                                list_Teachers.search();
                            }
                            $.when(promise).done(function() {

                            });
                        } else if (typeof response.data == "object") {
                            if (response.data != null && response.data.type == "continue") {
                                $.when(window.waitingConfirm(response.msg, "Continue", "Cancel")).done(function() {
                                    $form.find("#confirm").val(true);
                                    $form.submit();
                                }).fail(function() {
                                    $form.find("#confirm").val(false);
                                });
                            } else {
                                window.showMessage("success", response.msg);
                                list_Teachers.search();
                            }
                        }
                    } else if (response.success) {
                        window.showMessage("success", response.msg);
                    } else {
                        window.showMessage("fail",
                            response.msg);
                    }
                }
            });
        });

        function searchForm() {
            if ($("#divComSch input").valid()) {
                list_Teachers.search();
            }
        }
    </script>
}