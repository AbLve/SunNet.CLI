@model Sunnet.Cli.Core.Users.Entities.TeacherEntity
@using System.Web.Optimization
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Cli.Core.Users.Entities
@using Sunnet.Cli.Core.Common.Enums
@using Sunnet.Framework.Extensions
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Cli.Core.Users.Enums
@using Sunnet.Cli.Core.Students.Enums
@{
    ViewBag.Title = "Teacher Invite";
    IEnumerable<SelectItemModel> pDList = ViewBag.PDList;
    IEnumerable<SelectItemModel> certificateList = ViewBag.CertificateList;
    certificateList = certificateList.Where(e => e.Selected == true).ToList();
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@section Scripts
{
    @Scripts.Render("~/scripts/module_teacher")
    <script type="text/javascript">

        var roleJson = @Html.Raw(ViewBag.Role);

        jQuery(function() {
            $("#UserInfo_PrimaryPhoneNumber").rules("remove", "required");  
            $.extend(roleJson, {
                selectedCounty: ko.observable(@Model.CountyId),
                countiesOptions: ko.observableArray([]),
                selectedState: ko.observable(@Model.StateId)
            });
            roleJson.selectedState.subscribe(function(state) {
                $.getJSON('/Invitation/Public/GetNullCountiesByStateId',
                    { stateId: state },
                    function(data) {
                        roleJson.countiesOptions.removeAll();
                        roleJson.countiesOptions.push.apply(roleJson.countiesOptions, data);
                        roleJson.selectedCounty(@Model.CountyId);
                    });
            });

            $form = $("#@(formId)");
            registerFormCallbacks("@(formId)", {
                onResponsed: function (response) {
                    if (response.success) {
                        var promise;
                        if (typeof response.data == "string") {
                            if (response.data == "waiting") {
                                promise = window.waitingAlert("warning", response.msg);
                            } else {
                                promise = window.showMessage("success", response.msg);
                            }
                            $.when(promise).done(function () {
                                redirectBack("Index");
                            });
                        } else if (response.data == null) {
                            $.when(window.showMessage("success", response.msg)).done(function () {
                                redirectBack("Index");
                            });
                        } else if (typeof response.data == "object") {
                            if (response.data.type == "confirmAssign") {
                                $.when(window.waitingConfirm(response.msg, "OK", "Cancel")).done(function () {
                                    location.href = response.data.url + "&returnurl=@(Server.UrlDecode(Request.QueryString["returnurl"]))";
                                });
                            } else if (response.data.type == "noauthority") {
                                $.when(window.waitingAlert("warning", response.msg)).done(function () {
                                    location.href = response.data.url;
                                });
                            } else if (response.data.type == "continue") {
                                $.when(window.waitingConfirm(response.msg, "Continue", "Cancel")).done(function () {
                                    $form.find("#confirm").val(true);
                                    $form.submit();
                                }).fail(function () {
                                    $form.find("#confirm").val(false);
                                });
                            } else if (response.data.type == "confirmEmail") {
                                $.when(window.waitingConfirm(response.msg, "Send", "No")).done(function () {
                                    $.post('@Url.Action("SendEmail")', {
                                        invitationType: response.data.invitationType,
                                        communityId: $("#communityId").val(),
                                        txtCommunity: $("#txtCommunity").val(),
                                        schoolId: $("#schoolId").val(),
                                        txtSchool: $("#txtSchool").val(),
                                        email: $("#UserInfo_PrimaryEmailAddress").val(),
                                        userId: response.data.userId
                                    },
                                        function (responseOfEmail) {
                                            if (responseOfEmail.success) {
                                                window.showMessage("success", "Email sent");
                                            } else {
                                                window.showMessage("fail",
                                                    responseOfEmail.msg);
                                            }

                                        }, "json");
                                });
                                }
                }
    } else {
        window.showMessage("fail",
            response.msg);
    }
                }
            });

            $("#Ethnicity").change(function() {
                if ($("#Ethnicity :selected").text() == "Other")
                    $("#EthnicityOther").attr("type", "text");
                else {
                    $("#EthnicityOther").val("");
                    $("#EthnicityOther").attr("type", "hidden");
                }
            });

            $("#PrimaryLanguageId").change(function() {
                if ($("#PrimaryLanguageId :selected").text() == "Other")
                    $("#PrimaryLanguageOther").attr("type", "text");
                else {
                    $("#PrimaryLanguageOther").val("");
                    $("#PrimaryLanguageOther").attr("type", "hidden");
                }
            });

            $("#SecondaryLanguageId").change(function() {
                if ($("#SecondaryLanguageId :selected").text() == "Other")
                    $("#SecondaryLanguageOther").attr("type", "text");
                else {
                    $("#SecondaryLanguageOther").val("");
                    $("#SecondaryLanguageOther").attr("type", "hidden");
                }
            });

            $("#TeacherType").change(function() {
                if ($("#TeacherType :selected").text() == "Other")
                    $("#TeacherTypeOther").attr("type", "text");
                else {
                    $("#TeacherTypeOther").val("");
                    $("#TeacherTypeOther").attr("type", "hidden");
                }
            });

            $("#CoachAssignmentWay").change(function() {
                if ($("#CoachAssignmentWay :selected").text() == "Other")
                    $("#CoachAssignmentWayOther").attr("type", "text");
                else {
                    $("#CoachAssignmentWayOther").val("");
                    $("#CoachAssignmentWayOther").attr("type", "hidden");
                }
            });

            $("#ECIRCLEAssignmentWay").change(function() {
                if ($("#ECIRCLEAssignmentWay :selected").text() == "Other")
                    $("#ECIRCLEAssignmentWayOther").attr("type", "text");
                else {
                    $("#ECIRCLEAssignmentWayOther").val("");
                    $("#ECIRCLEAssignmentWayOther").attr("type", "hidden");
                }
            });

            $("#ageGroups").change(function() {
                if ($("#ageGroups :selected").text() == "Other")
                    $("#AgeGroupOther").attr("type", "text");
                else {
                    $("#AgeGroupOther").val("");
                    $("#AgeGroupOther").attr("type", "hidden");
                }

            });

            $("#UserInfo_Status").change(function() {
                if ($("#UserInfo_Status").val() == "@((int)EntityStatus.Inactive)")
                    $("#SaveInvite").hide();
                else
                    $("#SaveInvite").show();
            });
            
            $("#dvCertificate input[type='radio']").click(function(event) {
                var $container = $("#txtCers");
                if ($container.length == 0) {
                    $container = $("<input type='hidden' name='certificates' id='txtCers'/>").appendTo($("#@(formId)"));
                }
                var values = "";

                $("#dvCertificate input[type='radio']").each(function(index, radio) {
                    var $r = $(radio);
                    if ($r[0].checked) {
                        values += $r.val() + ",";
                    }
                });
                $container.val(values);
            });

            $("[name='chkPDs']").click(function(event) {
                if ($(this).attr("pdtext") == "Other") {
                    if ($(this).is(":checked"))
                        $("#PDOther").attr("type", "text");
                    else {
                        $("#PDOther").attr("type", "hidden");
                        $("#PDOther").val("");
                    }
                }
            });

            $("#SaveInvite").click(function() {
                $("<input type='hidden' name='isInvite' id='isInvite' value='true' />").appendTo($("#@(formId)"));
            });

            $("#txtCommunity").on("selected.sunnet.datalist", function(event) {
                if (event.selected && event.selected.ID) {
                    $.post("/Invitation/Teacher/GetCoordCoachsByCommunityId?communityId=" + event.selected.ID, function(data) {
                        if (data) {
                            var strHtml = "";
                            for (var i = 0; i < data.length; i++) {
                                strHtml += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                            }
                            $("#CoachId").html("").append(strHtml);
                        }
                    }, 'json');
                    SelectPermissionPackage();
                }
                $("#txtSchool").datalist("clear");
            });

            $("#txtSchool").on("selected.sunnet.datalist", function(obj) {
                SelectPermissionPackage();
            });

            InitControlsByRole();
        });

        function SelectPermissionPackage() {
            $.post("/Invitation/Public/GetAssignedPackages?userType=" + @((int)Role.Teacher) 
                + "&communityId=" + $("#communityId").val() 
                + "&schoolId=" + $("#schoolId").val(), function(result) {
                    if (result) {
                        var strHtml = "";
                        for (i = 0; i < result.length; i++) {
                            strHtml += '<div class="with50">';
                            strHtml += '<label class="checkbox-inline">';
                            strHtml += '<input type="checkbox" name="chkPackages" value="' + result[i].PackageId + '">';
                            strHtml += result[i].PackageName;
                            strHtml += '</label>';
                            strHtml += '</div>';
                        }
                    }
                    $("#dvPackage").html(strHtml);
                }, 'json');
        }
    </script>
}

@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.User)
}

@section BreadPath
{
    @(Html.ActionLink("User Management", "Dashboard", "Public"))
    <i class="icon-angle-right"></i>
    @(Html.ActionLink("Teacher", "Index", "Teacher"))
    <i class="icon-angle-right"></i>New
}

@using (Ajax.BeginForm("SaveInvitation", "Teacher", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    @Html.Hidden("confirm", false)
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))" >Back to Teacher List</a>
    </div>
    <div class="main-content">
        <div class="content-title">Basic Information</div>
        <div class="content-body">
            @if ((Role)ViewBag.RoleType == Role.Principal || (Role)ViewBag.RoleType == Role.Principal_Delegate
                 || (Role)ViewBag.RoleType == Role.TRS_Specialist || (Role)ViewBag.RoleType == Role.TRS_Specialist_Delegate
                 || (Role)ViewBag.RoleType == Role.School_Specialist || (Role)ViewBag.RoleType == Role.School_Specialist_Delegate)
            {
                <div class="form-group">
                    @Html.Label("", "Community/District", new { @class = "col-sm-2 control-label required", @for = "txtCommunity" })
                    <div class="col-sm-4">
                        @Html.TextBox("txtCommunity", (string)ViewBag.CommunityName, new
                   {
                       autocomplete = "off",
                       @class = "form-control",
                       data_list = "true",
                       data_for = "#communityId",
                       data_remote = "/Community/Community/GetCommunitySelectList",
                       data_text = "Name",
                       data_value = "ID",
                       id = "txtCommunity",
                       name = "txtCommunity",
                       @for = "communityId",
                       placeholder = "Enter key text to search"
                   })
                        <input type="hidden" id="communityId" name="communityId" class="validate" data-val="true" data-val-required="true" />
                        @Html.ValidationMessage("communityId", "The Community field is required.")
                    </div>
                    @Html.Label("", "School", new { @class = "col-sm-2 control-label required", @for = "txtSchool" })
                    <div class="col-sm-4">
                        @Html.TextBox("txtSchool", (string)ViewBag.SchoolName, new
                   {
                       autocomplete = "off",
                       @class = "form-control",
                       data_list = "true",
                       data_for = "#schoolId",
                       data_remote = "/School/School/GetPrimarySchoolSelectList",
                       data_text = "Name",
                       data_value = "ID",
                       id = "txtSchool",
                       name = "txtSchool",
                       @for = "schoolId",
                       data_extraParams = "{\"communityId\":\"#communityId\"}",
                       placeholder = "Enter key text to search"
                   })
                        <input type="hidden" id="schoolId" name="schoolId" class="validate" data-val="true" data-val-required="true" />
                        @Html.ValidationMessage("schoolId", "The School field is required.")
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    @Html.Label("", "Community/District", new { @class = "col-sm-2 control-label required", @for = "txtCommunity" })
                    <div class="col-sm-4">
                        @Html.TextBox("txtCommunity", (string)ViewBag.CommunityName, new
                   {
                       autocomplete = "off",
                       @class = "form-control",
                       data_list = "true",
                       data_for = "#communityId",
                       data_remote = "/Community/Community/GetCommunitySelectList",
                       data_text = "Name",
                       data_value = "ID",
                       id = "txtCommunity",
                       name = "txtCommunity",
                       @for = "communityId",
                       placeholder = "Enter key text to search"
                   })
                        <input type="hidden" id="communityId" name="communityId" class="validate" data-val="true" data-val-required="true" />
                        @Html.ValidationMessage("communityId", "The Community field is required.")
                    </div>
                    @Html.Label("", "School", new { @class = "col-sm-2 control-label", @for = "txtSchool" })
                    <div class="col-sm-4">
                        @Html.TextBox("txtSchool", (string)ViewBag.SchoolName, new
                   {
                       autocomplete = "off",
                       @class = "form-control",
                       data_list = "true",
                       data_for = "#schoolId",
                       data_remote = "/School/School/GetPrimarySchoolSelectList",
                       data_text = "Name",
                       data_value = "ID",
                       id = "txtSchool",
                       name = "txtSchool",
                       @for = "schoolId",
                       data_extraParams = "{\"communityId\":\"#communityId\"}",
                       placeholder = "Enter key text to search"
                   })
                        <input type="hidden" id="schoolId" name="schoolId" data-val="true" value="0" />
                    </div>
                </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.TeacherId, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.TeacherId, new { @class = "form-control", @readonly = "readonly" })
                </div>
                @Html.LabelFor(model => model.SchoolYear, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.SchoolYear, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UserInfo.FirstName, null, new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.UserInfo.FirstName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UserInfo.FirstName)
                </div>
                @Html.LabelFor(model => model.UserInfo.MiddleName, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.UserInfo.MiddleName, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UserInfo.LastName, null, new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.UserInfo.LastName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UserInfo.LastName)
                </div>
                @Html.LabelFor(model => model.UserInfo.PreviousLastName, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.UserInfo.PreviousLastName, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EmployedBy, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.EnumDropDownListFor(model => model.EmployedBy, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployedBy)
                </div>
                @Html.LabelFor(model => model.UserInfo.Status, null, new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.UserInfo.Status, Model.UserInfo.Status.ToSelectList(), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UserInfo.Status)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PrimaryLanguageId, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(e => e.PrimaryLanguageId, (IEnumerable<SelectListItem>)ViewBag.Language, new { @class = "form-control", data_bind = "visible:PrimaryLanguageId!='X'" })
                    @Html.LabelFor(model => model.PrimaryLanguageOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.PrimaryLanguageOther, new { @class = "form-control", type = "hidden" })
                </div>
                @Html.LabelFor(model => model.SecondaryLanguageId, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(e => e.SecondaryLanguageId, (IEnumerable<SelectListItem>)ViewBag.Language, new { @class = "form-control" })
                    @Html.LabelFor(model => model.SecondaryLanguageOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.SecondaryLanguageOther, new { @class = "form-control", type = "hidden" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Teacher Number", null, new { @class = "col-sm-2 control-label",@for="UserInfo_InternalID" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.UserInfo.InternalID, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.BirthDate, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.BirthDate, new { @class = "form-control date" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TeacherTSDSID, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.TeacherTSDSID, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.Ethnicity, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.EnumDropDownListFor(model => model.Ethnicity, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                    @Html.LabelFor(model => model.EthnicityOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.EthnicityOther, new { @class = "form-control", type = "hidden" })
                </div>
            </div>
            <div class="form-group">
                <span class="col-sm-2 control-label">@Html.DisplayNameFor(model => model.Gender)</span>
                <div class="col-sm-4">
                    @Html.RadioButtonFor(model => model.Gender, Gender.Male, new { id = "Gender1", data_bind = "disable: Gender == 'R'" })
                    @Html.Label("", Gender.Male.ToDescription(), new { @for = "Gender1" })
                    @Html.RadioButtonFor(model => model.Gender, Gender.Female, new { id = "Gender2", data_bind = "disable: Gender == 'R'" })
                    @Html.Label("", Gender.Female.ToDescription(), new { @for = "Gender2" })
                    @Html.RadioButtonFor(model => model.Gender, 0, new { id = "Gender3", @class = "hide" })
                    @Html.Label("Gender3", new { @class = "hide" })
                </div>
            </div>
        </div>

        <div class="content-title">Contact Information</div>
        <div class="content-body">
            <div class="form-group">
                @Html.LabelFor(model => model.UserInfo.PrimaryEmailAddress, null, new { @class = "col-sm-3 control-label required" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.UserInfo.PrimaryEmailAddress, new { @class = "form-control email" })
                    @Html.ValidationMessageFor(model => model.UserInfo.PrimaryEmailAddress)
                </div>
                @Html.LabelFor(model => model.UserInfo.SecondaryEmailAddress, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.UserInfo.SecondaryEmailAddress, new { @class = "form-control email" })
                    @Html.ValidationMessageFor(model => model.UserInfo.SecondaryEmailAddress)
                </div>
            </div>
            <form class="form-horizontal" role="form">
                <div class="form-group">
                    @Html.LabelFor(model => model.HomeMailingAddress, null, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.HomeMailingAddress, new { @class = "form-control m-b", placeholder = "Address 1" })
                        @Html.LabelFor(model => model.HomeMailingAddress2, null, new { @class = "control-label hide" })
                        @Html.TextBoxFor(model => model.HomeMailingAddress2, new { @class = "form-control m-b", placeholder = "Address 2(optional)" })
                        <div class="col-lg-3 m-l-n">
                            @Html.LabelFor(model => model.City, null, new { @class = "control-label hide" })
                            @Html.TextBoxFor(model => model.City, new { @class = "form-control", placeholder = "City" })
                        </div>
                        <div class="col-lg-3 m-l-n">
                            @Html.LabelFor(model => model.StateId, null, new { @class = "control-label hide" })
                            @Html.DropDownListFor(model => model.StateId, (IEnumerable<SelectListItem>)ViewBag.State,
                                new { @class = "form-control", placeholder = "State", data_bind = "value:selectedState" })
                        </div>
                        <div class="col-lg-3 m-l-n">
                            @Html.LabelFor(model => model.CountyId, null, new { @class = "control-label hide" })
                            @Html.DropDownListFor(model => model.CountyId, (IEnumerable<SelectListItem>)ViewBag.County,
                                new
                                {
                                    @class = "form-control",
                                    placeholder = "County",
                                    data_bind = "options: countiesOptions, optionsText: 'Text', optionsValue: 'Value',value:selectedCounty"
                                })
                        </div>
                        <div class="col-lg-3 m-l-n">
                            @Html.LabelFor(model => model.Zip, null, new { @class = "control-label hide" })
                            @Html.TextBoxFor(model => model.Zip, new { @class = "form-control _num_5", placeholder = "Zip" })
                        </div>
                    </div>
                </div>
            </form>
            <div class="form-group">
                @Html.LabelFor(model => model.UserInfo.PrimaryPhoneNumber, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.UserInfo.PrimaryPhoneNumber, new { @class = "form-control _homephone" })
                </div>
                @Html.LabelFor(model => model.UserInfo.PrimaryNumberType, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.UserInfo.PrimaryNumberType, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UserInfo.PrimaryNumberType)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UserInfo.SecondaryPhoneNumber, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.UserInfo.SecondaryPhoneNumber, new { @class = "form-control _homephone" })
                </div>
                @Html.LabelFor(model => model.UserInfo.SecondaryNumberType, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.UserInfo.SecondaryNumberType, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UserInfo.FaxNumber, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.UserInfo.FaxNumber, new { @class = "_phone form-control" })
                </div>
            </div>
        </div>

        <div class="content-title">Professional Information</div>
        <div class="content-body">
            <div class="form-group">
                @Html.Label("ageGroups", "Age group you are currently teaching", new { @class = "col-sm-5 control-label" })
                <div class="col-sm-7">
                    @Html.DropDownList("ageGroups", (IEnumerable<SelectListItem>)ViewBag.AgeGroup, new { @class = "form-control", multiple = "multiple" })
                    @Html.LabelFor(model => model.AgeGroupOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.AgeGroupOther, new { @class = "form-control", type = "hidden" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TotalTeachingYears, null, new { @class = "col-sm-5 control-label" })
                <div class="col-sm-2">
                    @Html.TextBoxFor(model => model.TotalTeachingYears, new { @class = "_num_2 form-control" })
                </div>
                @Html.LabelFor(model => model.CurrentAgeGroupTeachingYears, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-2">
                    @Html.TextBoxFor(model => model.CurrentAgeGroupTeachingYears, new { @class = "_num_2 form-control" })
                </div>
            </div>
            <div class="form-group">
                <span class="col-sm-5 control-label">In what areas have you received Professional Development(PD) 
                    <br>
                    in over the last 12 months?
                    <br>
                    (check all that apply)</span>
                <div class="col-sm-7">
                    @foreach (var item in pDList)
                    {
                        <div class="with50">
                            <label class="checkbox-inline">
                                <input type="checkbox" name="chkPDs" PDText="@item.Name" value="@item.ID">
                                @item.Name
                            </label>
                        </div>
                    }
                    @Html.LabelFor(model => model.PDOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.PDOther, new { @class = "form-control", type = "hidden" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EducationLevel, null, new { @class = "col-sm-5 control-label" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.EducationLevel, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                </div>
                <span class="col-sm-4 control-label" style="text-align: left;">Certificates and Credentials (check all that apply)</span>
            </div>
            <div class="form-group">
                <span class="col-sm-8"></span>
                <div class="col-sm-4" id="dvCertificate">
                    @foreach (var item in certificateList)
                    {
                        <span class="col-lg-8 control-label m-l-n m-b">
                            @item.Name</span>
                        <div class="m-b">
                            <label class="radio-inline">
                                <input type="radio" name="certificate@(item.ID)" value="@item.ID">
                                Yes</label>
                            <label class="radio-inline">
                                <input type="radio" name="certificate@(item.ID)" value="@(item.ID + 1)">
                                No</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="content-title" @(!ViewBag.IsCLIUser ? "style=display:none" : "")>For CLI Use</div>
        <div class="content-body" @(!ViewBag.IsCLIUser ? "style=display:none" : "")>
            <div class="form-group">
                @Html.LabelFor(model => model.VendorCode, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.VendorCode, new { @class = "form-control" })
                </div>
                <span class="col-sm-3 control-label">@Html.DisplayNameFor(model => model.MediaRelease)</span>
                <div class="col-sm-3">
                    @Html.RadioButtonFor(model => model.MediaRelease, MediaRelease.Yes, new { id = "MediaRelease1" })
                    @Html.Label("", ViewTextHelper.BoolInTexts[true], new { @for = "MediaRelease1" })
                    @Html.RadioButtonFor(model => model.MediaRelease, MediaRelease.No, new { id = "MediaRelease2" })
                    @Html.Label("", ViewTextHelper.BoolInTexts[false], new { @for = "MediaRelease2" })
                    @Html.RadioButtonFor(model => model.MediaRelease, 0, new { id = "MediaRelease3", @class = "hide" })
                    @Html.Label("MediaRelease3", new { @class = "hide" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CLIFundingID, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.DropDownListFor(e => e.CLIFundingID, (IEnumerable<SelectListItem>)ViewBag.Funding, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.TeacherType, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.TeacherType, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                    @Html.LabelFor(model => model.TeacherTypeOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.TeacherTypeOther, new { @class = "form-control", type = "hidden" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CoachAssignmentWay, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.CoachAssignmentWay, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                    @Html.LabelFor(model => model.CoachAssignmentWayOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.CoachAssignmentWayOther, new { @class = "form-control", type = "hidden" })
                </div>
                @Html.LabelFor(model => model.YearsInProjectId, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.YearsInProjectId, (IEnumerable<SelectListItem>)ViewBag.YearsInProject, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CoachId, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.CoachId, (IEnumerable<SelectListItem>)ViewBag.CoachOptions, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.ECIRCLEAssignmentWay, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.ECIRCLEAssignmentWay, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                    @Html.LabelFor(model => model.ECIRCLEAssignmentWayOther, new { @class = "control-label hide" })
                    @Html.TextBoxFor(model => model.ECIRCLEAssignmentWayOther, new { @class = "form-control", type = "hidden" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CoachingHours, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.CoachingHours, new { @class = "_number form-control", @float = 2 })
                    @Html.ValidationMessageFor(model => model.CoachingHours)
                </div>
                @Html.LabelFor(model => model.ReqCycles, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-3">
                    @Html.TextBoxFor(model => model.ReqCycles, new { @class = "_number form-control", @float = 2 })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CoreAndSupplemental, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-9">
                    @Html.TextBoxFor(model => model.CoreAndSupplemental, new { @class = "form-control" })
                    @Html.LabelFor(model => model.CoreAndSupplemental2, null, new { @class = "hide" })
                    @Html.TextBoxFor(model => model.CoreAndSupplemental2, new { @class = "form-control" })
                    @Html.LabelFor(model => model.CoreAndSupplemental3, null, new { @class = "hide" })
                    @Html.TextBoxFor(model => model.CoreAndSupplemental3, new { @class = "form-control" })
                    @Html.LabelFor(model => model.CoreAndSupplemental4, null, new { @class = "hide" })
                    @Html.TextBoxFor(model => model.CoreAndSupplemental4, new { @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="content-title"></div>
        <div class="content-body">
            <div class="form-group">
                <span class="col-sm-3 control-label">Additional Packages</span>
                <div class="col-sm-9" id="dvPackage">
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TeacherNotes, null, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-9">
                    @Html.TextAreaFor(model => model.TeacherNotes, new { @class = "form-control", style = "height:70px; margin:0px; padding:0px;" })
                    @Html.ValidationMessageFor(model => model.TeacherNotes)
                </div>
            </div>
        </div>

        <div class="button-content">
            <input type="submit" class="mainbutton mainright-btn submit-btn" value="Submit">
            <input type="submit" id="SaveInvite" class="mainbutton mainright-btn submit-btn" value="Submit & Invite">
            <button class="mainbutton modal-btn cancel-btn" type="button" onclick='redirectBack("index")'>Cancel</button>
        </div>
    </div>
    
}

