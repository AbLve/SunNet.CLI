@model Sunnet.Cli.Core.Users.Entities.TeacherTransactionEntity
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@{
    ViewBag.Title = "Transaction Information";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.User)
}

@section BreadPath
{
    @(Html.ActionLink("User Management", "Dashboard", "Public"))
    <i class="icon-angle-right"></i>
    @(Html.ActionLink("Teacher", "Index", "Teacher"))
    <i class="icon-angle-right"></i>Transaction Information
}

@using (Ajax.BeginForm("SaveTransaction", "Teacher", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
                 
    @Html.HiddenFor(model => model.TeacherId)
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))" >Back to Teacher List</a>
    </div>
    <div class="main-content">
        <div class="content-title">Transaction Information</div>
        <div class="content-body">
            <div class="form-group">
                @Html.Label("community", "Community", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBox("community", string.Join(", ", Model.Teacher.UserInfo.UserCommunitySchools.Select(x => x.Community.Name)), new { @class = "form-control", @readonly = true })
                </div>
                @Html.Label("school", "School", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBox("school", string.Join(", ", Model.Teacher.UserInfo.UserCommunitySchools.Where(e => e.SchoolId > 0).Select(x => x.School.Name)), new { @class = "form-control", @readonly = true })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("teacherName", "Teacher Name", new { @class = "col-sm-2 control-label required" })
                <div class="col-sm-4">
                    @Html.TextBox("teacherName", (Model.Teacher.UserInfo.FirstName + " " + Model.Teacher.UserInfo.LastName), new { @class = "form-control", @readonly = true })
                </div>
                @Html.Label("teacherCode", "Teacher Code", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBox("teacherCode", Model.Teacher.TeacherId, new { @class = "form-control", @readonly = true })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TransactionType, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.EnumDropDownListFor(model => model.TransactionType, ViewTextHelper.DefaultPleaseSelectText, "0", new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.Amount, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Amount, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Amount)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TISessionsAttended, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.TISessionsAttended, new { @class = "form-control _num_2" })
                    @Html.ValidationMessageFor(model => model.TISessionsAttended)
                </div>
                @Html.LabelFor(model => model.TITotalSessions, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.TITotalSessions, new { @class = "form-control _num_2" })
                    @Html.ValidationMessageFor(model => model.TITotalSessions)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.FundingYear, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.FundingYear, new { @class = "form-control", @readonly = true })
                </div>
                @Html.LabelFor(model => model.TICLIFundingId, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.TICLIFundingId, (IEnumerable<SelectListItem>)ViewBag.FundingOptions, new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12">
                    Warning If you move away from this page without pressing the Submit button,you will lose all of your new information. 
                    Press the Submit button to save your new Information.
                </div>
            </div>
        </div>
        <div class="button-content">
            <input type="submit" class="mainbutton mainright-btn submit-btn" id="btnSubmit" value="Submit">
            <button class="mainbutton modal-btn cancel-btn" type="button" id="btnCancel" onclick='redirectBack("index")'>Cancel</button>
        </div>

        <div class="content-title">Transaction History</div>
        <div class="content-body-tab">
            <table class="table table-striped table-hover">
                <thead>
                    <tr data-bind="foreach: { data: headers, as: 'header' }">
                        <!-- ko if: (header.order === true)-->
                        <th data-bind="style: { width: width }">
                            <a href="javascript:;" data-bind="text: text, click: $root.changeOrder"></a>
                            <span class="glyphicon"
                                data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                            <span class="glyphicon"
                                data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                        </th>
                        <!-- /ko-->
                        <!-- ko if: (header.order === false) -->
                        <th data-bind="text: text, style: { width: width }"></th>
                        <!-- /ko-->
                    </tr>
                </thead>
                <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                    <tr>
                        <td data-bind="text: item.TransactionType.text == 0 ? '' : item.TransactionType.text"></td>
                        <td data-bind="text: item.Amount"></td>
                        <td data-bind="text: item.CreatedOn"></td>
                        <td data-bind="text: item.TISessionsAttended"></td>
                        <td data-bind="text: item.TITotalSessions"></td>
                        <td data-bind="text: item.FundingYear"></td>
                    </tr>
                </tbody>@Html.Display("e", "NoData", new { Colspan = 6 })
            </table>
        </div>
    </div>
    
    @section Scripts
{
        <script type="text/javascript">
            
            @*if ("@ViewBag.accessTransaction" == "X")
                closeModal("#@formId");
            else if ("@ViewBag.accessTransaction" == "R") {
                $(":input").prop("disabled","true");
                $("#btnCancel").removeAttr("disabled");
                $("#btnSubmit").hide();
            }*@
            var list_TeacherTrancation = {};

            jQuery(function () {
                list_TeacherTrancation = new ViewModel(
                {
                    instanceName: "list_TeacherTrancation",
                    modalId: "modalNormal",
                    addDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("New")))',
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("SearchTeacherTransaction")))',
                    viewDataUrl: '@Html.Raw(Url.Action("Edit"))',
                    viewType: "Redirect",
                    orderBy: "CreatedOn",
                    orderDirection: "DESC",
                    pageSize: 10,
                    headers: [
                        {
                            text: "@Html.DisplayNameFor(model => model.TransactionType)",
                            field: "@Html.NameFor(model => model.TransactionType)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.Amount)",
                            field: "@Html.NameFor(model => model.Amount)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.CreatedOn)",
                            field: "@Html.NameFor(model => model.CreatedOn)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.TISessionsAttended)",
                            field: "@Html.NameFor(model => model.TISessionsAttended)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.TITotalSessions)",
                            field: "@Html.NameFor(model => model.TITotalSessions)",
                            order: true,
                            width: '15%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.FundingYear)",
                            field: "@Html.NameFor(model => model.FundingYear)",
                            order: true,
                            width: '15%'
                        },
                    ],
                    searchCriteria: {
                        teacherId: ko.observable(window.queryString("teacherId",@Model.TeacherId))
                    }
                });

                list_TeacherTrancation.search();
                ko.applyBindings(list_TeacherTrancation);
            });

            +(function() {
                registerFormCallbacks("@(formId)", {
                    onPosted: function (response) {
                        list_TeacherTrancation.search();  
                    }
                });
            })();
        </script>
    }
    
}

