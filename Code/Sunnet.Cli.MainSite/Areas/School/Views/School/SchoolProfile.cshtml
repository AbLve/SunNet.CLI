@using System.Web.Optimization
@using Sunnet.Cli.Business.Schools.Models
@using Sunnet.Cli.Core.Schools.Entities
@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@using Sunnet.Cli.Core.Users.Enums
@model Sunnet.Cli.Business.Schools.Models.SchoolModel
@{
    ViewBag.Title = "My School";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    Layout = "~/Views/Shared/_Layout_Base.cshtml";
    List<SchoolModel> schoolList = ViewBag.SchoolList as List<SchoolModel>;
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.My_School)
}
@section BreadPath
{
    <ul id="myTab" class="nav-container" style="border-bottom:none;padding-top: 5px;" role="tablist">
        @for (int i = 0; i < schoolList.Count; i++)
        {
            if (schoolList[i].ID == Model.ID)
            {
                <li style="border-radius:5px 5px 5px 5px" class="active"><a href="#">@schoolList[i].SchoolName</a></li>
            }
            else
            {
                <li style="border-radius:5px 5px 5px 5px">
                    <a href="/School/School/SchoolProfile?id=@schoolList[i].ID" role="tab">
                        @schoolList[i].SchoolName
                    </a>
                </li>
            }
        }
    </ul>
}
@section Styles
{
    <style type="text/css">
        h4.backlink {
              height: auto;
  display: inline-block;
        }
        .nav-container {
            margin-top: 15px; 
        }
        .nav-container li {
             margin-bottom: 10px;
        }
        .nav-container li a:hover, .nav-container .active a {
            border-radius: 5px 5px 5px 5px;
        }
    </style>
}
@section Scripts
{
    @Scripts.Render("~/scripts/module_school")
    <script>
        var viewModel = {
            defaultCounty: ko.observable(@Model.CountyId),
            selectedCounty: ko.observable(@Model.CountyId),
            countiesOptions: ko.observableArray([]),
            selectedState: ko.observable(@Model.StateId),
            address1: ko.observable("@Model.PhysicalAddress1"),
            address2: ko.observable("@Model.PhysicalAddress2"),
            city: ko.observable("@Model.City"),
            zip: ko.observable("@Model.Zip"),

            defaultMailCounty: ko.observable(@Model.MailingCountyId),
            mailSelectedCounty: ko.observable(@Model.MailingCountyId),
            mailCountiesOptions: ko.observableArray([]),
            mailSelectedState: ko.observable(@Model.MailingStateId),
            mailAddress1: ko.observable("@Model.MailingAddress1"),
            mailAddress2: ko.observable("@Model.MailingAddress2"),
            mailCity: ko.observable("@Model.MailingCity"),
            mailZip: ko.observable("@Model.MailingZip"),

            keepMailSameAsPhysical: ko.observable(@(Model.IsSamePhysicalAddress.ToString().ToLower())),
            sync: function () {
                if (viewModel.keepMailSameAsPhysical()) {
                    viewModel.mailCountiesOptions.removeAll();
                    viewModel.mailCountiesOptions.push.apply(viewModel.mailCountiesOptions, viewModel.countiesOptions());
                    viewModel.mailSelectedState(viewModel.selectedState());
                    viewModel.mailSelectedCounty(viewModel.selectedCounty());
                    viewModel.defaultMailCounty(viewModel.selectedCounty());

                    viewModel.mailAddress1(viewModel.address1());
                    viewModel.mailAddress2(viewModel.address2());
                    viewModel.mailCity(viewModel.city());
                    viewModel.mailZip(viewModel.zip());
                }
            }
        };

        var subTypeVal = "@Html.Raw(Model.SubTypeId)";

        function IsShowTrs()
        {
            var isShow = "@ViewBag.IsShowTRS";
            if ($("#divTRS").length > 0)
            {
                if (isShow.toLowerCase() == "true")
                {



                    $("#divTRS").show();
                }
                else
                {
                    $("#divTRS").hide();
                }
            }
        }
        viewModel.selectedState.subscribe(function (state) {
            $.getJSON('@Url.Action("GetCountiesByStateId")',
                { stateId: state },
                function (data) {
                    viewModel.countiesOptions.removeAll();
                    viewModel.countiesOptions.push.apply(viewModel.countiesOptions, data);
                    viewModel.selectedCounty(viewModel.defaultCounty());

                    viewModel.sync();
                });
        });

        function syncMailAddress() {
            viewModel.sync();
        }

        viewModel.address1.subscribe(syncMailAddress);
        viewModel.address2.subscribe(syncMailAddress);
        viewModel.city.subscribe(syncMailAddress);
        viewModel.zip.subscribe(syncMailAddress);
        viewModel.selectedCounty.subscribe(syncMailAddress);
        viewModel.keepMailSameAsPhysical.subscribe(syncMailAddress);

        viewModel.mailSelectedState.subscribe(function (state) {
            $.getJSON('@Url.Action("GetCountiesByStateId")',
                 { stateId: state },
                 function (data) {
                     viewModel.mailCountiesOptions.removeAll();
                     viewModel.mailCountiesOptions.push.apply(viewModel.mailCountiesOptions, data);
                     viewModel.mailSelectedCounty(viewModel.defaultMailCounty());
                 });
        });

        $(function() {
            var schoolTypeId = $("#SchoolTypeId").val();
            DisplayClassroomCount(schoolTypeId);
            if (schoolTypeId == "3") {
                $("[typename='childCare']").removeAttr("disabled").show();
                $("[typename='childCare']").val(subTypeVal);

            } else if (schoolTypeId == "4") {
                $("[typename='FCC']").attr("disabled", "true").show();
                $("[typename='FCC']").val(subTypeVal);

            }
            SchoolTypeChanged();
            TrsProviderChanged();
            IspChanged();
            InternetTypeChanged();
            $("#AtRiskPercent").val(@Model.AtRiskPercent);
            IsShowTrs();

            var autoAssign = new AutoAssign4Star('@((int)Model.VSDesignation)',
                '@(Model.RecertificatedBy.FormatDateString())',
                @(Model.EnableAutoAssign4Star.ToString().ToLower()),
                '@((int)Model.RegulatingEntity)',
                @(Model.NAEYC.ToString().ToLower()),
                @(Model.CANASA.ToString().ToLower()),
                @(Model.NECPA.ToString().ToLower()),
                @(Model.NACECCE.ToString().ToLower()),
                @(Model.NAFCC.ToString().ToLower()),
                @(Model.ACSI.ToString().ToLower()),
                @(Model.USMilitary.ToString().ToLower()));
            $.extend(viewModel, autoAssign);
            ko.applyBindings(viewModel);
            
            var $FacilityType = $("#FacilityType");
            $FacilityType.on("change", function() {
                var $this = $(this);
                $.when(window.waitingConfirm("warning_change_facility_type", "OK", "Cancel"))
                    .done(function() {
                        $this.data("_source", $this.val());
                    }).fail(function() {
                        $this.val($this.data("_source"));
                    });
            }).data("_source", $FacilityType.val());
        });
    </script>
}
@using (Ajax.BeginForm("ProfileUpdate", "School", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        role = "form",
        id = formId
    }))
{
    @Html.AntiForgeryToken()

    <div class="main-content">
        <div class="content-title">Basic Information</div>
        <div class="content-body">
            <div class="form-group">

                @Html.LabelFor(model => model.CommunityName, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.CommunityName, new { @class = "form-control", @readonly = "true" })
                    @Html.HiddenFor(model => model.CommunityId, new { @class = "form-control validate", placeholder = "Selected Community" })
                    @Html.ValidationMessageFor(model => model.CommunityId)
                </div>


                @Html.HiddenFor(model => model.ID)
                 @Html.HiddenFor(model => model.CreateBy)
                 @Html.HiddenFor(model => model.UpdateBy)
                 @Html.HiddenFor(model => model.CreateFrom)
                 @Html.HiddenFor(model => model.UpdateFrom)

                @Html.LabelFor(model => model.SchoolId, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.SchoolId, new { @class = "form-control", @readonly = "true" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BasicSchoolId, new { @class = "control-label col-sm-2 required" })
                @Html.Label("lbSchoolName", "&nbsp;", new { @class = "hide", @for = "SchoolName" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.SchoolName, new { @class = "form-control", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.BasicSchoolId, new { @class = "form-control validate", placeholder = "Selected School" })
                    @Html.ValidationMessageFor(model => model.SchoolId)
                </div>
                @Html.LabelFor(model => model.SchoolYear, null, new { @class = "col-sm-2 control-label " })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.SchoolYear, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            @if (ViewBag.UserRole == Role.Teacher)
            {
                @Html.Partial((string)ViewBag.viewPartialUrl)
            }
            else
            {
                @Html.Partial((string)ViewBag.partialUrl)
            }

        </div>
    </div>

    if (ViewBag.UserRole != Role.Teacher)
    {
        <div class="modal-footer">
            <button class="mainbutton modal-btn submit-btn" type="submit">Submit</button>
        </div>
    }
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.CreatedOn)
    @Html.HiddenFor(model => model.UpdatedOn)
}

