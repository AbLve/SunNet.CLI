@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models
@model Sunnet.Cli.Business.Students.Models.StudentModel
@{
    ViewBag.Title = "Students";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}
 <style type="text/css">
     input.error {
           border: 1px solid #b94a48;
     }
   select.error {
           border: 1px solid #b94a48;
     }
     label.error {
         color: #b94a48;
     }
   </style>
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.Roster)
}
@section BreadPath
{
    @(Html.ActionLink("Class Roster Management", "Index", "Index", new { Area = "Roster" }))&nbsp;<i class="icon-angle-right"></i>
    &nbsp;Class Roster Management
}  
<div class="right-content-top"></div>
<form class="form-horizontal" role="form" id="BesSearch"  >
    <div class="form-group">
        <input type="button" style="display: none" id="classChanged" value="Changed"/>
        @Html.Label("", "Community/District", new { @class = "control-label col-sm-2", @for = "txtCommunity" })
        <div class="col-sm-3">
            @Html.TextBox("txtCommunity", "", new
            {
                autocomplete = "off",
                @class = "form-control",
                data_list = "true",
                data_for = "#SearchCommunityId",
                data_remote = Url.Action("GetCommunitySelectListForSearch", "Community", new { Area = "Community" }),
                data_text = "Name",
                data_value = "ID",
                
                id = "txtCommunity",
                name = "txtCommunity",
                placeholder = "Enter key text to search",
                @for = "SearchCommunityId",
                data_extraParams = "{\"isActiveCommunity\":\"#isActiveCommunity\"}",
                data_bind = "value: searchCriteria.communityName"
            })
            @Html.Hidden("SearchCommunityId", "",new
            {
                placeholder = "Selected Community",
                data_bind = "value: searchCriteria.communityId"
            })
            @Html.Hidden("isActiveCommunity", false)
        </div>
        @Html.Label("", "School Name", new { @class = "control-label col-sm-2", @for = "txtSchool" })
        <div class="col-sm-3">
            @Html.TextBox("txtSchool", "", new
            {
                autocomplete = "off",
                @class = "form-control",
                data_list = "true",
                data_for = "#SearchSchoolId",
                data_remote = Url.Action("GetSchoolSelectList", "School", new { Area = "School" }),
                data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",
                data_text = "Name",
                data_value = "ID",
              
                id = "txtSchool",
                name = "txtSchool",
                placeholder = "Enter key text to search",
                @for = "SearchSchoolId",
                data_extraParams = "{\"communityId\":\"#SearchCommunityId\",\"isActive\":\"#isActive\"}",
                data_bind = "value: searchCriteria.schoolName"
            })
            @Html.Hidden("SearchSchoolId","", new
            {
               
                placeholder = "Selected School",
                data_bind = "value: searchCriteria.schoolId"
            })
            @Html.Hidden("isActive", false)
        </div>
    </div>
    <div class="form-group">
        @Html.Label("", "Homeroom Teacher", new { @class = "control-label col-sm-2", @for = "txtTeacher" })
        <div class="col-sm-3">
            @Html.TextBox("txtTeacher", "", new
            {
                autocomplete = "off",
                @class = "form-control",
                data_list = "true",
                data_for = "#TeacherId",
                data_remote = Url.Action("Teachers"),
                data_text = "Name",
                data_value = "ID",
                data_required = true,
                id = "txtTeacher",
                name = "txtTeacher",
                placeholder = "Enter key text to search",
                @for = "TeacherId",
                data_extraParams = "{\"communityId\":\"#SearchCommunityId\",\"schoolId\":\"#SearchSchoolId\",\"isActive\":\"#isActive\"}",
                data_bind = "value: searchCriteria.teacherName"
            })
            @Html.Hidden("TeacherId", 0, new
            {
                @class = "form-control",
                placeholder = "Selected Teacher",
                data_bind = "value: searchCriteria.teacherId"
            })
            @Html.Hidden("isActive", false)
        </div>
        @Html.Label("", "Class Day Type", new { @class = "control-label col-sm-2", @for = "DayType" })
        <div class="col-sm-3">
            @Html.DropDownList("DayType", (IEnumerable<SelectListItem>)ViewBag.DayTypeOptions, new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.classDayType"
            })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Class", new { @class = "control-label col-sm-2", @for = "ClassId" })
        <div class="col-sm-3">
            <select class="form-control "   data-bind="
                    
                    value: searchCriteria.classId,
                    options: classes,
                    optionsText: 'text',
                    optionsValue: 'value'" id="ClassId" name="ClassId"></select>
  
        </div>
        <div class="col-sm-1">
             @if (ViewBag.accessAddClass)
                   {  
                       <a class="table-btn icon-pencil pencil-btn" href="#" onclick="AddClass();" title="Add Class"></a>
                   }
        </div>
        <div class="col-sm-4 col-sm-offset-2">  
            <button class="mainbutton mainright-btn sreach-btn" type="button" onclick="searchForm()" >Search</button>
         
                <button  class="mainbutton mainright-btn sreach-btn" type="button" data-toggle="modal" 
                   data-target="#modalNormal"  
title="Upload Students" onclick="clickUploadStudents(this)"  data-bind="attr: { href: $root.uploadStudents() }">Upload Students</button>
           
        </div>
    </div>

    <div class="main-content main-content">
        <div class="content-title">
            Students
        </div>
        <div class="content-body-tab">
            <table class="table table-striped table-hover p-table-list">
                <thead>
                    <tr data-bind="foreach: { data: headers, as: 'header' }">

                        <!-- ko if: (header.order === true)-->
                        <th data-bind="style: { width: width }">
                            <a href="javascript:;" data-bind="html: text, click: $root.changeOrder"></a>
                            <span class="glyphicon"
                                  data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                            <span class="glyphicon"
                                  data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                        </th>
                        <!-- /ko-->
                        <!-- ko if: (header.order === false) -->
                        <th data-bind="text: text, style: { width: width }"></th>
                        <!-- /ko-->
                    </tr>
                </thead>
                <tbody id="listBody" data-bind="foreach: { data: showRecords, as: 'item' }">
                    <tr data-bind="css:{'new-table-list':created}">
                        <td>
                            <!-- ko if: created -->
                            <i class="icon-hand-right"></i>
                            <!--/ko-->
                            <span data-bind="text:$index()+1"></span>
                        </td>
                        <td data-bind="attr: { title: $index() }">
                            <label data-bind="attr:{for:'FirstName'+$index()}" style="display: none">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                   style="display: inline-block;" data-bind="value: item.FirstName,attr:{id:'FirstName'+$index(),name:'FirstName'+$index()},required:true" />
                        </td>

                        <td>
                            <label data-bind="attr:{for:'MiddleName'+$index()}" style="display: none">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                   style="display: inline-block;" data-bind="value: item.MiddleName,attr:{id:'MiddleName'+$index()}" />
                        </td>

                        <td>
                            <label data-bind="attr:{for:'LastName'+$index()}" style="display: none">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                   style="display: inline-block;" data-bind="value: item.LastName,attr:{id:'LastName'+$index(),name:'LastName'+$index()},required:true" />

                        </td>

                        <td>
                            <label data-bind="attr:{for:'BirthDate'+$index()}" style="display: none">wave</label>
                            <input type="text" class="form-control date" maxlength="100" placeholder="mm/dd/yyyy"
                                   style="display: inline-block;" 
                                   data-bind="value:item.BirthDate,attr:{id:'BirthDate'+$index(),name:'BirthDate'+$index()},
    event:{blur: function(data,event){item.BirthDate(event.currentTarget.value)}},required:true,
                                            minDate:'@ViewBag.MinDate',maxDate:'@ViewBag.MaxDate'" />
                                          
                        </td>
                        <td>
                            <label data-bind="attr:{for:'Gender'+$index()}" style="display: none">wave</label>
                            <select class="form-control" data-bind="
    value: item.Gender.value,
    options:$root.genderOptions,
    optionsText:'text',
    optionsValue:'value',attr:{id:'Gender'+$index(),name:'Gender'+$index()},css:{'input-validation-error':hasNoGender},required:true"></select>
                        </td>
                        <td >
                            <label data-bind="attr:{for:'LocalStudentID'+$index()}" style="display: none">wave</label>
                            <input type="text" class="form-control input-sm" maxlength="100"
                                   style="display: inline-block;" data-bind="value: item.LocalStudentID,attr:{id:'LocalStudentID'+$index()},css:{'input-validation-error':hasNoStudentId}"/>

                        </td>
                        <td>
                            <label data-bind="attr:{for:'Ethnicity'+$index()}" style="display: none">wave</label>
                            <select class="form-control" data-bind="
    value: item.Ethnicity.value,
    options:$root.ethnicityOptions,
    optionsText:'text',
    optionsValue:'value',attr:{id:'Ethnicity'+$index(),name:'Ethnicity'+$index()}"></select>
                        </td>
    <td>
                            <label data-bind="attr:{for:'GradeLevel'+$index()}" style="display: none">wave</label>
                            <select class="form-control" data-bind="
    value: item.GradeLevel.value,
    options:$root.gradeLevelOptions,
    optionsText:'text',
    optionsValue:'value',attr:{id:'GradeLevel'+$index(),name:'GradeLevel'+$index()},required:true,event: { change: $root.gradeLevelChange }"></select>
                        </td>
                        <td>
                            <label data-bind="attr:{for:'AssessmentLanguage'+$index()}" style="display: none">wave</label>
                            <select class="form-control" data-bind="
    value: item.AssessmentLanguage.value,
    options:$root.assessmentLanguageOptions,
    optionsText:'text',
    optionsValue:'value',attr:{id:'AssessmentLanguage'+$index(),name:'AssessmentLanguage'+$index()},event: { change: $root.assessmentLanguageChange },required:true"></select>
                        </td>
                        <td>
                            <label data-bind="attr:{for:'Status'+$index()}" style="display: none">wave</label>
                            <select class="form-control" data-bind="
    value: item.Status.value,
    options:$root.statusOptions,
    optionsText:'text',
    optionsValue:'value',attr:{id:'Status'+$index(),name:'Status'+$index()},required:true"></select>
                        </td>
                        <td>
                            <!-- ko if: created -->
                            <a href="#" class="table-btn icon-minus minus-btn" data-bind="event: { click: $root.deleteStudent }" title="Delete"></a>
                            <!--/ko-->
                            <!-- ko if: ($index()+1) === list_Students.showRecords().length -->
                            <a class="table-btn icon-plus  create-btn" data-bind="event: { click: $root.newRow }" href="#" title="New Student"></a>

                             <!--/ko--> 
                        </td>
                    </tr>
                </tbody>
                @Html.Display("e", "NoData", new { Colspan = 11 })
            </table>

            @Html.Partial("~/Areas/Roster/Views/Shared/_Partial_Pager.cshtml")
        </div>
    </div>
</form>
@using (Ajax.BeginForm("Save", null, null, new AjaxOptions()
{
    HttpMethod = "Post",
    OnSuccess = "OnFormSubmitSuccessForRoster",
    OnFailure = "onFormSubmitFailureForRoster",
    AllowCache = false
}, new
{
    id = formId,
    data_bind = "visible:changed"
}))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="communityId" data-bind="value: searchCriteria.communityId" />
    <input type="hidden" name="schoolId" data-bind="value: searchCriteria.schoolId" />
    <input type="hidden" name="teacherId" data-bind="value: searchCriteria.teacherId" />
    <input type="hidden" name="classDayType" data-bind="value: searchCriteria.classDayType" />
    <input type="hidden" name="classId" data-bind="value: searchCriteria.classId" />
 
    <input type="hidden" name="students" id="students"/>
    <input type="hidden" name="debug" value="true" />
    <div class="modal-footer">
        <button class="mainbutton modal-btn submit-btn" type="button" data-bind="click:submit">Submit</button>
    </div>
}
@section Scripts
{
    <script type="text/javascript">
        var defaultAssessmentLanguage = 3; //Bilingual
        var list_Students = {};
        var default_Students = {};
        var isFirstNewStudent = 0;
        var getClassUrl = '@Url.Action("GetClassName", "Class", new {Area = "Class"})';
        var getClassUrlOld = '@Url.Action("GetClassName", "Class", new {Area = "Class"})';
        var getClassUrlNew = '@Url.Action("GetClassNameForBES", "Class", new {Area = "Class"})';
        var loadingCount = 0;
        var confirmForLanguage = { confirmed: false, change: true };
        var confirmForGrade = { confirmed: false, change: true };

        function IniConfirmForLanguage() {
            confirmForLanguage.confirmed = false;
            confirmForLanguage.change = true;

            confirmForGrade.confirmed = false;
            confirmForGrade.change = true;
        }

        function clearePageCache() {
            list_Students.clearCache();
            console.log("已清理缓存");
        }
        function clickUploadStudents(sender) {
            var vcommunityId = list_Students.searchCriteria.communityId();
            var vschoolId = list_Students.searchCriteria.schoolId();
            var vclassId = list_Students.searchCriteria.classId();
            if (vcommunityId <= 0 || vschoolId <= 0 || vclassId <= 0) {
                window.showMessage("fail", "Please complete the Community/District, School Name, and Class fields.");
                $(sender).attr("data-target", "#");
            } else {
                $(sender).attr("data-target", "#modalNormal");
            }
        }

        function getOptions(ethnicity, gender, assessmentLanguage, status, gradeLevels) {
            var pleaseSelect = '@(ViewTextHelper.DefaultPleaseSelectText)';
            ethnicity.unshift({ text: pleaseSelect, value: '0' });
            gender.unshift({ text: pleaseSelect, value: '' });
            assessmentLanguage.unshift({ text: pleaseSelect, value: '' });
            status.unshift({ text: pleaseSelect, value: '' });
            gradeLevels.unshift({ text: pleaseSelect, value: '' });
            return {
                ethnicityOptions: ethnicity,
                genderOptions: gender,
                assessmentLanguageOptions: assessmentLanguage,
                statusOptions: status,
                gradeLevelOptions: gradeLevels
            };
        }

        var options = getOptions(@(Html.Raw(ViewBag.EthnicityJson)), @(Html.Raw(ViewBag.GenderJson)), @(Html.Raw(ViewBag.AssessmentLanguageJson)), @(Html.Raw(ViewBag.StatusJson)), @(Html.Raw(ViewBag.GradeLevelJson)));

        function Student(defaultValues) {
            var self = this;
            this.hasNoStudentId = ko.observable(false);
            this.hasNoGender = ko.observable(false);
            this.ID = 0;
            this.FirstName = "";
            this.MiddleName = "";
            this.LastName = "";
            this.BirthDate = "";
            this.LocalStudentID = "";
            this.Status = { value: 0 };
            this.Gender = { value: 0 };
            this.Ethnicity = { value: 0 };
            this.GradeLevel = { value: 0 };
            this.AssessmentLanguage = { value: 0 };

            this.changed = ko.observable(false);

            var fieldChanged = function(newVal) {
                self.changed(true);
            };

            if (defaultValues) {
                $.extend(self, defaultValues);
            }

            this.FirstName = ko.observable(this.FirstName);
            this.FirstName.subscribe(fieldChanged);

            this.MiddleName = ko.observable(this.MiddleName);
            this.MiddleName.subscribe(fieldChanged);

            this.LastName = ko.observable(this.LastName);
            this.LastName.subscribe(fieldChanged);

            this.BirthDate = ko.observable(this.BirthDate);
            this.BirthDate.subscribe(fieldChanged);

            this.Gender.value = ko.observable(this.Gender.value);
            this.Gender.value.subscribe(fieldChanged);

            this.LocalStudentID = ko.observable(this.LocalStudentID);
            this.LocalStudentID.subscribe(fieldChanged);

            this.Ethnicity.value = ko.observable(this.Ethnicity.value === 0 ? '' : this.Ethnicity.value);
            this.Ethnicity.value.subscribe(fieldChanged);

            this.GradeLevel.value = ko.observable(this.GradeLevel.value === 0 ? '' : this.GradeLevel.value);
            this.GradeLevel.value.subscribe(fieldChanged);

            this.AssessmentLanguage.value = ko.observable(this.AssessmentLanguage.value);
            this.AssessmentLanguage.value.subscribe(fieldChanged);

            this.Status.value = ko.observable(this.Status.value);
            this.Status.value.subscribe(fieldChanged);

            this.changed(false);

        }

        function getNewStudent() {

            var student = new Student();

            student.changed(true);
            student.created = true;
            student.AssessmentLanguage.value(defaultAssessmentLanguage);
            student.Status.value(1);
            return student;
        }

        function getStudent(values) {
            var student = new Student(values);
            student.created = false;

            return student;
        }

        $(function() {
            var $form = $("#@(formId)");
            var $formData = $("#BesSearch");
            $("#SearchCommunityId").valid();
            var classCache = {};
            var inited = false;
            registerFormCallbacks("@(formId)", {
                onResponsed: function(response) {
                    if (response.othermsg === "duplicate") {
                        window.showMessage2('error', response.message);
                    } else if (response.success) {
                        window.showMessage('warning', '<p style="text-align:left">Your changes may take up to 1 hour to be reflected on the Assessments.<br />' +
                            '<span style="font-weight:bold;">DO NOT</span> process again to prevent duplicates.</p>');
                        list_Students.search();
                    }
                }
            });
            $("body").on("hidden.bs.modal", function() {

                if (window.refresh) {
                    var schoolId = list_Students.searchCriteria.schoolId();
                    loadClasses(schoolId);
                    list_Students.search();
                    window.refresh = false;

                }
            });

            $(".content-footer ul li a")//_Partial_Pager.cshtml a click事件清除缓存
                .on(
                    {
                        mouseover: function() {
                            clearePageCache();
                        },
                        mouseleave: function() {
                            clearePageCache();
                        },
                        mousedown: function () {
                            list_Students.clearCache();
                        },
                        click: function() {
                            clearePageCache();
                        }
                    }
                );

            $("#classChanged").on("click", function () {
                inited = true;
                var schoolId = list_Students.searchCriteria.schoolId();
                loadClasses(schoolId);

            });
                list_Students = new ViewModel(
                {
                    
                    instanceName: "list_Students",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("Search")))',
                    orderBy: "FirstName",
                    orderDirection: "ASC",
                    pageSize: 50,
                    headers: [
                        {
                            text: '#',
                            width: '5%'
                        },
                        {
                            text: "<span class='required'>First Name</span>",
                            field: "@Html.NameFor(model => model.FirstName)",
                            order: true,
                            width: '9%'
                        },
                        {
                            text: "Middle Name",
                            field: "@Html.NameFor(model => model.MiddleName)",
                            order: true,
                            width: '9%'
                        },
                        {
                            text: "<span class='required'>Last Name</span>",
                            field: "@Html.NameFor(model => model.LastName)",
                            order: true,
                            width: '9%'
                        },
                        {
                            text: "<span class='required'>Date of Birth</span>",
                            field: "@Html.NameFor(model => model.BirthDate)",
                            order: true,
                            width: '9%'
                        },
                        {
                            text: "<span class='required'>Gender</span>",
                            field: "@Html.NameFor(model => model.Gender)",
                            order: true,
                            width: '9%'
                        },
                        {
                            text: "Student Internal ID",
                            field: "@Html.NameFor(model => model.LocalStudentID)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "Ethnicity",
                            field: "@Html.NameFor(model => model.Ethnicity)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "<span class='required'>Grade Level</span>",
                            field: "@Html.NameFor(model => model.GradeLevel)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "<span class='required'>Assessment Language</span>",
                            field: "@Html.NameFor(model => model.AssessmentLanguage)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "<span class='required'>Status</span>",
                            field: "@Html.NameFor(model => model.Status)",
                            order: true,
                            width: '10%'
                        },
                        { text: "Action", width: '10%' }
                    ],
                    searchCriteria: {
                        communityId: ko.observable(window.queryString("communityId", "")),
                        communityName: ko.observable(window.queryString("communityName", "")),
                        schoolId: ko.observable(window.queryString("schoolId", "")),
                        schoolName: ko.observable(window.queryString("schoolName", "")),
                        classDayType:
                            ko.observable(window.queryString("classDayType", 0)),
                        classId:
                            ko.observable(window.queryString("classId", 0)),
                        teacherId:
                            ko.observable(window.queryString("teacherId", 0)),
                        teacherName: ko.observable(window.queryString("teacherName", ""))
                    }
                },
                {
                    dataProcessor: function(items) {
                        var models = [];
                        default_Students = jQuery.extend(true, [], items);
                        for (var i = 0; i < items.length; i++) {
                            models.push(getStudent(items[i]));
                        }
                        if (items.length == 0)
                            list_Students.newRow();
                        return models;

                    },

                    uploadStudents: function() {
                        var vcommunityId = this.searchCriteria.communityId();
                        var vschoolId = this.searchCriteria.schoolId();
                        var vteacherId = this.searchCriteria.teacherId();
                        var vclassDayType = this.searchCriteria.classDayType();
                        var vclassId = this.searchCriteria.classId();

                        var urlStr = '@Url.Action("UploadStudents")'
                            + "?comId=" + vcommunityId
                            + "&schoolId=" + vschoolId
                            + "&teacherId=" + vteacherId
                            + "&classId=" + vclassId
                            + "&classDayType=" + vclassDayType
                            + "&returnurl=" + list_Students.getLocation();

                        return urlStr;
                    },
                    newRow: function() {
                        if (list_Students.showRecords().length < 50) {
                            list_Students.showRecords.push(getNewStudent());
                        } else {
                            waitingAlert("fail", "Up to 50 students in this list.");
                        }
                    },
                    deleteStudent: function(student) {
                        list_Students.showRecords.remove(student);
                    },
                    gradeLevelChange: function(student) {
                        //list_Students.showRecords.remove(student);

                        if (confirmForGrade.confirmed === false) {
                            jQuery.when(window.waitingConfirm("Grade Level same for all students?", "Yes", "No"))
                                .done(function(confirResult) {
                                    if (confirResult) {
                                        confirmForGrade.confirmed = true;
                                        confirmForGrade.change = true;
                                    }
                                    for (var i = 0; i < list_Students.showRecords().length; i++) {
                                    list_Students.showRecords()[i].GradeLevel.value(student.GradeLevel.value());
                                }
                                })
                                .fail(function() {
                                    confirmForGrade.confirmed = true;
                                    confirmForGrade.change = false;
                                });
                        } else {
                            if (confirmForGrade.change) {
                                for (var i = 0; i < list_Students.showRecords().length; i++) {
                                    list_Students.showRecords()[i].GradeLevel.value(student.GradeLevel.value());
                                }
                            }
                        }
                    },
                    assessmentLanguageChange: function(student) {
                        //list_Students.showRecords.remove(student);
                        if (confirmForLanguage.confirmed === false) {
                            jQuery.when(
                                    window.waitingConfirm("Assessment Language same for all students?", "Yes", "No"))
                                .done(function(confirResult) {
                                    if (confirResult) {
                                        confirmForLanguage.confirmed = true;
                                        confirmForLanguage.change = true;
                                    }
                                    for (var i = 0; i < list_Students.showRecords().length; i++) {
                                        list_Students.showRecords()[i].AssessmentLanguage.value(student
                                            .AssessmentLanguage.value());
                                    }
                                })
                                .fail(function() {
                                    confirmForLanguage.confirmed = true;
                                    confirmForLanguage.change = false;
                                });
                        } else {
                            if (confirmForLanguage.change) {
                                for (var i = 0; i < list_Students.showRecords().length; i++) {
                                        list_Students.showRecords()[i].AssessmentLanguage.value(student
                                            .AssessmentLanguage.value());
                                    }
                            }
                        }
                    },
                    
                    submit: function() {
                        var vcommunityId = list_Students.searchCriteria.communityId();
                        var vschoolId = list_Students.searchCriteria.schoolId();
                        var vteacherId = list_Students.searchCriteria.teacherId();
                        var vclassDayType = list_Students.searchCriteria.classDayType();
                        var vclassId = list_Students.searchCriteria.classId();
                        if (vcommunityId <= 0 || vschoolId <= 0 || vclassId <= 0) {
                            window.showMessage("fail", "Please complete the Community/District, School Name, and Class fields.");
                            return false;
                        }
                        var students = [], changedStudents = [];


                        if (list_Students.changed()) {
                            if ($formData.valid() === false) {
                                window.showMessage("hint", "multiple_Fields_Required");
                                return false;
                            }

                            for (var i = 0; i < list_Students.showRecords().length; i++) {
                                var stu = list_Students.showRecords()[i];
                                if (stu.changed()) {
                                    if (default_Students.length == 0) {
                                        changedStudents.push(stu);
                                    } else {
                                        for (var oldIndex = 0; oldIndex < default_Students.length; oldIndex++) {
                                            var oldStudent = default_Students[oldIndex];
                                            if (oldStudent.ID == stu.ID
                                                    && oldStudent.FirstName == stu.FirstName()
                                                    && oldStudent.MiddleName == stu.MiddleName()
                                                    && oldStudent.LastName == stu.LastName()
                                                    && oldStudent.BirthDate == stu.BirthDate()
                                                    && oldStudent.Gender.value == stu.Gender.value()
                                                    && oldStudent.LocalStudentID == stu.LocalStudentID()
                                                    && oldStudent.Ethnicity.value == stu.Ethnicity.value()
                                                    && oldStudent.GradeLevel.value == stu.GradeLevel.value()
                                                    && oldStudent.AssessmentLanguage.value == stu.AssessmentLanguage.value()
                                                    && oldStudent.Status.value == stu.Status.value()
                                            ) {
                                                break;
                                            } else if (oldIndex == (default_Students.length - 1)) {
                                                changedStudents.push(stu);
                                            }
                                        }
                                    }
                                }
                            }


                            var hasStudentId = true;
                            var hasGender = true;
                            students = $.map(changedStudents, function(student) {
                                if (!student.LocalStudentID()) {
                                    hasStudentId = false;
                                    student.hasNoStudentId(true);
                                }
                                if (student.Gender.value() == "0") {
                                    hasGender = false;
                                    student.hasNoGender(true);
                                }
                                return {
                                    ID: student.ID,
                                    SchoolId: vschoolId,
                                    CommunityId: vcommunityId,
                                    LocalStudentID: student.LocalStudentID(),
                                    FirstName: student.FirstName(),
                                    MiddleName: student.MiddleName(),
                                    LastName: student.LastName(),
                                    Status: student.Status.value(),
                                    BirthDate: student.BirthDate(),
                                    Gender: student.Gender.value(),
                                    Ethnicity: student.Ethnicity.value(),
                                    GradeLevel: student.GradeLevel.value(),
                                    AssessmentLanguage: student.AssessmentLanguage.value()
                                }
                            });

                            // If there are more than  two students with the sam fields
                            var otherList = [];
                            var samStudentmsg = "";
                            for (var m = 0; m < default_Students.length; m++) {
                                var old = default_Students[m];
                                for (var n = 0; n < students.length; n++) {
                                    var student = students[n];
                                    if (old.ID == student.ID) {
                                        break;
                                    } else if (n == (students.length - 1)) {
                                        otherList.push(old);
                                    }
                                }
                            }
                            for (var mm = 0; mm < otherList.length; mm++) {
                                var child1 = otherList[mm];
                                for (var nn = 0; nn < otherList.length; nn++) {
                                    var child2 = otherList[nn];
                                    if (child1.FirstName == child2.FirstName
                                            && child1.LastName == child2.LastName
                                            && child1.BirthDate == child2.BirthDate
                                            && child1.ID != child2.ID
                                    ) {
                                        samStudentmsg += "No." + (mm + 1) + " " + child1.FirstName + " " + child1.LastName + "<br /> ";
                                        break;
                                    }
                                }
                            }
                            //
                            if (!hasStudentId) {
                                jQuery.when(window.waitingConfirm("You have left Student Internal ID blank. Do you have a School Student ID?", "Yes", "No")).done(function() {
                                    return;
                                }).fail(function() {
                                    if (!hasGender) {
                                        jQuery.when(window.waitingConfirm("You have left Gender blank. Continue?", "Yes", "No")).done(function() {
                                            if (vschoolId <= 0) {
                                                window.showMessage("fail", "School can not be null.");
                                                return false;
                                            }
                                            if (vclassId <= 0) {
                                                window.showMessage("fail", "Class is required.");
                                                return false;
                                            }

                                            $form.find("#students").val(JSON.stringify(students));
                                            if (samStudentmsg != "") {
                                                jQuery.when(window.waitingConfirm("Your Class seems to have a duplicate Student at:<br />" + samStudentmsg + "<br />Do you want to continue?", "Yes", "No")).done(function() {
                                                    $form.submit();
                                                }).fail(function() { return; });
                                            } else {
                                                $form.submit();
                                            }
                                        }).fail(function() {
                                            return;
                                        });
                                    } else {
                                        if (vschoolId <= 0) {
                                            window.showMessage("fail", "School can not be null.");
                                            return false;
                                        }
                                        if (vclassId <= 0) {
                                            window.showMessage("fail", "Class is required.");
                                            return false;
                                        }

                                        $form.find("#students").val(JSON.stringify(students));
                                        if (samStudentmsg != "") {
                                            jQuery.when(window.waitingConfirm("Your Class seems to have a duplicate Student at:<br />" + samStudentmsg + "<br />Do you want to continue?", "Yes", "No")).done(function() {
                                                $form.submit();
                                            }).fail(function() { return; });
                                        } else {
                                            $form.submit();
                                        }
                                    }
                                });
                            } else {

                                if (!hasGender) {
                                    jQuery.when(window.waitingConfirm("You have left Gender blank. Continue?", "Yes", "No")).done(function() {
                                        if (vschoolId <= 0) {
                                            window.showMessage("fail", "School can not be null.");
                                            return false;
                                        }
                                        if (vclassId <= 0) {
                                            window.showMessage("fail", "Class is required.");
                                            return false;
                                        }

                                        $form.find("#students").val(JSON.stringify(students));
                                        if (samStudentmsg != "") {
                                            jQuery.when(window.waitingConfirm("Your Class seems to have a duplicate Student at:<br />" + samStudentmsg + "<br />Do you want to continue?", "Yes", "No")).done(function() {
                                                $form.submit();
                                            }).fail(function() { return; });
                                        } else {
                                            $form.submit();
                                        }
                                    }).fail(function() {
                                        return;
                                    });
                                } else {
                                    if (vschoolId <= 0) {
                                        window.showMessage("fail", "School is required.");
                                        return false;
                                    }
                                    if (vclassId <= 0) {
                                        window.showMessage("fail", "Class is required.");
                                        return false;
                                    }

                                    $form.find("#students").val(JSON.stringify(students));
                                    if (samStudentmsg != "") {
                                        jQuery.when(window.waitingConfirm("Your Class seems to have a duplicate Student at:<br />" + samStudentmsg + "<br />Do you want to continue?", "Yes", "No")).done(function() {
                                            $form.submit();
                                        }).fail(function() { return; });
                                    } else {
                                        $form.submit();
                                    }
                                }
                            }
                        } else {
                            window.showMessage("success", "Nothing is changed.");
                            return;
                        }
                    },
                    teacherClasses: ko.observableArray([])
                }
            );
            list_Students.classes = ko.computed(function() {
                return this.teacherClasses().concat([{ text: "Please select...", value: 0 }]);
                return this.teacherClasses();
            }, list_Students);
            $.extend(list_Students, options);
            list_Students.changed = ko.computed(function() {
                var changed = false;
                for (var i = 0; i < this.showRecords().length; i++) {
                    if (this.showRecords()[i].changed()) {
                        changed = true;
                        break;
                    }
                }
                return changed;
            }, list_Students);
            if (list_Students.searchCriteria.schoolId()) {
                loadClasses(list_Students.searchCriteria.schoolId());
            }
            ko.applyBindings(list_Students);
            var $txtCommunity = $("#txtCommunity");
            var $txtSchool = $("#txtSchool");
            var $txtTeacher = $("#txtTeacher");
            $txtCommunity.on("selected.sunnet.datalist", function(event) {
                $txtSchool.datalist("clear");
            });
            $txtSchool.on("selected.sunnet.datalist", function(event) {
                $txtTeacher.datalist("clear");
                var schoolId = list_Students.searchCriteria.schoolId();
            });

            function loadClasses(schoolId) {
                if (schoolId) {
                    loadingCount += 1;
                    $.getJSON(
                        getClassUrl,
                        {
                            communityId: list_Students.searchCriteria.communityId(),
                            schoolId: schoolId
                        },
                        function(classes) {
                            classCache[schoolId] = [];
                            list_Students.teacherClasses.removeAll();
                            if (classes && classes.length) {
                                classCache[schoolId] = classes;
                                switchClasses(classes);
                            }
                            loadingCount -= 1;
                        }
                    );
                }
            }

            function switchClasses(classes) {
                var teacherId = parseInt(list_Students.searchCriteria.teacherId());
                var dayType = parseInt(list_Students.searchCriteria.classDayType());
                classes = classes.filter(function(class1) {
                    return (teacherId < 1 || class1.Props["leadTeacherId"] === teacherId)
                        && (dayType < 1 || class1.Props["classDayType"].value === dayType);
                });
                classes = $.map(classes, function(class1) {
                    return {
                        text: class1.Name,
                        value: class1.ID,
                        props: class1.Props
                    }
                });

                list_Students.teacherClasses.removeAll();
                list_Students.teacherClasses.push.apply(list_Students.teacherClasses, classes);

                if (classes.length) {
                    list_Students.searchCriteria.classId(classes[0].value);
                }

                if (!inited && list_Students.searchCriteria.schoolId()) {
                    list_Students.search();
                }

                if (inited) {
                    IniConfirmForLanguage();
                }
                inited = true;
            }

            list_Students.searchCriteria.classDayType.subscribe(function() {
                var schoolId = list_Students.searchCriteria.schoolId();
                switchClasses(classCache[schoolId]);
            });
            list_Students.searchCriteria.classId.subscribe(function() {
                if (list_Students.searchCriteria.classId() > 0) {
                    $.getJSON('@Url.Action("GetTeacherName")', {
                        classId: list_Students.searchCriteria.classId()
                    }, function(teacher) {
                        if (teacher.Id > 0) {
                            list_Students.searchCriteria.teacherId(teacher.Id);
                            list_Students.searchCriteria.teacherName(teacher.FullName);
                        } else {
                            list_Students.searchCriteria.teacherId(0);
                            list_Students.searchCriteria.teacherName("");
                        }
                        var vcommunityId = list_Students.searchCriteria.communityId();
                        var vschoolId = list_Students.searchCriteria.schoolId();
                        var vclassId = list_Students.searchCriteria.classId();
                        if (vcommunityId <= 0 || vschoolId <= 0 || vclassId <= 0) {
                            return;
                        } else {
                            IniConfirmForLanguage();
                            list_Students.search();
                        }
                    });
                }

            });

            list_Students.searchCriteria.classId.subscribe(function() {
             
            });
            $txtTeacher.on("selected.sunnet.datalist", function(event) {
                var teacher = event.selected;
                if (!teacher.value) {
                    list_Students.searchCriteria.teacherId(0);
                }
                var schoolId = list_Students.searchCriteria.schoolId();
                loadClasses(schoolId);
            });

            inited = true;
        });

        function AddClass() {
            if ($("#SearchSchoolId").val() == "") {
                showMessage("fail", "School is required.");
                return;
            }
            var teacherId = $("#TeacherId").val();
            var url = '@Url.Action("New", "Class", new {Area = "Class"})';
            url = url + "?schoolId=" + $("#SearchSchoolId").val() + "&schoolName=" + $("#txtSchool").val() + "&LeadTeacherId=" + teacherId;
            window.open(url, "_blank");
        }

        function ReturnFromClass() {

            getClassUrl = getClassUrlNew;
            $("#classChanged").click();
        }

        
        function searchForm() {
            if (list_Students.isAjaxing)
                return;
            if (list_Students.ajaxCount>0) {
                return false;
            }
            if (loadingCount>0) {
                return false;
            }
            var vcommunityId = list_Students.searchCriteria.communityId();
            var vschoolId = list_Students.searchCriteria.schoolId();
            var vclassId = list_Students.searchCriteria.classId();
            if (vcommunityId <= 0 || vschoolId <= 0 || vclassId <= 0) {
                window.showMessage("fail", "Please complete the Community/District, School Name, and Class fields.");
                return false;
            } else {
                list_Students.search();

                IniConfirmForLanguage();
            }
        }
    </script>
}