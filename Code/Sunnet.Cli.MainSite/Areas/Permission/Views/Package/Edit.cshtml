@using Sunnet.Cli.Core.Ade
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@model Sunnet.Cli.Business.Permission.Models.UserRoleModel

@{
    Layout = "~/Views/Shared/_Modal_Layout.cshtml";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var baseClassObj = new { @class = "form-control" };
}
@section Scripts
{
    <script type="text/javascript">
        +(function() {
            registerFormCallbacks("@(formId)", {
                onPosted: function (response) {
                    var parentListObj = @Request.QueryString["listObj"];
                    parentListObj.onDataUpdated(response);
                    closeModal($("#@(formId)"));
                }
            });
        })();
    </script>
}
<style type="text/css">
    .col-sm-2 {
        padding-right: 5px;
        padding-left: 10px;
    }
</style>
@using (Ajax.BeginForm("Edit", "Package", null, PostFormHelper.DefaultAjaxOptions,
    new
    {
        @class = "form-horizontal",
        role = "form",
        id = formId
    }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.IsDefault)
    <div class="form-group">
        <span class="control-label col-sm-2 required">Package Name</span>
        <div class="col-sm-4">
            @Html.TextBoxFor(model => model.Name, baseClassObj)
            @Html.ValidationMessageFor(model => model.Name)
        </div>
        <span class="control-label col-sm-2 required">User Role</span>
        @if (Model.IsDefault)
        {
            <div class="col-sm-4">
                @Html.DropDownListFor(model => model.UserType, (IEnumerable<SelectListItem>)ViewBag.UserTypeOptions, new { @class = "form-control", disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.UserType)
            </div>
        }
        else
        {
            <div class="col-sm-4">
                @Html.DropDownListFor(model => model.UserType, (IEnumerable<SelectListItem>)ViewBag.UserTypeOptions, new { @class = "form-control", disabled = "disabled" })
            </div>
        }
    </div>
    <div class="form-group">
        <span class="control-label col-sm-2 required">Status</span>
        @if (Model.IsDefault)
        {
            <div class="col-sm-4">
                @Html.DropDownListFor(model => model.Status, (IEnumerable<SelectListItem>)ViewBag.StatusOptions, new { @class = "form-control", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.Status)
            </div>
        }
        else
        {
            <div class="col-sm-4">
                @Html.DropDownListFor(model => model.Status, (IEnumerable<SelectListItem>)ViewBag.StatusOptions, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Status)
            </div>
        }

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Descriptions, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.TextAreaFor(model => model.Descriptions, new { @class = "form-control", rows = 3 })
            @Html.ValidationMessageFor(model => model.Descriptions)
        </div>
    </div>
    <div class="modal-footer">
        <button class="mainbutton modal-btn submit-btn" type="submit">Submit</button>
        <button class="mainbutton modal-btn cancel-btn" type="button" data-dismiss="modal">Cancel</button>
    </div>
}
