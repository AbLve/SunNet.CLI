@using System.Web.Optimization
@using Sunnet.Cli.Business.Permission
@using Sunnet.Cli.Core.TRSClasses.Enums
@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@model Sunnet.Cli.Business.Classes.Models.ClassEntityModel
@{
    ViewBag.Title = "Add Class";
    var formClass = new { @class = "form-control" };
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@section BreadPath
{
    @(Html.ActionLink("Class", "Index", "Class"))
    <i class="icon-angle-right"></i>Add
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.Class)
}
@section Scripts{
    @Scripts.Render("~/scripts/module_class");
    <script type="text/javascript">
        var baseModel = @Html.Raw(ViewBag.Role);
        jQuery(function() {
            registerFormCallbacks("@(formId)", {
                onResponsed: function(response) {
                    if (response.success) {
                        window.showMessage('warning', '<p style="text-align:left">Your changes may take up to 1 hour to be reflected on the Assessments.<br />' +
                                        '<span style="font-weight:bold;">DO NOT</span> process again to prevent duplicates.</p>');
                        if (window.opener != null && window.opener.opener != null && window.opener.ReturnFromClass != null) {
                            window.opener.ReturnFromClass();
                            window.close();
                        }
                        setTimeout(function() {
                            redirectBack("Index");
                        }, 2000);
                    }
                }
            });
            //hide
            $("#MonitoringToolOther").hide();
            $("#divEquipment").hide();


            //Monitoring show hide
            $("#MonitoringToolId").change(function() {
                changeStatusByMonitoringTool();
            });

            //Validate used Equipment
            fnUsedEquipment();


            addMinMaxValidate("#AtRiskPercent");

            $("#IsSameAsSchool").click(function() {
                if ($(this).prop("checked") == true) {
                    $("#AtRiskPercent").val("");
                    //get data
                    var schoolId = $("#SchoolId").val();
                    if (schoolId != null && schoolId != "") {
                        $.post("/School/School/GetAtRiskPercent", { schoolId: schoolId }, function(result) {
                            if (result != null) {
                                $("#AtRiskPercent").val(result);
                            }
                        });
                    }
                    $("#AtRiskPercent").prop("readonly", "true");
                } else {
                    $("#AtRiskPercent").val("0");
                    $("#AtRiskPercent").removeAttr("readonly");
                }
            });

            controlStatus();
            showOther();

            ko.applyBindings(baseModel);
        });

        function controlStatus() {
            $("#txtClassroom").val("");
            $("#ClassroomId").val("");

            $("#txtCommunity").on("selected.sunnet.datalist", function() {
                $("#txtSchool").datalist("clear");
                $("#txtClassroom").datalist("clear");
            });
            $("#txtSchool").on("selected.sunnet.datalist", function() {
                $("#txtClassroom").datalist("clear");
            });
        }

        function beforeSubmit() {
            if ($("form").valid()) {
                IsClassExist();
                return false;
            }
        }

    </script>
}
    @using (Ajax.BeginForm("New", "Class", null, PostFormHelper.DefaultAjaxOptions, new
    {
        HttpMethod = "Post",
        role = "form",
        id = formId,
        @class = "form-horizontal"
    }))
    {
        @Html.AntiForgeryToken()
        <div class="right-content-top">
            <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))">Back to Class list
            </a>
        </div>
        <div class="main-content">
            <div class="content-title">Basic Information</div>
            <div class="content-body">
                @Html.ValidationSummary(true)
                @Html.HiddenFor(o => o.LeadTeacherId)
                <div class="form-group">
                    <label for="txtCommunity" class="control-label col-sm-2">Community Name</label>
                    <div class="col-sm-4">
                        @Html.TextBox("txtCommunity", "", new
                        {
                            autocomplete = "off",
                            @class = "form-control",
                            data_list = "true",
                            data_for = "#CommunityId",
                            data_remote = Url.Action("GetCommunitySelectList", "Community", new {Area = "Community"}),
                            data_text = "Name",
                            data_value = "ID",
                            id = "txtCommunity",
                            placeholder = "Enter key text to search",
                            name = "txtCommunity",
                            @for = "CommunityId",
                            data_required = "true",
                            data_extraParams = "{\"communityName\":\"#txtCommunity\"}",
                            @Value = ""
                        })
                        @Html.Hidden("CommunityId", new
                        {
                            @class = "form-control validate",
                            @Value = "",
                            placeholder = "Selected Community"
                        })

                    </div>
                    <label for="txtSchool" class="control-label col-sm-2 required">School Name</label>
                    <div class="col-sm-4">
                        @Html.TextBox("txtSchool", "", new
                        {
                            autocomplete = "off",
                            @class = "form-control",
                            data_list = "true",
                            data_for = "#SchoolId",
                            data_remote = Url.Action("GetPrimarySchoolSelectList", "School", new {Area = "School"}),
                            data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",
                            data_text = "Name",
                            data_value = "ID",
                            id = "txtSchool",
                            placeholder = "Enter key text to search",
                            name = "txtSchool",
                            @for = "SchoolId",
                            data_extraParams = "{\"communityId\":\"#CommunityId\"}",
                            @Value = @ViewBag.schoolName
                        })
                        @Html.HiddenFor(model => model.SchoolId,
                            new
                            {
                                @class = "form-control validate",
                                @Value = @ViewBag.schoolId,
                                placeholder = "Selected School"
                            })
                        @Html.ValidationMessageFor(model => model.SchoolId)
                    </div>
                </div>
                <div class="form-group">
                    <label for="txtClassroom" class="control-label col-sm-2">Classroom Name</label>
                    <div class="col-sm-4">
                        @Html.TextBox("txtClassroom", "", new
                        {
                            autocomplete = "off",
                            @class = "form-control",
                            data_list = "true",
                            data_for = "#ClassroomId",
                            data_remote = Url.Action("GetClassroomSelectList", "Classroom", new {Area = "Classroom"}),
                            data_text = "Name",
                            data_value = "ID",
                            id = "txtClassroom",
                            placeholder = "Enter key text to search",
                            name = "txtClassroom",
                            @for = "ClassroomId",
                            data_extraParams = "{\"communityId\":\"#CommunityId\",\"schoolId\":\"#SchoolId\"}"
                        })
                        @Html.HiddenFor(model => model.ClassroomId, new {@class = "form-control validate", @Value = "", placeholder = "Selected Classroom"})

                    </div>
                    @Html.LabelFor(model => model.SchoolYear, new {@class = "control-label col-sm-2"})
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.SchoolYear, new {@class = "form-control", Readonly = "true"})
                        @Html.ValidationMessageFor(model => model.SchoolYear)
                    </div>
                </div>
                <div class="form-group">
                    <label for="Name" class="control-label col-sm-2 required">
                        Class Name
                        <i class="icon-question-sign question-tip" id="tooltip1" data-toggle="tooltip" data-placement="top"
                           title="Name the class after the homeroom teacher’s last name, First Name, Middle Name, Class
                        Day Type followed by 's Class, e.g. LastName's Class, LastName's AM Class, etc"></i>
                    </label>
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.Name, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                    @Html.LabelFor(model => model.ClassId, new {@class = "control-label col-sm-2"})
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.ClassId, new {@class = "form-control", Readonly = "true"})
                        @Html.ValidationMessageFor(model => model.ClassId)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Status, new {@class = "control-label col-sm-2 required"})
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.Status, (IEnumerable<SelectListItem>
                            ) ViewBag.StatusOptions, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.Status)
                    </div>
                    @Html.LabelFor(model => model.ClassInternalID, new {@class = "control-label col-sm-2"})
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.ClassInternalID, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.ClassInternalID)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DayType, new {@class = "control-label col-sm-2"})
                    <div class="col-sm-4">
                        @Html.EnumDropDownListFor(model => model.DayType, ViewTextHelper.DefaultPleaseSelectText, "0", new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.DayType)
                    </div>
                    @Html.LabelFor(model => model.StatusDate, new {@class = "control-label col-sm-2"})
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.StatusDate, new {@class = "form-control", Readonly = "true", @Value = Model.StatusDate.ToString("MM/dd/yyyy")})
                        @Html.ValidationMessageFor(model => model.StatusDate)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Classlevel, new {@class = "control-label col-sm-2"})
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.Classlevel, (IEnumerable<SelectListItem>) ViewBag.ClassLevelOptions, new {@class = "form-control"})
                    </div>
                    @Html.LabelFor(model => model.ClassType, new {@class = "control-label col-sm-2"})
                    <div class="col-sm-4">
                        @Html.EnumDropDownListFor(model => model.ClassType, ViewTextHelper.DefaultPleaseSelectText, "0", formClass)
                        @Html.ValidationMessageFor(model => model.ClassType)
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-4 " for="languageSelectList">Language of Instruction</label>
                    <div class="col-sm-4">
                        @if (ViewBag.LanguageOptions != null)
                        {
                            @Html.DropDownList("languageSelectList", (IEnumerable<SelectListItem>
                                ) ViewBag.LanguageOptions,
                                new
                                {
                                    @class = "form-control ",
                                    multiple = "multiple"
                                })
                        }
                        @Html.ValidationMessage("languageSelectList")
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CurriculumId, new {@class = "control-label col-sm-4"})
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.CurriculumId, (IEnumerable<SelectListItem>
                            ) ViewBag.CurriculumOptions, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.CurriculumId)
                        <label for="CurriculumOther" class="hide">CurriculumOther</label>
                        @Html.TextBoxFor(model => model.CurriculumOther, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.CurriculumOther)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SupplementalCurriculumId, new {@class = "control-label col-sm-4"})
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.SupplementalCurriculumId, (IEnumerable<SelectListItem>
                            ) ViewBag.CurriculumOptions, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.SupplementalCurriculumId)
                        <label for="SupplementalCurriculumOther" class="hide">SupplementalCurriculumOther</label>
                        @Html.TextBoxFor(model => model.SupplementalCurriculumOther, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.SupplementalCurriculumOther)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.AtRiskPercent, new {@class = "control-label col-sm-4"})
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.AtRiskPercent, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.AtRiskPercent)
                    </div>
                    <div class="col-sm-4">
                        @Html.CheckBoxFor(model => model.IsSameAsSchool)
                        @Html.LabelFor(model => model.IsSameAsSchool)
                    </div>
                </div>
                <div class="form-group" style="display: none"><!--Ticket 2294-->
                    @Html.LabelFor(model => model.MonitoringToolId, new {@class = "control-label col-sm-4 "})
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.MonitoringToolId, (IEnumerable<SelectListItem>
                            ) ViewBag.MonitoringToolOptions, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.MonitoringToolId)
                        <label for="MonitoringToolOther" class="hide">MonitoringToolOther</label>
                        @Html.TextBoxFor(model => model.MonitoringToolOther, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.MonitoringToolOther)
                    </div>
                </div>
                <div class="form-group" id="divEquipment">
                    @Html.LabelFor(model => model.UsedEquipment, new {@class = "control-label col-sm-4 required"})
                    <div class="col-sm-3">
                        @Html.EnumDropDownListFor(model => model.UsedEquipment, ViewTextHelper.DefaultPleaseSelectText, "0", new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.UsedEquipment)
                    </div>
                    @Html.LabelFor(model => model.EquipmentNumber, "Please Specify", new {@class = "control-label col-sm-2 required"})
                    <div class="col-sm-2">
                        @Html.TextBoxFor(model => model.EquipmentNumber, new {@class = "form-control", Readonly = "true", value = "0"})
                        @Html.ValidationMessage("EquipmentNumber")
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Notes, new {@class = "control-label col-sm-3"})
                    <div class="col-sm-8">
                        @Html.TextAreaFor(model => model.Notes, 5, 3, new {@class = "form-control", PlaceHolder = "Limit to 600 characters."})
                        @Html.ValidationMessageFor(model => model.Notes)
                    </div>
                </div>
            </div>

            <div class="button-content">
                <button class="mainbutton modal-btn submit-btn" type="submit" onclick=" return beforeSubmit(this); ">Submit</button>
                <button class="mainbutton modal-btn cancel-btn" type="button" onclick=' redirectBack("index") '>Cancel</button>
            </div>
        </div>
    }