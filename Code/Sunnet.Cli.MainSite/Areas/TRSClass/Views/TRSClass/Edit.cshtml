@using Sunnet.Cli.Business.Permission
@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@model Sunnet.Cli.Core.TRSClasses.Entites.TRSClassEntity
@{
    ViewBag.Title = "Edit TRS Class";
    var formClass = new { @class = "form-control" };
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@section BreadPath
{
    @(Html.ActionLink("TRSClass", "Index", "TRSClass"))
    <i class="icon-angle-right"></i>Edit
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.TRSClass)
}
@section Scripts{
    <script type="text/javascript">
        var baseModel = {};
        var trsObject = @Html.Raw(ViewBag.TrsObject);
        baseModel.trsObject = classTrsObjectEdit(trsObject);
        jQuery(function() {
            registerFormCallbacks("@(formId)", {
                onPosted: function(response) {
                    if (window.AllQueryString.close === true) {
                        window.close();
                    } else {
                        redirectBack("Index");
                    }
                }
            });

            $("#TypeOfClass").on("change", function(event) {
                // Mac
                if ($("#TypeOfClass").val() == "1") {
                    baseModel.trsObject.type("NMAC");
                } else { // NMac
                    baseModel.trsObject.type("MAC");
                }
            });

            $("[name='childNumberList']").each
            (
                function(index, domEle) {
                    GenerateNumber(domEle);
                }
            );

            ko.applyBindings(baseModel);
        });

        function GenerateNumber(obj) {
            var i = 0;
            for (i = 0; i <= 31; i++) {
                $(obj).append("<option value='" + i + "'>" + i + "</option>");
            }
        }

        function classTrsObject(trsObject) {
            $.each(trsObject.childrenTypes, function (index, type) {
                type.checked = ko.observable(false);
            });
            trsObject.visible = ko.observable(trsObject.visible);
            trsObject.multiple = ko.observable(trsObject.multiple);
            trsObject.typeOfClass = ko.observable(trsObject.typeOfClass);
            trsObject.show = ko.observable(trsObject.show);
            return trsObject;
        }

        function classTrsObjectEdit(trsObject) {
            var object = classTrsObject(trsObject);
            $.each(object.childrenTypes, function (index, type) {
                type.checked = ko.observable(type.Selected);
            });
            return object;
        }

        var facilityType = "";
        function beforeSubmit(sender) {
            if ($("form").valid()) {
                if (facilityType == "LCCH" || facilityType == "RCCH") {
                    var hasChild = false;
                    $("input[name='hiddenChild']").each(function() {
                        if ($(this).val() != "") {
                            hasChild = true;
                            return true;
                        }
                    });
                    if (hasChild) {
                        return true;
                    } else {
                        showMessage("hint", "Please select Age of Children");
                        return false;
                    }

                } else if ($("[id=TrsAssessorId][type!=hidden]").length > 0 && $("#TrsAssessorId").val() && $("#TrsAssessorId").val() == $("#TrsMentorId").val()) {
                    showMessage("hint", "trs_ClassSameAssessorAndMentor");
                    return false;
                } else {
                    $.get('IsClassExist', { name: $("#Name").val(), id: $("#ID").val(), schoolId: $("#SchoolId").val() }, function (data) {
                        if (data) {
                            jQuery.when(waitingConfirm(window.getErrorMessage("ClassExists"), "Yes", "No")).done(function () {
                                $("form").submit();
                            }).fail(function () {

                            });
                        }
                        else {
                            $("form").submit();
                        }
                    }, "json");
                    return false;
                }
            }
        };

    </script>
}
@using (Ajax.BeginForm("Edit", "TRSClass", null, PostFormHelper.DefaultAjaxOptions, new
{
    HttpMethod = "Post",
    role = "form",
    id = formId,
    @class = "form-horizontal"
}))
{
    @Html.AntiForgeryToken()
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))">Back to TRS Class list</a>
    </div>
    <div class="main-content">
        <div class="content-title">Basic Information</div>
        <div class="content-body">
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.SchoolId)
            <div class="form-group">
                <label class="col-sm-2 control-label" for="CommunityId">Community/District</label>
                <div class="col-sm-4">
                    <input type="text" id="CommunityId" class="form-control" readonly="readonly" value="@ViewBag.communityName" />
                </div>
                @Html.LabelFor(model => model.SchoolId, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    <input type="text" id="SchoolId" class="form-control" readonly="readonly" value="@Html.Raw(ViewBag.schoolName)" />
                </div>
            </div>
            <div class="form-group">
                <label for="Name" class="control-label col-sm-2 required">
                    Class Name
                </label>
                @*<div class="col-sm-4">
                    <span style="float: left; padding-top: 5px; width: 10%; text-align: right;">TRS-</span>
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @style = "width:90%;" })
                    @Html.ValidationMessageFor(model => model.Name)
                </div>*@
                <div class="col-sm-4">
                    <span style="float: left; padding-top: 5px; width: 10%; text-align: right;">TRS-</span>
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @style = "width:90%;" })
                    @Html.ValidationMessageFor(model => model.Name)
                </div>
                @Html.LabelFor(model => model.SchoolYear, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.SchoolYear, new { @class = "form-control", Readonly = "true" })
                    @Html.ValidationMessageFor(model => model.SchoolYear)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Status, new { @class = "control-label col-sm-2 required" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Status, (IEnumerable<SelectListItem>)ViewBag.StatusOptions, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Status)
                </div>
                @Html.LabelFor(model => model.TRSClassId, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.TRSClassId, new { @class = "form-control", Readonly = "true" })
                    @Html.ValidationMessageFor(model => model.TRSClassId)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StatusDate, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.StatusDate, new { @class = "form-control", Readonly = "true", @Value = Model.StatusDate.FormatDateString() })
                    @Html.ValidationMessageFor(model => model.StatusDate)
                </div>
                @Html.LabelFor(model => model.HomeroomTeacherId, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.HomeroomTeacherId, (IEnumerable<SelectListItem>)ViewBag.TeacherOptions, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TrsAssessorId, null, new { @class = "col-sm-2 control-label required", })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.TrsAssessorId, (IEnumerable<SelectListItem>)ViewBag.CoachOptions, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TrsAssessorId)
                </div>
                @Html.LabelFor(model => model.TrsMentorId, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.TrsMentorId, (IEnumerable<SelectListItem>)ViewBag.CoachOptions, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TrsMentorId)
                </div>
            </div>
        </div>

        <div class="main-content" id="divAgeChildren">
            <div class="content-body">
                @Html.ValidationMessage("hiddenChild", "The field Age of Children is required.", "div")
                <div class="form-group">
                    @*@if (ViewBag.TRSAccess != Permission.Invisible)
                    {
                        <label class="col-sm-3 control-label" for="TypeOfClass">
                            <strong>Type of Classroom
                            </strong>
                        </label>
                        <div class="col-sm-5">
                            @Html.HiddenFor(x => x.TypeOfClass, new { data_bind = "value:trsObject.typeOfClass" })
                            @Html.DropDownListFor(model => model.TypeOfClass, (IEnumerable<SelectListItem>)ViewBag.ClassroomTypeOptions,
                                new
                                {
                                    @class = "form-control",
                                    data_bind = "enable: trsObject.multiple() && !trsObject.readOnly,value:trsObject.typeOfClass"
                                })
                        </div>
                    }*@
                    <div class="col-sm-12">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th style="width: 300px;">Age of Children</th>
                                    <th style="width: 150px;"># of Children</th>
                                    <th style="width: 200px;">Number of Caregivers</th>
                                    <td></td>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach:{data:trsObject.childrenTypes,as:'childrenAgeType'}">
                                <tr>
                                    <td>
                                        <label data-bind="attr:{'for':'chk1'+ID}" style="display: none">1</label> 
                                        <input type="checkbox" class="hidden"   name="hiddenChild" data-bind="attr:{id:'chk1'+ID},value:ID,checked:$root.trsObject.readOnly && checked()">
                                        <label>
                                            <input type="checkbox" name="hiddenChild"   data-bind="attr:{id:'chk2'+ID},value:ID,checked:checked,enable: !$root.trsObject.readOnly,required:true">
                                            <span data-bind="text:Name"></span>
                                        </label>
                                    </td>
                                    <td>
                                        <label data-bind="attr:{'for':'chkTemp1'+ID}" style="display: none">1</label> 
                                        <label data-bind="attr:{'for':'selTemp1'+ID}" style="display: none">1</label> 
                                        <input type="checkbox" class="hidden"     name="dpChildrenNumber" data-bind="attr:{id:'chkTemp1'+ID},value:childrenAgeType.Count,checked: $root.trsObject.readOnly && checked()">
                                        <select name='dpChildrenNumber' class="form-control" data-bind="attr:{id:'selTemp1'+ID},enable: !$root.trsObject.readOnly && checked(),visible:checked(), options:$root.trsObject.numbers, optionsText: 'Text',optionsValue: 'Value',value:childrenAgeType.Count"></select>
                                    </td>
                                    <td>
                                        <label data-bind="attr:{'for':'txtCaregiversNo'+ID}" style="display: none">1</label>
                                        <input name="txtCaregiversNo" type="text" class="form-control" data-bind="attr:{id:'txtCaregiversNo'+ID},enable: !$root.trsObject.readOnly && checked(),visible:checked(),value:childrenAgeType.CaregiversNumber"
                                            maxlength="2" onkeyup="javascript:this.value=this.value.replace(/[^\d]/g,'')" />
                                    </td>
                                    <td></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="content-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Notes, new { @class = "control-label col-sm-2" })
                    <div class="col-sm-10">
                        @Html.TextAreaFor(model => model.Notes, 5, 3, new
                    {
                        @class = "form-control",
                        PlaceHolder = "Limit to 600 characters."
                    })
                        @Html.ValidationMessageFor(model => model.Notes)
                    </div>
                </div>
            </div>
        </div>

        <div class="button-content">
            <button class="mainbutton modal-btn update-btn" type="submit" onclick=" return beforeSubmit(this); ">Submit</button>
            <button class="mainbutton modal-btn cancel-btn" type="button" onclick=' redirectBack("index") '>Cancel</button>
        </div>
    </div>
}