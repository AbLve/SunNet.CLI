@using System.Web.Optimization
@using Sunnet.Cli.Business.Permission
@using Sunnet.Cli.Core.TRSClasses.Enums
@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models
@using Sunnet.Framework.Extensions
@model Sunnet.Cli.Core.TRSClasses.Entites.TRSClassEntity
@{
    ViewBag.Title = "Add TRS Class";
    var formClass = new { @class = "form-control" };
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
}

@section BreadPath
{
    @(Html.ActionLink("TRSClass", "Index", "TRSClass"))
    <i class="icon-angle-right"></i>Add
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.TRSClass)
}
@section Scripts{
    <script type="text/javascript">
        var baseModel = {};
        var trsObject = @Html.Raw(ViewBag.TrsObject);
        baseModel.trsObject = classTrsObject(trsObject);
        jQuery(function() {
            registerFormCallbacks("@(formId)", {
                onPosted: function(response) {
                    if (window.opener != null) { 
                        window.opener.ReturnFromClass();
                        window.close();
                    }
                    redirectBack("index");
                }
            });

            $("#txtCommunity").on("selected.sunnet.datalist", function() {
                $("#txtSchool").datalist("clear");
            });

            $("#txtSchool").on("selected.sunnet.datalist", function() {
                //$("#txtClassroom").datalist("clear");
            });

            var mixedAge = "@((int)TRSClassofType.MAC)";
            var nmixedAge = "@((int)TRSClassofType.NMAC)";
            $("#SchoolId").on("change", function(event) {
                if ($("#SchoolId").val() != "") {
                    $.post('@(Url.Action("GetTrsAccess"))' + "?schoolId=" + $("#SchoolId").val() + "&communityId=" + $("#CommunityId").val(), function(response) {
                        if (response.success) {
                            //LCAA, LCSA: NMAC,MAC
                            if (response.data.TypeofClassroom == "LCAA" || response.data.TypeofClassroom == "LCSA") {
                                baseModel.trsObject.typeOfClass(nmixedAge);
                                baseModel.trsObject.multiple(true);
                            } else {
                                // LCCH, RCCH
                                baseModel.trsObject.typeOfClass(mixedAge);
                                baseModel.trsObject.multiple(false);
                            }
                            appendTrsAssessors();
                            baseModel.trsObject.show(true);
                            baseModel.trsObject.visible(true);
                        } else {
                            if (response.data.Show) {
                                appendTrsAssessors();
                                baseModel.trsObject.show(false);
                                baseModel.trsObject.visible(true);
                            } else {
                                removeTrsAssessors();
                            }
                        }
                    }, 'json');
                    appendHomeroomTeacher();
                } else {
                    baseModel.trsObject.visible(false);
                }
            }).trigger("change");

            ko.applyBindings(baseModel);
        });

        function appendTrsAssessors() {
            //TRSClassAssessor
            if ($("#SchoolId").val() != "") {
                $.post('@(Url.Action("GetTrsAssessor"))' + "?schoolId=" + $("#SchoolId").val(), function(data) {
                    removeTrsAssessors();
                    if (data.length > 0) {
                        $("#TrsAssessorId, #TrsMentorId").each(function(index, item) {
                            for (var key in data) {
                                $(item).append('<option value="' + data[key].Value + '">' + data[key].Text + '</option>');
                            }
                        });
                    }
                }, 'json');
            }
        }

        function appendHomeroomTeacher() {
            //HomeroomTeacher
            if ($("#SchoolId").val() != "") {
                removeTrsAssessors();
                $.post('@(Url.Action("GetHomeroomTeacher"))' + "?schoolId=" + $("#SchoolId").val(), function(data) {
                    if (data.length > 0) {
                        for (var key in data) {
                            $("#HomeroomTeacherId").append('<option value="' + data[key].Value + '">' + data[key].Text + '</option>');
                        }
                    }
                }, 'json');
            }
        }

        function removeTrsAssessors() {
            $("#TrsAssessorId, #TrsMentorId,#HomeroomTeacherId").each(function(i, s) {
                $(s).children().each(function(index, item) {
                    if (index > 0) {
                        $(item).remove();
                    }
                });
            });
        }

        function classTrsObject(trsObject) {
            $.each(trsObject.childrenTypes, function (index, type) {
                type.checked = ko.observable(false);
            });
            trsObject.visible = ko.observable(trsObject.visible);
            trsObject.multiple = ko.observable(trsObject.multiple);
            trsObject.typeOfClass = ko.observable(trsObject.typeOfClass);
            trsObject.show = ko.observable(trsObject.show);
            return trsObject;
        }

        function classTrsObjectEdit(trsObject) {
            var object = classTrsObject(trsObject);
            $.each(object.childrenTypes, function (index, type) {
                type.checked = ko.observable(type.Selected);
            });
            return object;
        }
        
        function beforeSubmit() {
            if ($("form").valid()) {
                if ($("#TrsAssessorId").val() && $("#TrsAssessorId").val() == $("#TrsMentorId").val()) {
                    showMessage("hint", "trs_ClassSameAssessorAndMentor");
                    return false;
                } else {
                    $.get('IsClassExist', { name: $("#Name").val(), id: $("#ID").val(), schoolId: $("#SchoolId").val() }, function (data) {
                        if (data) {
                            jQuery.when(waitingConfirm(window.getErrorMessage("ClassExists"), "Yes", "No")).done(function () {
                                $("form").submit();
                            }).fail(function () {

                            });
                        }
                        else {
                            $("form").submit();
                        }
                    }, "json");
                    return false;
                }
            }
        }
    </script>
}
@using (Ajax.BeginForm("New", "TRSClass", null, PostFormHelper.DefaultAjaxOptions, new
{
    HttpMethod = "Post",
    role = "form",
    id = formId,
    @class = "form-horizontal"
}))
{
    @Html.AntiForgeryToken()
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))">Back to TRS Class list
        </a>
    </div>
    <div class="main-content">
        <div class="content-title">Basic Information</div>
        <div class="content-body">
            @Html.ValidationSummary(true)
            <div class="form-group">
                <label for="txtCommunity" class="control-label col-sm-2">Community/District</label>
                <div class="col-sm-4">
                    @Html.TextBox("txtCommunity", "", new
                {
                    autocomplete = "off",
                    @class = "form-control",
                    data_list = "true",
                    data_for = "#CommunityId",
                    data_remote = Url.Action("GetCommunitySelectList", "Community", new { Area = "Community" }),
                    data_text = "Name",
                    data_value = "ID",
                    id = "txtCommunity",
                    placeholder = "Enter key text to search",
                    name = "txtCommunity",
                    @for = "CommunityId",
                    data_required = "true",
                    data_extraParams = "{\"communityName\":\"#txtCommunity\"}",
                    @Value = ""
                })
                    @Html.Hidden("CommunityId", new
                {
                    @class = "form-control validate",
                    @Value = "",
                    placeholder = "Selected Community"
                })

                </div>
                <label for="txtSchool" class="control-label col-sm-2 required">School Name</label>
                <div class="col-sm-4">
                    @Html.TextBox("txtSchool", "", new
                {
                    autocomplete = "off",
                    @class = "form-control",
                    data_list = "true",
                    data_for = "#SchoolId",
                    data_remote = Url.Action("GetPrimarySchoolSelectList", "School", new { Area = "School" }),
                    data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",
                    data_text = "Name",
                    data_value = "ID",
                    id = "txtSchool",
                    placeholder = "Enter key text to search",
                    name = "txtSchool",
                    @for = "SchoolId",
                    data_extraParams = "{\"communityId\":\"#CommunityId\"}",
                    @Value = @ViewBag.schoolName
                })
                    @Html.HiddenFor(model => model.SchoolId,
                new
                {
                    @class = "form-control validate",
                    @Value = "",
                    placeholder = "Selected School"
                })
                    @Html.ValidationMessageFor(model => model.SchoolId)
                </div>
            </div>
            <div class="form-group">
                <label for="Name" class="control-label col-sm-2 required">
                    Class Name
                </label>
                <div class="col-sm-4">
                    <span style="float: left; padding-top: 5px; width: 10%; text-align: right;">TRS-</span>
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @style = "width:90%;" })
                    @Html.ValidationMessageFor(model => model.Name)
                </div>
                @Html.LabelFor(model => model.SchoolYear, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.SchoolYear, new { @class = "form-control", Readonly = "true" })
                    @Html.ValidationMessageFor(model => model.SchoolYear)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Status, new { @class = "control-label col-sm-2 required" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Status, (IEnumerable<SelectListItem>
                    )ViewBag.StatusOptions, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Status)
                </div>
                @Html.LabelFor(model => model.TRSClassId, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.TRSClassId, new { @class = "form-control", Readonly = "true" })
                    @Html.ValidationMessageFor(model => model.TRSClassId)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StatusDate, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.StatusDate, new { @class = "form-control", Readonly = "true", @Value = Model.StatusDate.ToString("MM/dd/yyyy") })
                    @Html.ValidationMessageFor(model => model.StatusDate)
                </div>
                @Html.LabelFor(model => model.HomeroomTeacherId, new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.HomeroomTeacherId, (IEnumerable<SelectListItem>)ViewBag.HomeroomTeacherOptions, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TrsAssessorId, null, new { @class = "col-sm-2 control-label required", })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.TrsAssessorId, (IEnumerable<SelectListItem>)ViewBag.CoachOptions, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TrsAssessorId)
                </div>
                @Html.LabelFor(model => model.TrsMentorId, null, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.TrsMentorId, (IEnumerable<SelectListItem>)ViewBag.CoachOptions, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TrsMentorId)
                </div>
            </div>
        </div>

        <div class="main-content" id="divAgeChildren">
            <div class="content-body">
                @Html.ValidationMessage("hiddenChild", "The field Age of Children is required.", "div")
                <div class="form-group">
                    @*@if (ViewBag.TRSAccess == Permission.Editable)
                    {                    
                        <label class="col-sm-3 control-label" for="TypeOfClass">
                            <strong>Type of Classroom
                            </strong>
                        </label>
                        <div class="col-sm-5">
                            @Html.HiddenFor(x => x.TypeOfClass, new { data_bind = "value:trsObject.typeOfClass" })
                            @Html.DropDownListFor(model => model.TypeOfClass, (IEnumerable<SelectListItem>)ViewBag.ClassroomTypeOptions,
                                new
                                {
                                    @class = "form-control",
                                    data_bind = "enable: trsObject.multiple() && !trsObject.readOnly,value:trsObject.typeOfClass"
                                })
                        </div>
                    }*@
                    <div class="col-sm-12">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th style="width: 300px;">Age of Children</th>
                                    <th style="width: 150px;"># of Children</th>
                                    <th style="width: 200px;">Number of Caregivers</th>
                                    <td></td>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach:{data:trsObject.childrenTypes,as:'childrenAgeType'}">
                                <tr>
                                    <td>
                                        <label>

                                            <input type="checkbox" class="required" name="hiddenChild" data-bind="attr:{id:'chk1'+ID},value:ID,checked:checked,required:true">
                                            <span data-bind="text:Name"></span>
                                        </label>
                                    </td>
                                    <td>
                                        <label data-bind="attr:{'for':'selTemp1'+ID}" style="display: none">1</label>
                                        <select name='dpChildrenNumber' class="form-control" data-bind="attr:{id:'selTemp1'+ID},visible:checked(), options:$root.trsObject.numbers, optionsText: 'Text',optionsValue: 'Value',value:childrenAgeType.Count"></select>
                                    </td>
                                    <td>
                                        <label data-bind="attr:{'for':'txtCaregiversNo'+ID}" style="display: none">1</label>
                                        <input name="txtCaregiversNo" type="text" class="form-control" data-bind="attr:{id:'txtCaregiversNo'+ID},visible:checked()"
                                            maxlength="2" onkeyup="javascript:this.value=this.value.replace(/[^\d]/g,'')" />
                                    </td>
                                    <td></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="content-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Notes, new { @class = "control-label col-sm-2" })
                    <div class="col-sm-10">
                        @Html.TextAreaFor(model => model.Notes, 5, 3, new { @class = "form-control", PlaceHolder = "Limit to 600 characters." })
                        @Html.ValidationMessageFor(model => model.Notes)
                    </div>
                </div>
            </div>
        </div>

        <div class="button-content">
            <button class="mainbutton modal-btn submit-btn" type="submit" onclick=" return beforeSubmit(this); ">Submit</button>
            <button class="mainbutton modal-btn cancel-btn" type="button" onclick=' redirectBack("index") '>Cancel</button>
        </div>
    </div>
}