@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models
@model Sunnet.Cli.Business.Students.Models.ParentStudentListModel
@using Sunnet.Framework.Extensions
@{
    ViewBag.Title = "Parent Management";
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.ParentManagement)
}
@section BreadPath
{
    @(Html.ActionLink("Parent Management", "Index", "Index"))&nbsp;<i class="icon-angle-right"></i>&nbsp;Parent Management
}

<div class="right-content-top">
    <button type="button" class="mainbutton mainright-btn create-btn" data-bind="click: $root.addData">Add Parents</button>
</div>
<div class="modal-l-b"></div>
<form class="form-horizontal" role="form" id="formSearch">
    <div class="form-group">
        @Html.Label("", "Community/District", new { @class = "control-label col-sm-2", @for = "txtCommunity" })
        <div class="col-sm-3">
            @Html.TextBox("txtCommunity", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_for = "#CommunityId",
           data_remote = Url.Action("GetCommunitySelectListForSearch", "Community", new { Area = "Community" }),
           data_text = "Name",
           data_value = "ID",
           data_required = false,
           id = "txtCommunity",
           name = "txtCommunity",
           placeholder = "Enter key text to search",
           data_bind = "value: searchCriteria.communityName",
           @for = "CommunityId",
           data_extraParams = "{\"isActiveCommunity\":\"#isActiveCommunity\"}"
       })
            @Html.Hidden("CommunityId", "", new
       {
           @class = "form-control ",
           placeholder = "Selected Community",
           data_bind = "value: searchCriteria.communityId"
       })
            @Html.Hidden("isActiveCommunity", false)
        </div>
        @Html.Label("", "School Name", new { @class = "control-label col-sm-2", @for = "txtSchool" })
        <div class="col-sm-3">
            @Html.TextBox("txtSchool", "", new
       {
           autocomplete = "off",
           @class = "form-control",
           data_list = "true",
           data_for = "#SchoolId",
           data_remote = Url.Action("GetSchoolSelectList", "School", new { Area = "School" }),
           data_template = "<strong><% this[i].Name %></strong><br /><i style='color:gray'><% this[i].City %>, <% this[i].State %> <% this[i].Zip %></i>",
           data_text = "Name",
           data_value = "ID",
           data_required = false,
           id = "txtSchool",
           name = "txtSchool",
           placeholder = "Enter key text to search",
           data_bind = "value: searchCriteria.schoolName",
           @for = "SchoolId",
           data_extraParams = "{\"communityId\":\"#CommunityId\",\"isActive\":\"#isActive\"}"

       })
            @Html.Hidden("SchoolId", "", new
       {
           @class = "form-control",
           placeholder = "Selected School",
           data_bind = "value: searchCriteria.schoolId"
       })
            @Html.Hidden("isActive", false)
        </div>
    </div>
    <div class="form-group">
        @Html.Label("", "Class Name", new { @class = "control-label col-sm-2", @for = "dplClass" })
        <div class="col-sm-3">
            <select id="dplClass" class="form-control"
                data-bind="options: classOptions, optionsText: 'Text', optionsValue: 'Value', value: searchCriteria.classId">
            </select>
        </div>
        @Html.Label("", "Student Name", new { @class = "control-label col-sm-2", @for = "txtStudentName" })
        <div class="col-sm-3">
            @Html.TextBox("txtStudentName", "", new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.studentName",
           placeholder = "Enter first, middle or last name"
       })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ParentStatus, new { @class = "control-label col-sm-2" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(m => m.ParentStatus, ViewTextHelper.DefaultAllText, "-1", new
            {
                @class = "form-control",
                data_bind = "value: searchCriteria.parentStatus"
            })
        </div>
        @Html.Label("", "Parent Name", new { @class = "control-label col-sm-2", @for = "txtParentName" })
        <div class="col-sm-3">
            @Html.TextBox("txtParentName", "", new
       {
           @class = "form-control",
           data_bind = "value: searchCriteria.parentName",
           placeholder = "Enter first, middle or last name"
       })
        </div>
        <div class="col-sm-2">
            <button class="mainbutton mainright-btn sreach-btn" type="button" data-bind="event: { click: search }">Search</button>
        </div>
    </div>
</form>
<div class="main-content main-content">
    <div class="content-title">
        Parents
    </div>

    <div class="content-body-tab">
        <table class="table table-striped table-hover">
            <thead>
                <tr data-bind="foreach: { data: headers, as: 'header' }">
                    <!-- ko if: (header.order === true)-->
                    <th data-bind="style: { width: width }">
                        <a href="javascript:;" data-bind="text: text, click: $root.changeOrder"></a>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'ASC',
    css: { 'glyphicon-arrow-up': $root.orderDirection().toUpperCase() == 'ASC' }"></span>
                        <span class="glyphicon"
                            data-bind="visible: $root.orderBy() == header.field && $root.orderDirection().toUpperCase() == 'DESC',
    css: { 'glyphicon-arrow-down': $root.orderDirection().toUpperCase() == 'DESC' }"></span>
                    </th>
                    <!-- /ko-->
                    <!-- ko if: (header.order === false) -->
                    <th data-bind="text: text, style: { width: width }"></th>
                    <!-- /ko-->
                </tr>
            </thead>
            <tbody data-bind="foreach: { data: showRecords, as: 'item' }">
                <tr>
                    <td data-bind="text: item.ChildFirstName"></td>
                    <td data-bind="text: item.ChildLastName"></td>
                    <td data-bind="text: item.BirthDate"></td>
                    <td data-bind="text: item.ParentCode"></td>
                    <td data-bind="text: item.ParentFirstName"></td>
                    <td data-bind="text: item.ParentLastName"></td>
                    <td data-bind="text: item.ParentPrimaryEmail"></td>
                    <td data-bind="text: item.ParentStatus.text"></td>
                    <td>
                        <a class="table-btn icon-pencil pencil-btn" data-bind="event: { click: $root.EditParent }" href="#" title="Edit"></a>
                        <a class="table-btn icon-envelope-alt message-btn" data-bind="event: { click: $root.Invite }" href="#" title="Invite Parent"></a>
                        <a class="table-btn icon-share-alt message-btn" data-bind="event: { click: $root.Disassociate }" href="#" title="Disassociate"></a>
                        <a class="table-btn icon-lock permission-btn" data-bind='attr: { href: $root.permissionData(item) }' data-toggle="modal" data-target="#modalNormal" title="Permission"></a>
                    </td>
                </tr>
            </tbody>
            @Html.Display("e", "NoData", new { Colspan = 9 })
        </table>
        @Html.Partial("_Partial_Pager")
    </div>
</div>


@section Scripts
{
    <script type="text/javascript">
        var list_Students = {};

        function SchoolChanged() {
            var schoolId = $("#SchoolId").val();
            var communityId = $("#CommunityId").val();
            $.getJSON(
                '/Student/Student/GetClassSelectList',
                { schoolId: schoolId, communityId: communityId },
                function (data) {
                    list_Students.classOptions(data);
                    list_Students.searchCriteria.classId(window.queryString("classid"));
                });
        }

        $(function () {
            list_Students = new ViewModel(
                {
                    instanceName: "list_Students",
                    modalId: "modalNormal",
                    getDataUrl: '@Html.Raw(Server.UrlDecode(Url.Action("SearchParentStudents")))',
                    addDataUrl: '@Html.Raw(Url.Action("AddParents"))',
                    addType: 'Redirect',
                    orderBy: "ChildFirstName",
                    orderDirection: "ASC",
                    pageSize: 10,
                    headers: [
                        {
                            text: "@Html.DisplayNameFor(model => model.ChildFirstName)",
                            field: "@Html.NameFor(model => model.ChildFirstName)",
                            order: true,
                            width: '12%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.ChildLastName)",
                            field: "@Html.NameFor(model => model.ChildLastName)",
                            order: true,
                            width: '12%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.BirthDate)",
                            field: "@Html.NameFor(model => model.BirthDate)",
                            order: true,
                            width: '10%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.ParentCode)",
                            field: "@Html.NameFor(model => model.ParentCode)",
                            order: true,
                            width: '12%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.ParentFirstName)",
                            field: "@Html.NameFor(model => model.ParentFirstName)",
                            order: true,
                            width: '12%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.ParentLastName)",
                            field: "@Html.NameFor(model => model.ParentLastName)",
                            order: true,
                            width: '12%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.ParentPrimaryEmail)",
                            field: "@Html.NameFor(model => model.ParentPrimaryEmail)",
                            order: true,
                            width: '12%'
                        },
                        {
                            text: "@Html.DisplayNameFor(model => model.ParentStatus)",
                            field: "@Html.NameFor(model => model.ParentStatus)",
                            order: true,
                            width: '6%'
                        },
                        { text: "Action", width: '10%' }
                    ],
                    searchCriteria: {
                        communityId: ko.observable(window.queryString("communityId")),
                        communityName: ko.observable(window.queryString("communityName")),
                        schoolId: ko.observable(window.queryString("schoolId")),
                        schoolName: ko.observable(window.queryString("schoolName")),
                        classId: ko.observable(window.queryString("classid", -1)),
                        studentName: ko.observable(window.queryString("studentName")),
                        parentStatus: ko.observable(window.queryString("parentStatus", -1)),
                        parentName: ko.observable(window.queryString("parentName"))
                    }
                },
                {
                    classOptions: ko.observableArray([]),
                    Invite: function (parent) {
                        $.post('/Parent/Index/ParentInviteById', { parentId: parent.ParentId }, function (result) {
                            if (result == "Invited") {
                                showMessage("success", "Email has been sent successfully.");
                                list_Students.search();
                            } else {
                                showMessage("fail");
                            }
                        });
                    },
                    EditParent: function (item) {
                        location.href = "/Invitation/Parent/Edit?id=" + item.ParentId + "&returnUrl=" + list_Students.getLocation();
                    },
                    Disassociate: function (parent) {
                        $.post('/Parent/Index/Disassociate', { parentId: parent.ParentId, studentId: parent.StudentId }, function (result) {
                            if (result.success) {
                                showMessage("success", "Disassociate successfully.");
                                list_Students.search();
                            } else {
                                showMessage("fail");
                            }
                        }, 'json');
                    },
                    permissionData: function (parent) {
                        return '@Url.Action("AssignPermission", "Public", new { Area = "Invitation" })' + "?userId=" + parent.ID;
                    }
                }
            );

            list_Students.search();
            ko.applyBindings(list_Students);

            $("#txtCommunity").on("selected.sunnet.datalist", function () {
                $("#txtSchool").datalist("clear");
                $("#SchoolId").val("");
                SchoolChanged();
            });
            $("#txtSchool").on("selected.sunnet.datalist", function () {
                SchoolChanged();
            });
            SchoolChanged();
        });
    </script>
}