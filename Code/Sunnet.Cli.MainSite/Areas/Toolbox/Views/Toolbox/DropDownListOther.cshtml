@using System.Web.UI.WebControls
@using Sunnet.Cli.Core.Common.Enums
@using Sunnet.Cli.MainSite.Models
@using Sunnet.Cli.UIBase.Models

@{
    ViewBag.Title = "Toolbox";
    var formId = PostFormHelper.GetFormId(Html.ViewContext.View);
    var otherInfo = string.Empty;
    if (ViewBag.ddlName.ToString() == "SchoolTypes")
    {
        otherInfo = "Parent Field";
    }
    else if (ViewBag.ddlName.ToString() == "Positions")
    {
        otherInfo = "User Type";
    }
    else
    {
        otherInfo = "Module";
    }
    var titleName = ViewBag.ShowName ?? ViewBag.ddlName;
}
@section LeftMenu
{
    @Html.Partial("~/Views/Shared/_MasterData_LeftMenu.cshtml", Leftmenu_MainSite.Toolbox)
}
@section BreadPath
{
    @(Html.ActionLink("Toolbox", "Index", "Toolbox"))&nbsp;<i class="icon-angle-right"></i>&nbsp;@titleName
}

@using (Ajax.BeginForm("", "Toolbox", null, PostFormHelper.DefaultAjaxOptions, new
{
    HttpMethod = "Post",
    role = "form",
    id = "frmAdd",
    @class = "form-horizontal"
}))
{
    <div class="right-content-top">
        <a class="mainbutton mainright-btn nav-btn" href="@(Server.UrlDecode(Request.QueryString["returnurl"]) ?? Url.Action("Index"))" >Back to Toolbox List
        </a>
    </div>
    <div class="main-content">
        <div class="content-title">@titleName</div>
        <div class="content-body">
            <div class="form-group">
                <label class="col-sm-2 control-label">
                    <span>@otherInfo</span>
                </label>
                <div class="col-sm-3">
                    <label for="newDdlOther" class="hide">wave</label>
                    @Html.DropDownList("newDdlOther", (IEnumerable<SelectListItem>)ViewBag.OtherOptions, new
                    {
                        @class = "form-control required"
                    })
                    @Html.ValidationMessage("newDdlOther")
                </div>
                <span class="control-label col-sm-2">New Option Status</span>
                <div class="col-sm-3">
                    <label>
                        <input type="radio" name="newStatus" value="@((byte)EntityStatus.Active)" checked="checked"/>&nbsp;@EntityStatus.Active</label>
                    <label>
                        <input type="radio" name="newStatus" value="@((byte)EntityStatus.Inactive)" />&nbsp;@EntityStatus.Inactive</label>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">New Option Name</label>
                <div class="col-sm-3">
                    <label for="newName" class="hide">wave</label>
                    <input type="text" class="form-control required" data-val="true" name="newName" id="newName" />
                    @Html.ValidationMessage("newName")
                </div>
                <div class="col-sm-2"></div>
                <div class="col-sm-3">
                    <button class="mainbutton modal-btn submit-btn" type="submit" id="btnAdd">Add</button>
                </div>
            </div>
        </div>
    </div>
}

@Html.AntiForgeryToken()
<form class="form-horizontal" role="form" method="POST">
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                <label for="ddlSearch" class="col-sm-2 control-label">
                    @otherInfo
                </label>
                <div class="col-sm-3">
                    @Html.DropDownList("ddlSearch", (IEnumerable<SelectListItem>)ViewBag.OtherOptions, new
                    {
                        @class = "form-control"
                    })
                </div>
                <div class="col-sm-2"></div>
                <div class="col-sm-3">
                    <button class="mainbutton modal-btn submit-btn" type="button" id="btnSearch">Search</button>
                </div>
            </div>
        </div>
    </div>
</form>

<form class="form-horizontal" role="form" method="POST" id="frmList">
    <div class="main-content">
        <div class="content-body">
            <div class="form-group">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th width="20%">Option ID</th>
                            <th width="20%">Option Name</th>
                            <th width="20%">Status</th>
                            <th width="*">
                                <span>@otherInfo</span>
                            </th>
                            <th width="20%">Action</th>
                        </tr>
                    </thead>
                    <tbody id="tbodyList" data-bind="template: { name: displayMode, foreach: items, as: 'item' }">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</form>

@section Scripts
{
    <script type="text/html" id="view">
        <tr>
            <td>
                <span data-bind="html: item.ID"></span>
            </td>
            <td>
                <span class="" data-bind="html: item.Name"></span>
            </td>
            <td>
                <span data-bind="html: item.Status == '1' ? 'Active' : 'Inactive'"></span>
            </td>
            <td>
                <span data-bind="html: item.Other"></span>
            </td>
            <td>
                <a class="table-btn icon-pencil pencil-btn" href="#" title="Edit" data-bind="click: $root.changeToEdit">
                    <span style="display: none">wave</span>
                </a>
            </td>
        </tr>
    </script>

    <script type="text/html" id="edit">
        <tr>
            <td>
                <span data-bind="html: item.ID"></span>
            </td>
            <td>
                <label>
                    <span style="display: none">wave</span>
                    <input class="form-control required" type="text" data-val="true" data-bind="value: item.Name, attr: { name: item.ID }" />
                    <span class="field-validation-valid" data-bind="attr: { 'data-valmsg-for': item.ID }" data-valmsg-replace="true"></span>
                </label>
            </td>
            <td>
                <label>
                    <input type="radio" value="1" data-bind="checked: item.Status, attr: { name: 'radio' + $index() }" />
                    @EntityStatus.Active
                </label>
                <label>
                    <input type="radio" value="2" data-bind="checked: item.Status, attr: { name: 'radio' + $index() }" />
                    @EntityStatus.Inactive
                </label>
            </td>
            <td>
                <label for="ddlEdit" style="display: none">wave</label>
                @Html.DropDownList("ddlEdit", (IEnumerable<SelectListItem>)ViewBag.OtherOptions,
                    new { @class = "form-control required", data_bind = "value:item.OtherId" })
                @Html.ValidationMessage("ddlEdit")
                @*<select name="ddlEdit" class = "form-control required"
                        data-bind="options: $root.options, optionsText: 'Text', value: $root.selectedOptionEdit">
                </select>*@
                @*@Html.ValidationMessage("ddlEdit")*@
            </td>
            <td>
                <a class="table-btn icon-save save-btn" title="Save" href="#" data-bind="click: $root.updateItem">
                    <span style="display: none">wave</span>
                </a>
                <a class="icon-ban-circle table-btn active-btn" title="Cancel" href="#" data-bind="click: $root.changeToView">
                    <span style="display: none">wave</span>
                </a>
            </td>
        </tr>
    </script>

    <script type="text/javascript">

        function item(id, name, status, other, otherId, mode) {
            var self = this;
            self.ID = id;
            self.Name = name;
            self.Status = status + '';
            self.Other = other;
            self.OtherId = otherId + '';
            self.Mode = ko.observable(mode);
        }

        function vModel() {
            var self = this;
            self.items = ko.observableArray();
            self.options = ko.observableArray();
            self.selectedOptionSearch = ko.observable();
            self.selectedOptionEdit = ko.observable();
            self.updateItem = function (item) {
                if ($("#frmList").valid()) {

                    $.post("/Toolbox/Toolbox/UpdateOther", {
                        ddlName: "@ViewBag.ddlName",
                        id: item.ID,
                        name: item.Name,
                        status: item.Status,
                        otherId: item.OtherId
                    },
                        function (response) {
                            if (response.success) {
                                item.Other = $("#ddlEdit :selected").text();
                                item.Mode("view");
                                showMessage("success");
                            } else {
                                showMessage("fail", response.msg);
                            }
                        }, "json");
                };
            };

            self.displayMode = function (item) {
                return item.Mode();
            };
            self.changeToEdit = function (item) {
                var oldStatus = { Status: item.Status };
                item.oldStatus = oldStatus;
                item.oldName = item.Name;
                item.oldOtherId = item.OtherId;
                item.Mode("edit");
            };
            self.changeToView = function (item) {
                item.Status = item.oldStatus.Status;
                item.Name = item.oldName;
                item.OtherId = item.oldOtherId;
                item.Mode("view");
            };
        };

        var vm;
        jQuery(function () {
            vm = new vModel();
            var otherId = "@ViewBag.ddlName" == "SchoolTypes" ? -1 : 0;
            $.getJSON("/Toolbox/Toolbox/Search?name=@ViewBag.ddlName", { otherId: otherId }, function (json) {
                $.each(json.data, function (i, value) {
                    vm.items.push(new item(value.ID, value.Name, value.Status.value, value.Other, value.OtherId, "view"));
                });
                ko.applyBindings(vm);
            });

            $("#btnAdd").click(function () {
                var newName = $("#newName").val();
                var status = $("[name='newStatus']:checked").val();
                var otherId = $("#newDdlOther").val();
                if ($("#frmAdd").valid()) {
                    $.post("/Toolbox/Toolbox/Add", {
                        ddlName: "@ViewBag.ddlName",
                        fieldName: newName,
                        otherId: otherId,
                        fieldStatus: status
                    }, function (response) {
                        if (response.success) {
                            showMessage("success");
                            var obj = new item();
                            obj.ID = response.data;
                            obj.Name = newName;
                            obj.Status = status;
                            obj.Other = $("#newDdlOther :selected").text();
                            obj.OtherId = otherId;
                            obj.Mode("view");
                            vm.items.unshift(obj);
                            $("#newName").val("");
                            $("[name='newStatus']").first().prop("checked", true);
                            RefreshDdl(obj);
                        } else {
                            showMessage("fail", response.msg);
                        }
                    }, "json");
                }
                return false;
            });

            $("#btnSearch").click(function () {
                var tmpId = $("#ddlSearch").val();
                if ("@ViewBag.ddlName" == "SchoolTypes") {
                    tmpId = tmpId == "" ? -1 : tmpId;
                } else {
                    tmpId = tmpId == "" ? 0 : tmpId;
                }

                $.getJSON("/Toolbox/Toolbox/Search?name=@ViewBag.ddlName", { otherId: tmpId }, function (json) {
                    vm.items.removeAll();
                    $.each(json.data, function (i, value) {
                        vm.items.push(new item(value.ID, value.Name, value.Status.value, value.Other, value.OtherId, "view"));
                    });
                });
            });
        });

        function RefreshDdl(item) {
            if ("@titleName" == "School Types" && item.OtherId == 0) {
                $("#newDdlOther").append("<option value=" + item.ID + ">" + item.Name + "</option>");
                $("#ddlSearch").append("<option value=" + item.ID + ">" + item.Name + "</option>");
            }
        }
    </script>
}